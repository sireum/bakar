package P is
   procedure GCD(M, N : in Integer; G : out Integer);
   --# derives G from M,N;
   --# pre M >= 0 and N > 0;
end P;

package body P is
   
   procedure Divide(C,D : in Integer;
		    Q,R : out Integer)
     --# derives Q, R from C,D;
     --# pre (C >= 0) and (D > 0);
     --# post (0 <= R) and (R < D) and (C = (D * Q) + R);
   is
      --# hide Divide;
   begin
      null;  -- we don't care how this is implemented for now
   end Divide;
   
   procedure Swap(X, Y : in out Integer)
     --# derives X from Y & Y from X;
     --# post X = Y~ and Y = X~;
   is
     T : Integer;
   begin
      T := X; X := Y; Y := T;
   end Swap;
   
   procedure GCD(M, N : in Integer; G : out Integer)
   is
     C, D : Integer;
     Q, R : Integer;
   begin
      C := M; D := N;
      while D /= 0 loop
	 --# assert C >= 0 and D > 0;
	 Divide(C,D,Q,R); -- Q is unused
         C := R;
         Swap(C,D);
      end loop;
      G := C;
   end GCD; -- Q is unused
end P;

