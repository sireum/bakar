package Inventory
  --# own Content;
  --# initializes Content;
is
   Max_Size : constant := 100;

   type Inventories is limited private;
   type Part_Numbers is range 1000 .. 9999;

   procedure Add(Part   : in  Part_Numbers;
                 Number : in  Positive;
                 Full   : out Boolean);
   --# global in out Content;
   --# derives Content from Part, Number, Content &
   --#         Full from Part, Content;

   procedure Look_Up(Part   : in Part_Numbers;
                     Number : out Natural);
   --# global in Content;
   --# derives Number from Part, Content;

private
   type Sizes is range 0 .. Max_Size;
   subtype Indices is Sizes range 1 .. Sizes'Last;
   type Items is
      record
         Part_Number : Part_Numbers;
         Amount : Positive;
         Empty : Boolean;
      end record;
   type Inventories is array(Indices) of Items;
end Inventory;

with Spark_IO, Inventory;
--# inherit Spark_IO, Inventory;
--# main_program;
procedure Dialogue
  --# global in out Spark_IO.Inputs, Spark_IO.Outputs,
  --#               Inventory.Content;
  --# derives Spark_IO.Inputs, Inventory.Content from * &
  --#         Spark_IO.Outputs from *, Spark_IO.Inputs,
  --#           Inventory.Content;
is
   Number : Inventory.Part_Numbers;
   Amount : Natural;

   procedure Set_Up_Inventory
     --# global in out Inventory.Content;
     --# derives Inventory.Content from *;
      is separate;

   procedure Enter_Part(Number : out Inventory.Part_Numbers)
     --# global in out Spark_IO.Inputs, Spark_IO.Outputs;
     --# derives Spark_IO.Inputs from * &
     --#         Spark_IO.Outputs from *, Spark_IO.Inputs &
     --#         Number from Spark_IO.Inputs;
   is
      Number_Read : Integer;
      OK : Boolean;
   begin
      loop
         Spark_IO.Put_String(Spark_IO.Standard_Output,"Part number? ",0);
         Spark_IO.Get_Integer(Spark_IO.Standard_Input,Number_Read,0,OK);
         exit when OK and then
           (Number_Read >= Integer(Inventory.Part_Numbers'First) and
              Number_Read <= Integer(Inventory.Part_Numbers'Last));
         Spark_IO.Put_Line(Spark_IO.Standard_Output,
                           "Invalid part number, try again",0);
         Spark_IO.New_Line(Spark_IO.Standard_Output,1);
      end loop;
      Number := Inventory.Part_Numbers(Number_Read);
   end Enter_Part;

begin -- Dialogue
   Set_Up_Inventory;

   while True loop
      Enter_Part(Number);
      Inventory.Look_Up(Number,Amount);
      Spark_IO.Set_Out_File_Col(Spark_IO.Standard_Output,5);
      Spark_IO.Put_String(Spark_IO.Standard_Output,"part number: ",0);
      Spark_IO.Put_Integer(Spark_IO.Standard_Output,Integer(Number),0,10);
      Spark_IO.Put_String(Spark_IO.Standard_Output," - Items available:",0);
      Spark_IO.Set_Out_File_Col(Spark_IO.Standard_Output,50);
      if Amount = 0 then
         Spark_IO.Put_Line(Spark_IO.Standard_Output,"NONE",0);
         Spark_IO.New_Line(Spark_IO.Standard_Output,1);
      else
         Spark_IO.Put_Integer(Spark_IO.Standard_Output,Amount,5,10);
         Spark_IO.New_Line(Spark_IO.Standard_Output,2);
      end if;
   end loop;
end Dialogue;



