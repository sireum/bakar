package M is

   type Matrix_Index is range 0..9;
   type Matrix is array (Matrix_Index,Matrix_Index) of Integer;

   procedure Multiply(X, Y : in Matrix; Z : out Matrix);
   --# derives Z from X,Y;

   procedure Square(A : in out Matrix);
   --# derives A from *;

end M;

package body M is

   procedure Multiply(X, Y : in Matrix; Z : out Matrix)
   is
   begin
      Z := Matrix'(Matrix_Index => (Matrix_Index => 0)); -- zero Z
      for I in Matrix_Index loop
         for J in Matrix_Index loop
            for K in Matrix_Index loop
               Z(I,J) := Z(I,J) + X(I,K) * Y(K,J);
            end loop;
         end loop;
      end loop;
   end Multiply;

   procedure Square(A : in out Matrix)
   is
   begin
      -- This call violates aliasing rules
      Multiply(A,A,A);  -- parameter overlap expected
   end Square;


end M;

