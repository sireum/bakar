(* Compilation Unit *)
Library_Unit ( 1,
  (* Compilation Unit - Unit Declaration *)
  Library_Subprogram( 2,
    (* Function Body Declaration *)
    Function( 3,
      {
        function_astnum =   
          (* Function Body - AST Number *)
          4; 
        function_name =
          (* Function Body - Name *)
           (*Prime*) 1;
        function_result_subtype = 
          (* Function Body - Return Type *)
          Integer;
        function_contracts = 
          (* Function Body - Specification *)
          [];
        function_parameter_profile = 
          (* Function Body - Parameters *)
          [
          { parameter_astnum = 5; parameter_name =  (*N*) 1; parameter_subtype_mark = 1; parameter_mode = In; parameter_default_expression = None }];
        function_declarative_part = 
          (* Function Body - Locally Defined Variables *)
          [
          { declaration_astnum = 6; object_name =  (*Result*) 2; object_nominal_subtype = 1; initialization_expression = None }; 
          { declaration_astnum = 7; object_name =  (*I*) 3; object_nominal_subtype = 1; initialization_expression = None }; 
          { declaration_astnum = 8; object_name =  (*T*) 4; object_nominal_subtype = 1; initialization_expression = None }];
        function_statements = 
          (* Function Body - Statements *)
          S_Sequence (9,
            S_Assignment (10,  (*Result*) 2, E_Literal (11, Integer_Literal 0)),
            S_Sequence (12,
              S_If (13, E_Binary_Operation (14, Or, E_Binary_Operation (15, Equal, E_Identifier (16,  (*N*) 1), E_Literal (17, Integer_Literal 1)), E_Binary_Operation (18, Equal, E_Identifier (19,  (*N*) 1), E_Literal (20, Integer_Literal 2))),
                S_Assignment (21,  (*Result*) 2, E_Literal (22, Integer_Literal 1))
              ),
              S_Sequence (23,
                S_Assignment (24,  (*I*) 3, E_Literal (25, Integer_Literal 2)),
                S_Sequence (26,
                  S_While_Loop (27, E_Binary_Operation (28, And, E_Binary_Operation (29, Less_Than, E_Identifier (30,  (*I*) 3), E_Identifier (31,  (*N*) 1)), E_Binary_Operation (32, Equal, E_Identifier (33,  (*Result*) 2), E_Literal (34, Integer_Literal 0))),
                    S_Sequence (35,
                      S_Assignment (36,  (*T*) 4, E_Binary_Operation (37, Divide, E_Identifier (38,  (*N*) 1), E_Identifier (39,  (*I*) 3))),
                      S_If (40, E_Binary_Operation (41, Equal, E_Identifier (42,  (*N*) 1), E_Binary_Operation (43, Multiply, E_Identifier (44,  (*T*) 4), E_Identifier (45,  (*I*) 3))),
                        S_Assignment (46,  (*Result*) 2, E_Literal (47, Integer_Literal 1))
                      ) )
                  ),
                  S_Return (48, (Some (E_Identifier (49,  (*Result*) 2)))) ) ) ) )
      }
    )
  ),  
  (* Compilation Unit - Type Table *)
  {
    tt_exptype_table = 
      (* Expression AstNum --> TypeNum *) 
      [
        (11, 2) ;
        (14, 3) ;
        (15, 3) ;
        (16, 1) ;
        (17, 2) ;
        (18, 3) ;
        (19, 1) ;
        (20, 2) ;
        (22, 2) ;
        (25, 2) ;
        (28, 3) ;
        (29, 3) ;
        (30, 1) ;
        (31, 1) ;
        (32, 3) ;
        (33, 1) ;
        (34, 2) ;
        (37, 1) ;
        (38, 1) ;
        (39, 1) ;
        (41, 3) ;
        (42, 1) ;
        (43, 1) ;
        (44, 1) ;
        (45, 1) ;
        (47, 2) ;
        (49, 1)
      ];
    tt_typename_table = 
      (* TypeNum --> (Type URI * (Type Declaration AST Num) Option) *) 
      [
        (1, ("ada://ordinary_type/Standard-1:1/Integer-1:1", None)) ;
        (2, ("universal_integer", None)) ;
        (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1", None))
      ]
  }
)