package The_Stack_Praxis;


typealias _SIGNED_INTEGER_TYPE_ Pointer_Range;

typealias Pointer_Range Index_Range;

typealias _ARRAY_ Vector;

const $CONST {
  Stack_Size = (Integer) 100ii;
}

global Vector @@S;

global Pointer_Range @@Pointer;

procedure $$binit {

  #l0.
    @@Pointer := 0ii;

  #l1.
    @@S := `Vector { iter => 
        switch iter
          case (attribute__uif__first `Index_Range, attribute__uif__last `Index_Range) => 0ii
    };

  #l8.
    return;
}

procedure Push (
        Integer X) {

  #l2.
    @@Pointer := @@Pointer + 1ii;

  #l3.
    @@S[@@Pointer] := X;

  #l4.
    return;
}

procedure Pop (
        Integer X) {

  #l5.
    X := @@S[@@Pointer];

  #l6.
    @@Pointer := @@Pointer - 1ii;

  #l7.
    return (X);
}package The_Stack_Praxis;


procedure Push (
        Integer X) {

}

procedure Pop (
        Integer X) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;