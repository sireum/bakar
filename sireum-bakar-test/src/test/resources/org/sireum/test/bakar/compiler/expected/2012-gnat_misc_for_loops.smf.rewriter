package for_loops;


procedure Stupid (
        Index_Range Z) {
  local
    Index_Range I;
    Index_Range _tcomp0;
    Index_Range _tcomp1;
    Index_Range I0;
    Index_Range _tcomp2;
    Index_Range _tcomp3;
    Index_Range I1;
    Index_Range _tcomp4;
    Index_Range _tcomp5;
    Index_Range I2;
    Index_Range _tcomp6;
    Index_Range _tcomp7;
    Index_Range I3;
    Index_Range _tcomp8;
    Index_Range _tcomp9;
    Index_Range I4;
    Index_Range _tcomp10;
    Index_Range _tcomp11;
    Index_Range I5;
    Index_Range _tcomp12;
    Index_Range _tcomp13;
    Index_Range I6;
    Index_Range _tcomp14;
    Index_Range _tcomp15;
    Index_Range I7;
    Index_Range _tcomp16;
    Index_Range _tcomp17;
    Index_Range I8;
    Index_Range _tcomp18;
    Index_Range _tcomp19;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;
    FIXME _t16;
    FIXME _t17;
    FIXME _t18;
    FIXME _t19;
    FIXME _t20;
    FIXME _t21;
    FIXME _t22;
    FIXME _t23;
    FIXME _t24;
    FIXME _t25;
    FIXME _t26;
    FIXME _t27;
    FIXME _t28;
    FIXME _t29;
    FIXME _t30;
    FIXME _t31;
    FIXME _t32;
    FIXME _t33;
    FIXME _t34;
    FIXME _t35;
    FIXME _t36;
    FIXME _t37;
    FIXME _t38;
    FIXME _t39;
    FIXME _t40;
    FIXME _t41;
    FIXME _t42;
    FIXME _t43;
    FIXME _t44;
    FIXME _t45;
    FIXME _t46;
    FIXME _t47;
    FIXME _t48;
    FIXME _t49;
    FIXME _t50;
    FIXME _t51;
    FIXME _t52;
    FIXME _t53;
    FIXME _t54;
    FIXME _t55;
    FIXME _t56;
    FIXME _t57;
    FIXME _t58;
    FIXME _t59;
    FIXME _t60;
    FIXME _t61;
    FIXME _t62;
    FIXME _t63;


  #l2.
    _tcomp0 := attribute__uif__first ^Index_Range;

  #l3.
    _tcomp1 := attribute__uif__last ^Index_Range;

  #rwl0.
    _t0 := _tcomp0;

  #rwl1.
    _t1 := _tcomp1;

  #l4.
    if _t0 > _t1 then goto l1;

  #l5.
    I := _tcomp0;

  #l6.
    // empty loc

  #l7.
    A[I] := 1ii;

  #rwl2.
    _t2 := I;

  #rwl3.
    _t3 := _tcomp1;

  #l8.
    if _t2 == _t3 then goto l1;

  #rwl4.
    _t4 := I;

  #rwl5.
    _t5 := 1ii;

  #l9.
    I := _t4 + _t5;

  #l10.
    goto l6;

  #l1.
    // empty loc

  #l12.
    _tcomp2 := attribute__uif__first ^Index_Range;

  #l13.
    _tcomp3 := attribute__uif__last ^Index_Range;

  #rwl6.
    _t6 := _tcomp2;

  #rwl7.
    _t7 := _tcomp3;

  #l14.
    if _t6 > _t7 then goto l11;

  #l15.
    I0 := _tcomp3;

  #l16.
    // empty loc

  #l17.
    A[I] := 1ii;

  #rwl8.
    _t8 := I0;

  #rwl9.
    _t9 := _tcomp2;

  #l18.
    if _t8 == _t9 then goto l11;

  #rwl10.
    _t10 := I0;

  #rwl11.
    _t11 := 1ii;

  #l19.
    I0 := _t10 - _t11;

  #l20.
    goto l16;

  #l11.
    // empty loc

  #l22.
    _tcomp4 := 1ii;

  #l23.
    _tcomp5 := 3ii;

  #rwl12.
    _t12 := _tcomp4;

  #rwl13.
    _t13 := _tcomp5;

  #l24.
    if _t12 > _t13 then goto l21;

  #l25.
    I1 := _tcomp4;

  #l26.
    // empty loc

  #l27.
    A[I] := 1ii;

  #rwl14.
    _t14 := I1;

  #rwl15.
    _t15 := _tcomp5;

  #l28.
    if _t14 == _t15 then goto l21;

  #rwl16.
    _t16 := I1;

  #rwl17.
    _t17 := 1ii;

  #l29.
    I1 := _t16 + _t17;

  #l30.
    goto l26;

  #l21.
    // empty loc

  #l32.
    _tcomp6 := 1ii;

  #l33.
    _tcomp7 := Z;

  #rwl18.
    _t18 := _tcomp6;

  #rwl19.
    _t19 := _tcomp7;

  #l34.
    if _t18 > _t19 then goto l31;

  #l35.
    I2 := _tcomp7;

  #l36.
    // empty loc

  #l37.
    A[I] := 1ii;

  #rwl20.
    _t20 := I2;

  #rwl21.
    _t21 := _tcomp6;

  #l38.
    if _t20 == _t21 then goto l31;

  #rwl22.
    _t22 := I2;

  #rwl23.
    _t23 := 1ii;

  #l39.
    I2 := _t22 - _t23;

  #l40.
    goto l36;

  #l31.
    // empty loc

  #rwl24.
    _t24 := attribute__uif__first ^Index_Range;

  #rwl25.
    _t25 := 10ii;

  #l42.
    _tcomp8 := _t24 + _t25;

  #l43.
    _tcomp9 := Z;

  #rwl26.
    _t26 := _tcomp8;

  #rwl27.
    _t27 := _tcomp9;

  #l44.
    if _t26 > _t27 then goto l41;

  #l45.
    I3 := _tcomp8;

  #l46.
    // empty loc

  #l47.
    A[I] := A[I];

  #rwl28.
    _t28 := I3;

  #rwl29.
    _t29 := _tcomp9;

  #l48.
    if _t28 == _t29 then goto l41;

  #rwl30.
    _t30 := I3;

  #rwl31.
    _t31 := 1ii;

  #l49.
    I3 := _t30 + _t31;

  #l50.
    goto l46;

  #l41.
    // empty loc

  #rwl32.
    _t32 := attribute__uif__first ^Index_Range;

  #rwl33.
    _t33 := 10ii;

  #l52.
    _tcomp10 := _t32 + _t33;

  #l53.
    _tcomp11 := Z;

  #rwl34.
    _t34 := _tcomp10;

  #rwl35.
    _t35 := _tcomp11;

  #l54.
    if _t34 > _t35 then goto l51;

  #l55.
    I4 := _tcomp11;

  #l56.
    // empty loc

  #l57.
    A[I] := A[I];

  #rwl36.
    _t36 := I4;

  #rwl37.
    _t37 := _tcomp10;

  #l58.
    if _t36 == _t37 then goto l51;

  #rwl38.
    _t38 := I4;

  #rwl39.
    _t39 := 1ii;

  #l59.
    I4 := _t38 - _t39;

  #l60.
    goto l56;

  #l51.
    // empty loc

  #l62.
    _tcomp12 := ;

  #l63.
    _tcomp13 := ;

  #rwl40.
    _t40 := _tcomp12;

  #rwl41.
    _t41 := _tcomp13;

  #l64.
    if _t40 > _t41 then goto l61;

  #l65.
    I5 := _tcomp12;

  #l66.
    // empty loc

  #l67.
    A[I] := A[I];

  #rwl42.
    _t42 := I5;

  #rwl43.
    _t43 := _tcomp13;

  #l68.
    if _t42 == _t43 then goto l61;

  #rwl44.
    _t44 := I5;

  #rwl45.
    _t45 := 1ii;

  #l69.
    I5 := _t44 + _t45;

  #l70.
    goto l66;

  #l61.
    // empty loc

  #l72.
    _tcomp14 := ;

  #l73.
    _tcomp15 := ;

  #rwl46.
    _t46 := _tcomp14;

  #rwl47.
    _t47 := _tcomp15;

  #l74.
    if _t46 > _t47 then goto l71;

  #l75.
    I6 := _tcomp15;

  #l76.
    // empty loc

  #l77.
    A[I] := A[I];

  #rwl48.
    _t48 := I6;

  #rwl49.
    _t49 := _tcomp14;

  #l78.
    if _t48 == _t49 then goto l71;

  #rwl50.
    _t50 := I6;

  #rwl51.
    _t51 := 1ii;

  #l79.
    I6 := _t50 - _t51;

  #l80.
    goto l76;

  #l71.
    // empty loc

  #l82.
    _tcomp16 := ;

  #l83.
    _tcomp17 := ;

  #rwl52.
    _t52 := _tcomp16;

  #rwl53.
    _t53 := _tcomp17;

  #l84.
    if _t52 > _t53 then goto l81;

  #l85.
    I7 := _tcomp16;

  #l86.
    // empty loc

  #l87.
    A[I] := A[I];

  #rwl54.
    _t54 := I7;

  #rwl55.
    _t55 := _tcomp17;

  #l88.
    if _t54 == _t55 then goto l81;

  #rwl56.
    _t56 := I7;

  #rwl57.
    _t57 := 1ii;

  #l89.
    I7 := _t56 + _t57;

  #l90.
    goto l86;

  #l81.
    // empty loc

  #l92.
    _tcomp18 := ;

  #l93.
    _tcomp19 := ;

  #rwl58.
    _t58 := _tcomp18;

  #rwl59.
    _t59 := _tcomp19;

  #l94.
    if _t58 > _t59 then goto l91;

  #l95.
    I8 := _tcomp19;

  #l96.
    // empty loc

  #l97.
    A[I] := A[I];

  #rwl60.
    _t60 := I8;

  #rwl61.
    _t61 := _tcomp18;

  #l98.
    if _t60 == _t61 then goto l91;

  #rwl62.
    _t62 := I8;

  #rwl63.
    _t63 := 1ii;

  #l99.
    I8 := _t62 - _t63;

  #l100.
    goto l96;

  #l91.
    // empty loc

  #l101.
    return;
}package for_loops;


typealias _SIGNED_INTEGER_TYPE_ Index_Range;

typealias _ARRAY_ Vector;

global Vector @@A;

procedure $$sinit {

  #l102.
    @@A := 1ii;

  #l103.
    return;
}

const $CONST {
  aFloatConst = (Float)  + ;

  aIntConst = (Integer) 1ii + 3ii;
}

procedure Stupid (
        Index_Range Z) {

}package Standard;


typealias Boolean standard::boolean;

typealias Integer standard::integer;

typealias Integer standard::natural;

typealias Integer standard::positive;

typealias Float standard::float;

typealias Integer universal_integer;

typealias Float universal_real;