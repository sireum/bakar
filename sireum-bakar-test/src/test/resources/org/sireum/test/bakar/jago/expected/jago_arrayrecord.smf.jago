(* Compilation Unit *)
Library_Unit_XX 1
  (* Compilation Unit - Unit Declaration *)
  (Library_Subprogram_XX 2
    (* Procedure Body Declaration *)
    (Global_Procedure_XX 3
      (mkprocedure_declaration_xx 4
        (* Procedure Name *)
        ((*Test*) 1)
        (* Formal Parameters *)
        (
        (mkparameter_specification_xx 5 ((*N*) 1) Integer In) :: 
        (mkparameter_specification_xx 6 ((*M*) 2) Integer Out) :: nil) 
        (* Procedure Contract *)
        (nil)  
        (* Object Declarations *)
        ((D_Seq_Declaration_XX 7 
      (D_Type_Declaration_XX 8 (Record_Type_Declaration_XX 9 ((*RecordT*) 1) ((((*X*) 3), Integer) :: nil))) 
      (D_Seq_Declaration_XX 11 
      (D_Type_Declaration_XX 12 (Array_Type_Declaration_XX 13 ((*ArrayT*) 2) ((*componentType*) Integer) ((*lowerBound*) 0) ((*upperBound*) 5))) 
      (D_Seq_Declaration_XX 14 
      (D_Procedure_Declaration_XX 15 (mkprocedure_declaration_xx 16
        (* Procedure Name *)
        ((*Increase*) 2)
        (* Formal Parameters *)
        (
        (mkparameter_specification_xx 17 ((*X*) 4) Integer In) :: 
        (mkparameter_specification_xx 18 ((*Y*) 5) Integer Out) :: nil) 
        (* Procedure Contract *)
        (nil)  
        (* Object Declarations *)
        (D_Null_Declaration_XX)
        (* Procedure Body *)
          (S_Assignment_XX 19 (E_Identifier_XX 20 ((*Y*) 5) (**(nil)**)) (E_Binary_Operation_XX 21 Plus (E_Name_XX 22 (E_Identifier_XX 23 ((*X*) 4) (**(nil)**)) (**(nil)**)) (E_Literal_XX 24 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))
      )) 
      (D_Seq_Declaration_XX 25 
      (D_Object_Declaration_XX 26 (mkobject_declaration_xx 27 ((*R*) 6) (Aggregate ((*RecordT*) 1)) None)) 
      (D_Seq_Declaration_XX 28 
      (D_Object_Declaration_XX 29 (mkobject_declaration_xx 30 ((*A*) 7) (Aggregate ((*ArrayT*) 2)) None)) 
      (D_Seq_Declaration_XX 31 
      (D_Object_Declaration_XX 32 (mkobject_declaration_xx 33 ((*Result*) 8) Integer (Some ((E_Literal_XX 34 (Integer_Literal 1) (**(nil)**)))))) 
      (D_Seq_Declaration_XX 35 
      (D_Object_Declaration_XX 36 (mkobject_declaration_xx 37 ((*T*) 9) Integer (Some ((E_Name_XX 38 (E_Identifier_XX 39 ((*Result*) 8) (**(nil)**)) (**(nil)**)))))) 
      (D_Seq_Declaration_XX 40 
      (D_Object_Declaration_XX 41 (mkobject_declaration_xx 42 ((*T1*) 10) Integer None)) 
      (D_Object_Declaration_XX 43 (mkobject_declaration_xx 44 ((*T2*) 11) Integer None)))))))))))
        (* Procedure Body *)
          (S_Sequence_XX 45
          (S_Assignment_XX 46 (E_Selected_Component_XX 47 48 ((*R*) 6) ((*X*) 3) (**(nil)**)) (E_Literal_XX 51 (Integer_Literal 1) (**(nil)**))) 
          (S_Sequence_XX 52
          (S_Assignment_XX 53 (E_Indexed_Component_XX 54 55 ((*A*) 7) (E_Literal_XX 57 (Integer_Literal 0) (**(nil)**)) (**(nil)**)) (E_Literal_XX 58 (Integer_Literal 1) (**(nil)**))) 
          (S_Sequence_XX 59
          (S_Assignment_XX 60 (E_Identifier_XX 61 ((*T1*) 10) (**(nil)**)) (E_Binary_Operation_XX 62 Plus (E_Name_XX 63 (E_Selected_Component_XX 64 65 ((*R*) 6) ((*X*) 3) (**(nil)**)) (**(nil)**)) (E_Name_XX 68 (E_Identifier_XX 69 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**))) 
          (S_Sequence_XX 70
          (S_Assignment_XX 71 (E_Identifier_XX 72 ((*T2*) 11) (**(nil)**)) (E_Binary_Operation_XX 73 Plus (E_Name_XX 74 (E_Indexed_Component_XX 75 76 ((*A*) 7) (E_Literal_XX 78 (Integer_Literal 0) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 79 (E_Identifier_XX 80 ((*T1*) 10) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**))) 
          (S_Sequence_XX 81
          (S_Assignment_XX 82 (E_Identifier_XX 83 ((*T*) 9) (**(nil)**)) (E_Name_XX 84 (E_Identifier_XX 85 ((*T2*) 11) (**(nil)**)) (**(nil)**))) 
          (S_Sequence_XX 86
          (S_Procedure_Call_XX 87 88 ((*Increase*) 2) 
            ((E_Name_XX 89 (E_Identifier_XX 90 ((*T2*) 11) (**(nil)**)) (**(nil)**)) :: (E_Name_XX 91 (E_Identifier_XX 92 ((*T*) 9) (**(nil)**)) (**(nil)**)) :: nil)
          ) 
          (S_Sequence_XX 93
          (S_If_XX 94 (E_Binary_Operation_XX 95 Greater_Than (E_Name_XX 96 (E_Identifier_XX 97 ((*T*) 9) (**(nil)**)) (**(nil)**)) (E_Literal_XX 98 (Integer_Literal 0) (**(nil)**)) (**(nil)**))
            (S_Assignment_XX 99 (E_Identifier_XX 100 ((*T*) 9) (**(nil)**)) (E_Binary_Operation_XX 101 Plus (E_Name_XX 102 (E_Identifier_XX 103 ((*T*) 9) (**(nil)**)) (**(nil)**)) (E_Literal_XX 104 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))
            S_Null_XX
          ) 
          (S_Sequence_XX 105
          (S_If_XX 106 (E_Binary_Operation_XX 107 Greater_Than (E_Name_XX 108 (E_Identifier_XX 109 ((*T*) 9) (**(nil)**)) (**(nil)**)) (E_Literal_XX 110 (Integer_Literal 1) (**(nil)**)) (**(nil)**))
            (S_Assignment_XX 111 (E_Identifier_XX 112 ((*T*) 9) (**(nil)**)) (E_Binary_Operation_XX 113 Plus (E_Name_XX 114 (E_Identifier_XX 115 ((*T*) 9) (**(nil)**)) (**(nil)**)) (E_Literal_XX 116 (Integer_Literal 2) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))
            (S_Assignment_XX 117 (E_Identifier_XX 118 ((*T*) 9) (**(nil)**)) (E_Binary_Operation_XX 119 Minus (E_Name_XX 120 (E_Identifier_XX 121 ((*T*) 9) (**(nil)**)) (**(nil)**)) (E_Literal_XX 122 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))
          ) 
          (S_Sequence_XX 123
          (S_While_Loop_XX 124 (E_Binary_Operation_XX 125 Greater_Than (E_Name_XX 126 (E_Identifier_XX 127 ((*T*) 9) (**(nil)**)) (**(nil)**)) (E_Literal_XX 128 (Integer_Literal 0) (**(nil)**)) (**(nil)**))
            (S_Sequence_XX 129
            (S_Assignment_XX 130 (E_Identifier_XX 131 ((*Result*) 8) (**(nil)**)) (E_Binary_Operation_XX 132 Divide (E_Binary_Operation_XX 133 Multiply (E_Name_XX 134 (E_Identifier_XX 135 ((*Result*) 8) (**(nil)**)) (**(nil)**)) (E_Name_XX 136 (E_Identifier_XX 137 ((*T*) 9) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (E_Name_XX 138 (E_Identifier_XX 139 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
            (S_Assignment_XX 140 (E_Identifier_XX 141 ((*T*) 9) (**(nil)**)) (E_Binary_Operation_XX 142 Minus (E_Name_XX 143 (E_Identifier_XX 144 ((*T*) 9) (**(nil)**)) (**(nil)**)) (E_Literal_XX 145 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**))))
          ) 
          (S_Assignment_XX 146 (E_Identifier_XX 147 ((*M*) 2) (**(nil)**)) (E_Name_XX 148 (E_Identifier_XX 149 ((*Result*) 8) (**(nil)**)) (**(nil)**))))))))))))
      )
    )
  )