package Array_Of_Records;


procedure $$binit {

  #l1.
    oArray := `ObjectArray { iter => 
        switch iter
          default => dummyObject};

  #l2.
    return;
}

procedure Swap (
        ObjectArray Q,
        Index_Range theIndex) {
  local
    Integer temp1;
    Integer temp2;


  #l3.
    temp1 := Q[theIndex].X;

  #l4.
    temp2 := Q[theIndex].Y;

  #l5.
    Q[theIndex].X := temp2;

  #l6.
    Q[theIndex].Y := temp1;

  #l7.
    return (Q);
}package Array_Of_Records;


record Object {

  Integer X;

  Integer Y;
}

typealias _SIGNED_INTEGER_TYPE_ Index_Range;

typealias _ARRAY_ ObjectArray;

global ObjectArray @@oArray;

const $CONST {
  dummyObject = (Object) `Object {
    __positional0 = 0ii,
    __positional1 = 0ii
  };
}

procedure Swap (
        ObjectArray Q,
        Index_Range theIndex) {

}package Standard;


typealias Boolean standard::boolean;

typealias Integer standard::integer;

typealias Integer standard::natural;

typealias Integer standard::positive;

typealias Float standard::float;

typealias Integer universal_integer;

typealias Float universal_real;