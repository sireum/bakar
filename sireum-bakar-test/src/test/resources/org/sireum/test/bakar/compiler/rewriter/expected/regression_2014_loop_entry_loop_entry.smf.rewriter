package Loop_Entry;


procedure Array_Loop_Entry (
        Array_Of_Int A) {
  local
    Integer Temp;
    universal_integer Index;
    universal_integer _tcomp0;
    universal_integer _tcomp1;
    Integer _t0;
    universal_integer _t1;
    Integer _t2;
    universal_integer _t3;
    universal_integer _t4;
    universal_integer _t5;
    Integer _t6;
    Integer _t7;
    Integer _t8;
    universal_integer _t9;
    Integer _t10;
    Integer _t11;
    Integer _t12;
    universal_integer _t13;
    universal_integer _t14;
    universal_integer _t15;
    universal_integer _t16;
    universal_integer _t17;


  #l0.
    // empty loc

  #l3.
    _tcomp0 := attribute__uif__first `A;

  #rwl0.
    _t0 := attribute__uif__last `A;

  #rwl1.
    _t1 := 1ii;

  #rwl2.
    _t2 := _t0 + _t1;

  #rwl3.
    _t3 := 2ii;

  #l4.
    _tcomp1 := _t2 / _t3;

  #rwl4.
    _t4 := _tcomp0;

  #rwl5.
    _t5 := _tcomp1;

  #l5.
    if _t4 > _t5 then goto l2;

  #l6.
    Index := _tcomp0;

  #l7.
    // empty loc

  #l8.
    Temp := A[Index];

  #rwl6.
    _t6 := attribute__uif__last `A;

  #rwl7.
    _t7 := Index;

  #rwl8.
    _t8 := _t6 - _t7;

  #rwl9.
    _t9 := 1ii;

  #l9.
    A[Index] := A[_t8 + _t9];

  #rwl10.
    _t10 := attribute__uif__last `A;

  #rwl11.
    _t11 := Index;

  #rwl12.
    _t12 := _t10 - _t11;

  #rwl13.
    _t13 := 1ii;

  #l10.
    A[_t12 + _t13] := Temp;

  #l11.
    assert (proof__uif__loop_invariant proof__uif__for_all {universal_integer J => 
        switch J
          case (attribute__uif__first `A, Index) => A[J] == attribute__uif__loop_entry (Inner, A)[attribute__uif__last `A - J + 1ii] &&& A[attribute__uif__last `A - J + 1ii] == attribute__uif__loop_entry (Outer, A)[J]
          default => true} && proof__uif__for_all {universal_integer J => 
        switch J
          case (Index + 1ii, attribute__uif__last `A - Index) => A[J] == attribute__uif__loop_entry (Inner, A)[J]
          default => true}, "Loop Invariant failed at [13, 10]");

  #rwl14.
    _t14 := Index;

  #rwl15.
    _t15 := _tcomp1;

  #l12.
    if _t14 == _t15 then goto l2;

  #rwl16.
    _t16 := Index;

  #rwl17.
    _t17 := 1ii;

  #l13.
    Index := _t16 + _t17;

  #l14.
    goto l7;

  #l2.
    // empty loc

  #l15.
    goto l1;

  #l16.
    goto l0;

  #l1.
    // empty loc

  #l17.
    return;
}

procedure Record_Loop_Entry (
        Record_Of_Array_Of_Int A) {
  local
    Integer Temp;
    Integer Z;
    Integer _t18;
    universal_integer _t19;


  #l18.
    Temp := 0ii;

  #l19.
    // empty loc

  #l21.
    Z := 3ii;

  #rwl18.
    _t18 := Temp;

  #rwl19.
    _t19 := 1ii;

  #l22.
    Temp := _t18 + _t19;

  #l23.
    A := `Record_Of_Array_Of_Int {
      T = 3ii,
      Z = 5ii,
      U = `Array_Of_Int {anonymousType$0 iter => 
          switch iter
            default => 1ii},
      X = `Array_Of_Int {anonymousType$0 iter => 
          switch iter
            default => 1ii}
    };

  #l24.
    // empty loc

  #l26.
    assert (proof__uif__loop_invariant attribute__uif__loop_entry (OuterLoop2, A).X == A.X, "Loop Invariant failed at [41, 12]");

  #l27.
    assert (proof__uif__loop_invariant attribute__uif__loop_entry (InnerLoop2, A.X)[Temp] == A.X[Temp], "Loop Invariant failed at [42, 12]");

  #l28.
    assert (proof__uif__loop_invariant attribute__uif__loop_entry (InnerLoop2, A.X[Z]) == A.X[Z], "Loop Invariant failed at [43, 12]");

  #l29.
    goto l24;

  #l25.
    // empty loc

  #l30.
    goto l19;

  #l20.
    // empty loc

  #l31.
    return;
}package Loop_Entry;


typealias Integer anonymousType$0;

typealias _ARRAY_ Array_Of_Int;

record Record_Of_Array_Of_Int {

  Integer T;

  Array_Of_Int U;

  Integer Z;

  Array_Of_Int X;
}

procedure Array_Loop_Entry (
        Array_Of_Int A) {

}

procedure Record_Loop_Entry (
        Record_Of_Array_Of_Int A) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;