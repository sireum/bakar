package SumPackage;


procedure Integer Sum (
        Integer N) {
  local
    Integer R;
    Integer T;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;


  #l0.
    R := 0ii;

  #rwl0.
    _t0 := N;

  #rwl1.
    _t1 := 0ii;

  #l2.
    if !(_t0 >= _t1) then goto l1;

  #rwl2.
    _t2 := N;

  #rwl3.
    _t3 := 1ii;

  #l3.
    T := _t2 - _t3;

  #l5.
    // empty loc

  #rwl4.
    _t4 := T;

  #rwl5.
    _t5 := 0ii;

  #l6.
    if !(_t4 >= _t5) then goto l4;

  #rwl6.
    _t6 := R;

  #rwl7.
    _t7 := 1ii;

  #l7.
    R := _t6 + _t7;

  #rwl8.
    _t8 := T;

  #rwl9.
    _t9 := 1ii;

  #l8.
    T := _t8 - _t9;

  #l9.
    goto l5;

  #l4.
    // empty loc

  #l10.
    assert proof__uif__assert N == R "Assertion failed at [15, 7]";

  #l1.
    // empty loc

  #l11.
    return R;
}

procedure Sum2 (
        Integer N,
        Integer R) {
  local
    Integer T;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;
    FIXME _t16;
    FIXME _t17;
    FIXME _t18;
    FIXME _t19;


  #l12.
    R := 0ii;

  #rwl10.
    _t10 := N;

  #rwl11.
    _t11 := 0ii;

  #l14.
    if !(_t10 >= _t11) then goto l13;

  #rwl12.
    _t12 := N;

  #rwl13.
    _t13 := 1ii;

  #l15.
    T := _t12 - _t13;

  #l17.
    // empty loc

  #rwl14.
    _t14 := T;

  #rwl15.
    _t15 := 0ii;

  #l18.
    if !(_t14 >= _t15) then goto l16;

  #rwl16.
    _t16 := R;

  #rwl17.
    _t17 := 1ii;

  #l19.
    R := _t16 + _t17;

  #rwl18.
    _t18 := T;

  #rwl19.
    _t19 := 1ii;

  #l20.
    T := _t18 - _t19;

  #l21.
    goto l17;

  #l16.
    // empty loc

  #l22.
    assert proof__uif__assert N == R "Assertion failed at [32, 7]";

  #l13.
    // empty loc

  #l23.
    return;
}package SumPackage;


procedure Integer Sum (
        Integer N) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;