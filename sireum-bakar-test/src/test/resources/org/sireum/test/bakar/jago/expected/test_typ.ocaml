type mode = 
    | In
    | Out

type typ = 
    | Tint

type astnum = int

type idnum = int

type procnum = int

type typenum = int

type typedeclnum = astnum

type aspectnum = int

type typeuri = string

type type_table = {
    tt_exptype_table: (astnum * typenum) list;
    tt_typename_table: (typenum * (typeuri * typedeclnum option)) list
}

type constant = 
	int

type unary_operation = 
	| Onegint 
	| Oposint 

type binary_operation = 
	| Ceq 
	| Cge 
	| Cgt 
	| Cle 
	| Clt 
	| Cne 
	| Oadd 
	| Oand 
	| Odiv 
	| Omul 
	| Oor 
	| Osub 
	| Oxor 

type expr = 
	| Econst of astnum * constant
	| Evar of astnum * idnum
	| Ebinop of astnum * binary_operation * expr * expr
	| Eunop of astnum * unary_operation * expr

type stmt = 
	| Sassign of astnum * idnum * expr
	| Sifthen of astnum * expr * stmt
	| Swhile of astnum * expr * stmt
	| Sseq of astnum * stmt * stmt
	| Sreturn of astnum * (expr) option
	| Sassert of astnum * expr
	| Sloopinvariant of astnum * expr

type param_specification = {
	param_astnum: astnum;
	param_idents: idnum list;
	param_typenum: typenum;
	param_mode: mode;
	param_init: (expr) option 
}

type aspect_specification = {
	aspect_astnum: astnum;
	aspect_mark: aspectnum;
	aspect_definition: expr 
}

(* Local variables declarations used in the procedure/function body *)
type local_declaration = {
	local_astnum: astnum;
	local_idents: idnum list;
	local_typenum: typenum;
	local_init: (expr) option 
}

type procedure_body = {
	proc_astnum: astnum;
	proc_name: procnum;
	proc_specs: (aspect_specification list) option;
	proc_params: (param_specification list) option;
	proc_loc_idents: (local_declaration list) option;
	proc_body: stmt 
}

type function_body = {
	fn_astnum: astnum;
	fn_name: procnum;
	fn_ret_type: typ;
	fn_specs: (aspect_specification list) option;
	fn_params: (param_specification list) option;
	fn_loc_idents: (local_declaration list) option;
	fn_body: stmt 
}

type subprogram = 
	| Sproc of astnum * procedure_body
	| Sfunc of astnum * function_body

type unit_declaration = 
	| UnitDecl of astnum * subprogram

type compilation_unit = 
	| CompilationUnit of astnum * unit_declaration * type_table