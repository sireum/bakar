package P;


procedure Shadow_Effect (
        Painting P,
        Dot D) {
  local
    Color C;
    Color _tcomp0;
    Color _tcomp1;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;
    FIXME _t16;
    FIXME _t17;
    FIXME _t18;
    FIXME _t19;
    FIXME _t20;


  #l2.
    _tcomp0 := attribute__uif__first `Color;

  #l3.
    _tcomp1 := attribute__uif__last `Color;

  #rwl0.
    _t0 := _tcomp0;

  #rwl1.
    _t1 := _tcomp1;

  #l4.
    if _t0 > _t1 then goto l1;

  #l5.
    C := _tcomp0;

  #l6.
    // empty loc

  #rwl2.
    _t2 := attribute__uif__loop_entry P;

  #rwl3.
    _t3 := P.Plain;

  #rwl4.
    _t4 := _t2.Plain;

  #rwl5.
    _t5 := P.Plain;

  #rwl6.
    _t6 := _t5[J];

  #rwl7.
    _t7 := D;

  #rwl8.
    _t8 := P.Shadow;

  #rwl9.
    _t9 := _t8[J];

  #rwl10.
    _t10 := D;

  #rwl11.
    _t11 := _t3 == _t4;

  #rwl12.
    _t12 := proof__uif__for_all {universal_integer J => 
        switch J
          case (attribute__uif__first `Color, attribute__uif__pred (`Color, C)) => 
              if _t6 == _t7 then _t9 == _t10

          default => true};

  #l7.
    assert proof__uif__loop_invariant _t11 &&& _t12;

  #rwl13.
    _t13 := P.Plain;

  #rwl14.
    _t14 := _t13[C];

  #rwl15.
    _t15 := D;

  #l9.
    if !(_t14 == _t15) then goto l8;

  #rwl16.
    _t16 := P.Shadow;

  #l10.
    _t16[C] := D;

  #rwl17.
    P.Shadow := _t16;

  #l8.
    // empty loc

  #rwl18.
    _t17 := C;

  #rwl19.
    _t18 := _tcomp1;

  #l11.
    if _t17 == _t18 then goto l1;

  #rwl20.
    _t19 := C;

  #rwl21.
    _t20 := 1ii;

  #l12.
    C := _t19 + _t20;

  #l13.
    goto l6;

  #l1.
    // empty loc

  #l14.
    return;
}

procedure Shadow_Effect_2 (
        Painting P,
        Dot D) {

  #l15.
    call Shadow_Effect (P, D);

  #l16.
    return;
}package P;


record Dot {

  Integer X;

  Integer Y;
}

typealias _ENUMERATION_TYPE_ Color;

typealias _ARRAY_ Dots;

record Painting {

  Dots Plain;

  Dots Shadow;
}

procedure Shadow_Effect (
        Painting P,
        Dot D) {

}

procedure Dot Get_Plain (
        Painting P,
        Color C) {
  local
    FIXME _t0;


  #rwl0.
    _t0 := P.Plain;

  #l17.
    return _t0[C];
}

procedure Boolean Plain_Is_Dot (
        Painting P,
        Color C,
        Dot D) {
  local
    Dot _tcomp2;
    FIXME _t1;
    FIXME _t2;


  #l18.
    call _tcomp2 := Get_Plain (P, C);

  #rwl1.
    _t1 := _tcomp2;

  #rwl2.
    _t2 := D;

  #l19.
    return _t1 == _t2;
}

procedure Boolean Some_Plain_Is_Dot (
        Painting P,
        Dot D) {
  local
    Boolean _tcomp3;


  #l20.
    call _tcomp3 := Plain_Is_Dot (P, C, D);

  #l21.
    return proof__uif__for_some {Color C => 
        switch C
          case (attribute__uif__first `Color, attribute__uif__last `Color) => _tcomp3
          default => true};
}

procedure Shadow_Effect_2 (
        Painting P,
        Dot D) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;