package InvertInjection;


procedure Invert (
        ElementArray A,
        ElementArray B) {
  local
    universal_integer I;
    universal_integer _tcomp0;
    universal_integer _tcomp1;


  #l2.
    _tcomp0 := attribute__uif__first (Element);

  #l3.
    _tcomp1 := attribute__uif__last (Element);

  #l4.
    if _tcomp0 > _tcomp1 then goto l1;

  #l5.
    I := _tcomp0;

  #l6.
    // empty loc

  #l7.
    assert proof__uif__loop_invariant proof__uif__for_all {universal_integer J => 
        switch J
          case (attribute__uif__first `Element, I - 1ii) => B[A[J]] == J
          default => true};

  #l8.
    B[A[I]] := I;

  #l9.
    if I == _tcomp1 then goto l1;

  #l10.
    I := I + 1ii;

  #l11.
    goto l6;

  #l1.
    // empty loc

  #l12.
    assert proof__uif__for_all {universal_integer J => 
        switch J
          case (attribute__uif__first (Element), attribute__uif__last (Element)) => B[A[J]] == J
          default => true};

  #l13.
    return (B);
}package InvertInjection;


typealias Natural Element;

typealias _ARRAY_ ElementArray;

const $CONST {
  N = (Natural) 100ii;
}

procedure Invert (
        ElementArray A,
        ElementArray B) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;