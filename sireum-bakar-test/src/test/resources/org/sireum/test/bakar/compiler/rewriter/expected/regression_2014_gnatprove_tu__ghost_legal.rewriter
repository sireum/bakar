package Ghost_Legal;


procedure Boolean Is_Even (
        Natural X) {
  local
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;


  #rwl0.
    _t0 := X;

  #rwl1.
    _t1 := 2ii;

  #rwl2.
    _t2 := _t0 MOD _t1;

  #rwl3.
    _t3 := 0ii;

  #l1.
    return _t2 == _t3;
}

procedure Boolean Is_Prime (
        Natural X) {
  local
    Natural Temp;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;
    FIXME _t16;
    FIXME _t17;


  #rwl4.
    _t4 := X;

  #rwl5.
    _t5 := 2ii;

  #rwl6.
    _t6 := _t4 MOD _t5;

  #rwl7.
    _t7 := 0ii;

  #l3.
    if !(_t6 == _t7) then goto l2;

  #l4.
    assert proof__uif__assert_and_cut Is_Even (X);

  #l5.
    return false;

  #l2.
    // empty loc

  #l6.
    Temp := 2ii;

  #l8.
    // empty loc

  #rwl8.
    _t8 := Temp;

  #rwl9.
    _t9 := X;

  #l9.
    if !(_t8 < _t9) then goto l7;

  #rwl10.
    _t10 := Temp;

  #rwl11.
    _t11 := 2ii;

  #l10.
    assert proof__uif__loop_invariant _t10 >= _t11;

  #rwl12.
    _t12 := X;

  #rwl13.
    _t13 := Temp;

  #rwl14.
    _t14 := _t12 MOD _t13;

  #rwl15.
    _t15 := 0ii;

  #l12.
    if !(_t14 == _t15) then goto l11;

  #l13.
    return false;

  #l11.
    // empty loc

  #rwl16.
    _t16 := Temp;

  #rwl17.
    _t17 := 1ii;

  #l14.
    Temp := _t16 + _t17;

  #l15.
    goto l8;

  #l7.
    // empty loc

  #l16.
    return true;
}package Ghost_Legal;


procedure Boolean Is_Even (
        Natural X) {

}

procedure Boolean Is_Prime (
        Natural X) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;