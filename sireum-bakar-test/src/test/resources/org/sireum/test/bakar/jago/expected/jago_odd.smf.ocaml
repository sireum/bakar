(* Compilation Unit *)
Library_Unit ( 1,
  (* Compilation Unit - Unit Declaration *)
  Library_Subprogram( 2,
    (* Function Body Declaration *)
    Function( 3,
      {
        function_astnum =   
          (* Function Body - AST Number *)
          4; 
        function_name =
          (* Function Body - Name *)
           (*Odd*) 1;
        function_result_subtype = 
          (* Function Body - Return Type *)
          Integer;
        function_contracts = 
          (* Function Body - Specification *)
          [];
        function_parameter_profile = 
          (* Function Body - Parameters *)
          [
          { parameter_astnum = 5; parameter_name =  (*X*) 1; parameter_subtype_mark = 1; parameter_mode = In; parameter_default_expression = None }];
        function_declarative_part = 
          (* Function Body - Locally Defined Variables *)
          [
          { declaration_astnum = 6; object_name =  (*Result*) 2; object_nominal_subtype = 1; initialization_expression = None }; 
          { declaration_astnum = 7; object_name =  (*T*) 3; object_nominal_subtype = 1; initialization_expression = None }];
        function_statements = 
          (* Function Body - Statements *)
          S_Sequence (8,
            S_Assignment (9,  (*Result*) 2, E_Literal (10, Integer_Literal 1)),
            S_Sequence (11,
              S_Assignment (12,  (*T*) 3, E_Binary_Operation (13, Divide, E_Identifier (14,  (*X*) 1), E_Literal (15, Integer_Literal 2))),
              S_Sequence (16,
                S_If (17, E_Binary_Operation (18, Equal, E_Identifier (19,  (*X*) 1), E_Binary_Operation (20, Multiply, E_Identifier (21,  (*T*) 3), E_Literal (22, Integer_Literal 2))),
                  S_Assignment (23,  (*Result*) 2, E_Literal (24, Integer_Literal 0))
                ),
                S_Return (25, (Some (E_Identifier (26,  (*Result*) 2)))) ) ) )
      }
    )
  ),  
  (* Compilation Unit - Type Table *)
  {
    tt_exptype_table = 
      (* Expression AstNum --> TypeNum *) 
      [
        (10, 2) ;
        (13, 1) ;
        (14, 1) ;
        (15, 2) ;
        (18, 3) ;
        (19, 1) ;
        (20, 1) ;
        (21, 1) ;
        (22, 2) ;
        (24, 2) ;
        (26, 1)
      ];
    tt_typename_table = 
      (* TypeNum --> (Type URI * (Type Declaration AST Num) Option) *) 
      [
        (1, ("ada://ordinary_type/Standard-1:1/Integer-1:1", None)) ;
        (2, ("universal_integer", None)) ;
        (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1", None))
      ]
  }
)