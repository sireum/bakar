(* Compilation Unit *)
Library_Unit 1
  (* Compilation Unit - Unit Declaration *) (
    Library_Subprogram 2 (
      (* Procedure Body Declaration *)
      Procedure 3 (
        mkprocedure_body 4
          (* Procedure Body - Name *)
          (*Linear_Div_With_LoopInvariant*) 1
          (* Procedure Body - Specification *)
          (nil)
          (* Procedure Body - Parameters *)
          (
          mkparameter_specification 5 (*Dividend*) 1 (1) (In) None :: 
          mkparameter_specification 6 (*Divisor*) 2 (1) (In) None :: 
          mkparameter_specification 7 (*Quotient*) 3 (1) (Out) None :: 
          mkparameter_specification 8 (*Remainder*) 4 (1) (Out) None :: nil) 
          (* Procedure Body - Variable Declarations *)
          (nil)
          (* Procedure Body - Statements *) (
            S_Sequence 9 (
              S_Assignment 10 ((*Quotient*) 3) (E_Literal 11 (Integer_Literal 0)) ) ( 
              S_Sequence 12 (
                S_Assignment 13 ((*Remainder*) 4) (E_Identifier 14 (*Dividend*) 1) ) ( 
                S_While_Loop 15 (E_Binary_Operation 16 Greater_Than_Or_Equal (E_Identifier 17 (*Remainder*) 4) (E_Identifier 18 (*Divisor*) 2)) (
                    S_Sequence 19 (
                      S_Loop_Invariant 20 (E_Binary_Operation 21 And (E_Binary_Operation 22 And (E_Binary_Operation 23 Greater_Than_Or_Equal (E_Identifier 24 (*Remainder*) 4) (E_Literal 25 (Integer_Literal 0))) (E_Binary_Operation 26 Greater_Than_Or_Equal (E_Identifier 27 (*Quotient*) 3) (E_Literal 28 (Integer_Literal 0)))) (E_Binary_Operation 29 Equal (E_Binary_Operation 30 Plus (E_Binary_Operation 31 Multiply (E_Identifier 32 (*Divisor*) 2) (E_Identifier 33 (*Quotient*) 3)) (E_Identifier 34 (*Remainder*) 4)) (E_Identifier 35 (*Dividend*) 1))) ) ( 
                      S_Sequence 36 (
                        S_Assignment 37 ((*Quotient*) 3) (E_Binary_Operation 38 Plus (E_Identifier 39 (*Quotient*) 3) (E_Literal 40 (Integer_Literal 1))) ) ( 
                        S_Sequence 41 (
                          S_Assignment 42 ((*Quotient*) 3) (E_Binary_Operation 43 Plus (E_Identifier 44 (*Quotient*) 3) (E_Literal 45 (Integer_Literal 1))) ) ( 
                          S_Assignment 46 ((*Remainder*) 4) (E_Binary_Operation 47 Minus (E_Identifier 48 (*Remainder*) 4) (E_Identifier 49 (*Divisor*) 2)) ) ) )
                  ) ) )
          )
      )
    )
  )
  (* Compilation Unit - Type Table *) (
    mktype_table (
      (* Expression Type Table: Expression AstNum --> TypeNum *)
      (11, 2) ::
      (14, 1) ::
      (16, 3) ::
      (17, 1) ::
      (18, 1) ::
      (21, 3) ::
      (22, 3) ::
      (23, 3) ::
      (24, 1) ::
      (25, 2) ::
      (26, 3) ::
      (27, 1) ::
      (28, 2) ::
      (29, 3) ::
      (30, 1) ::
      (31, 1) ::
      (32, 1) ::
      (33, 1) ::
      (34, 1) ::
      (35, 1) ::
      (38, 1) ::
      (39, 1) ::
      (40, 2) ::
      (43, 1) ::
      (44, 1) ::
      (45, 2) ::
      (47, 1) ::
      (48, 1) ::
      (49, 1) :: nil
    ) (
      (* Type Name Table: TypeNum --> (Type URI * Option(Type Declaration AST Num)) *)
      (1, ("ada://ordinary_type/Standard-1:1/Integer-1:1"%string, None)) ::
      (2, ("universal_integer"%string, None)) ::
      (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1"%string, None)) :: nil
    )
  )