package Sort;


procedure Integer Num_Repetition (
        Array_Type A,
        Contents_Type E,
        Index_Type L,
        Index_Type U) {
  local
    Integer Result;
    Index_Type I;
    Index_Type _tcomp0;
    Index_Type _tcomp1;


  #l0.
    Result := 0ii;

  #l2.
    _tcomp0 := L;

  #l3.
    _tcomp1 := U;

  #l4.
    if _tcomp0 > _tcomp1 then goto l1;

  #l5.
    I := _tcomp0;

  #l6.
    // empty loc

  #l8.
    if !(A[I] == E) then goto l7;

  #l9.
    Result := Result + 1ii;

  #l7.
    // empty loc

  #l10.
    if I == _tcomp1 then goto l1;

  #l11.
    I := I + 1ii;

  #l12.
    goto l6;

  #l1.
    // empty loc

  #l13.
    return Result;
}

procedure Boolean Perm (
        Array_Type A,
        Array_Type B,
        Index_Type L,
        Index_Type U) {
  local
    Boolean Result;
    Index_Type I;
    Index_Type _tcomp2;
    Index_Type _tcomp3;
    Integer _tcomp4;
    Integer _tcomp5;


  #l14.
    Result := true;

  #l16.
    _tcomp2 := L;

  #l17.
    _tcomp3 := U;

  #l18.
    if _tcomp2 > _tcomp3 then goto l15;

  #l19.
    I := _tcomp2;

  #l20.
    // empty loc

  #l22.
    call _tcomp4 := Num_Repetition (A, A[I], L, U);

  #l23.
    call _tcomp5 := Num_Repetition (B, A[I], L, U);

  #l24.
    if !(_tcomp4 != _tcomp5) then goto l21;

  #l25.
    Result := false;

  #l21.
    // empty loc

  #l26.
    if I == _tcomp3 then goto l15;

  #l27.
    I := I + 1ii;

  #l28.
    goto l20;

  #l15.
    // empty loc

  #l29.
    return Result;
}

procedure Boolean Ordered (
        Array_Type A,
        Index_Type L,
        Index_Type U) {
  local
    Boolean Result;
    Index_Type I;
    Index_Type _tcomp6;
    Index_Type _tcomp7;


  #l30.
    Result := true;

  #l32.
    _tcomp6 := L;

  #l33.
    _tcomp7 := U - 1ii;

  #l34.
    if _tcomp6 > _tcomp7 then goto l31;

  #l35.
    I := _tcomp6;

  #l36.
    // empty loc

  #l38.
    if !(A[I] > A[I + 1ii]) then goto l37;

  #l39.
    Result := false;

  #l37.
    // empty loc

  #l40.
    if I == _tcomp7 then goto l31;

  #l41.
    I := I + 1ii;

  #l42.
    goto l36;

  #l31.
    // empty loc

  #l43.
    return Result;
}

procedure Boolean Partitioned (
        Array_Type A,
        Index_Type L,
        Index_Type M,
        Index_Type U) {
  local
    Boolean Result;
    Index_Type I;
    Index_Type _tcomp8;
    Index_Type _tcomp9;
    Index_Type J;
    Index_Type _tcomp10;
    Index_Type _tcomp11;


  #l44.
    Result := true;

  #l46.
    _tcomp8 := L;

  #l47.
    _tcomp9 := M;

  #l48.
    if _tcomp8 > _tcomp9 then goto l45;

  #l49.
    I := _tcomp8;

  #l50.
    // empty loc

  #l52.
    _tcomp10 := M + 1ii;

  #l53.
    _tcomp11 := U;

  #l54.
    if _tcomp10 > _tcomp11 then goto l51;

  #l55.
    J := _tcomp10;

  #l56.
    // empty loc

  #l58.
    if !(A[I] > A[J]) then goto l57;

  #l59.
    Result := false;

  #l57.
    // empty loc

  #l60.
    if J == _tcomp11 then goto l51;

  #l61.
    J := J + 1ii;

  #l62.
    goto l56;

  #l51.
    // empty loc

  #l63.
    if I == _tcomp9 then goto l45;

  #l64.
    I := I + 1ii;

  #l65.
    goto l50;

  #l45.
    // empty loc

  #l66.
    return Result;
}

procedure Swap_Elements (
        Array_Type T,
        Index_Type I,
        Index_Type J) {
  local
    Contents_Type Temp;


  #l67.
    Temp := T[I];

  #l68.
    T[I] := T[J];

  #l69.
    T[J] := Temp;

  #l70.
    return (T);
}

procedure BubbleSort (
        Array_Type Table) {
  local
    Index_Type I;
    Index_Type _tcomp12;
    Index_Type _tcomp13;
    Index_Type J;
    Index_Type _tcomp14;
    Index_Type _tcomp15;
    Array_Type _tbpr1;


  #l72.
    _tcomp12 := attribute__uif__first (Array_Type);

  #l73.
    _tcomp13 := attribute__uif__last (Array_Type);

  #l74.
    if _tcomp12 > _tcomp13 then goto l71;

  #l75.
    I := _tcomp13;

  #l76.
    // empty loc

  #l78.
    _tcomp14 := attribute__uif__first `Array_Type + 1ii;

  #l79.
    _tcomp15 := I;

  #l80.
    if _tcomp14 > _tcomp15 then goto l77;

  #l81.
    J := _tcomp14;

  #l82.
    // empty loc

  #l84.
    if !(Table[J - 1ii] > Table[J]) then goto l83;

  #l85.
    call _tbpr1 := Swap_Elements (Table, J - 1ii, J);

  #_lbpr2.
    Table := _tbpr1;

  #l83.
    // empty loc

  #l86.
    assert (proof__uif__assert proof__uif__for_all {Index_Type K => 
        switch K
          case (attribute__uif__first `Array_Type, J - 1ii) => Table[K] <= Table[J]
          default => true} &&& Perm (Table, attribute__uif__loop_entry (LOOP_LABEL_6, Table), attribute__uif__first `Index_Type, attribute__uif__last `Index_Type), "Assertion failed at [79, 9]");

  #l87.
    if J == _tcomp15 then goto l77;

  #l88.
    J := J + 1ii;

  #l89.
    goto l82;

  #l77.
    // empty loc

  #l90.
    assert (proof__uif__assert Ordered (Table, I, attribute__uif__last `Index_Type) &&& Partitioned (Table, attribute__uif__first `Index_Type, I, attribute__uif__last `Index_Type) &&& Perm (Table, attribute__uif__loop_entry (LOOP_LABEL_5, Table), attribute__uif__first `Index_Type, attribute__uif__last `Index_Type), "Assertion failed at [88, 8]");

  #l91.
    if I == _tcomp12 then goto l71;

  #l92.
    I := I - 1ii;

  #l93.
    goto l76;

  #l71.
    // empty loc

  #l94.
    return (Table);
}

procedure BubbleSortFast (
        Array_Type Table) {
  local
    Base_Index_Type Bound;
    Base_Index_Type T;
    Index_Type J;
    Array_Type _tbpr1;


  #l95.
    Bound := attribute__uif__last `Index_Type;

  #l96.
    // empty loc

  #l98.
    if Bound == 0ii then goto l97;

  #l99.
    J := attribute__uif__first `Index_Type;

  #l100.
    T := 0ii;

  #l102.
    // empty loc

  #l103.
    if !(J <= Bound - 1ii) then goto l101;

  #l105.
    if !(Table[J] > Table[J + 1ii]) then goto l104;

  #l106.
    call _tbpr1 := Swap_Elements (Table, J, J + 1ii);

  #_lbpr2.
    Table := _tbpr1;

  #l107.
    T := J;

  #l104.
    // empty loc

  #l108.
    J := J + 1ii;

  #l109.
    assert (proof__uif__assert proof__uif__for_all {Index_Type K => 
        switch K
          case (attribute__uif__first `Index_Type, J - 1ii) => Table[K] <= Table[J]
          default => true} &&& Partitioned (Table, attribute__uif__first `Index_Type, T, J) &&& Perm (Table, attribute__uif__loop_entry (LOOP_LABEL_8, Table), attribute__uif__first `Index_Type, attribute__uif__last `Index_Type), "Assertion failed at [114, 9]");

  #l110.
    goto l102;

  #l101.
    // empty loc

  #l111.
    assert (proof__uif__assert Ordered (Table, Bound, attribute__uif__last `Index_Type) &&& Partitioned (Table, attribute__uif__first `Index_Type, Bound, attribute__uif__last `Index_Type) &&& Perm (Table, attribute__uif__loop_entry (LOOP_LABEL_7, Table), attribute__uif__first `Index_Type, attribute__uif__last `Index_Type), "Assertion failed at [125, 9]");

  #l112.
    Bound := T;

  #l113.
    goto l96;

  #l97.
    // empty loc

  #l114.
    return (Table);
}

procedure InsertionSort (
        Array_Type Table) {
  local
    Index_Type J;
    Contents_Type Temp;
    Index_Type P;
    Index_Type _tcomp16;
    Index_Type _tcomp17;


  #l116.
    _tcomp16 := attribute__uif__first `Index_Type + 1ii;

  #l117.
    _tcomp17 := attribute__uif__last `Index_Type;

  #l118.
    if _tcomp16 > _tcomp17 then goto l115;

  #l119.
    P := _tcomp16;

  #l120.
    // empty loc

  #l121.
    Temp := Table[P];

  #l122.
    J := P;

  #l124.
    // empty loc

  #l125.
    if !(J >= attribute__uif__first `Index_Type + 1ii && Table[J - 1ii] > Temp) then goto l123;

  #l126.
    Table[J] := Table[J - 1ii];

  #l127.
    J := J - 1ii;

  #l128.
    assert (proof__uif__assert Temp == attribute__uif__loop_entry (LOOP_LABEL_10, Table)[P] &&& attribute__uif__first `Index_Type <= J &&& J < P &&& proof__uif__for_all {Index_Type K => 
        switch K
          case (J + 1ii, P) => Table[K] > Temp
          default => true} &&& Ordered (Table, attribute__uif__first `Index_Type, P) &&& Perm (attribute__uif__update_exp (Table, ^{J -> Temp}), attribute__uif__loop_entry (LOOP_LABEL_10, Table), attribute__uif__first `Index_Type, P), "Assertion failed at [149, 9]");

  #l129.
    goto l124;

  #l123.
    // empty loc

  #l130.
    Table[J] := Temp;

  #l131.
    assert (proof__uif__assert attribute__uif__first `Index_Type + 1ii <= P &&& P <= attribute__uif__last `Index_Type &&& Ordered (Table, attribute__uif__first `Index_Type, P) &&& Perm (Table, attribute__uif__loop_entry (LOOP_LABEL_9, Table), attribute__uif__first `Index_Type, P) &&& proof__uif__for_all {Index_Type K => 
        switch K
          case (P + 1ii, attribute__uif__last `Index_Type) => Table[K] == attribute__uif__loop_entry (LOOP_LABEL_9, Table)[K]
          default => true}, "Assertion failed at [164, 9]");

  #l132.
    if P == _tcomp17 then goto l115;

  #l133.
    P := P + 1ii;

  #l134.
    goto l120;

  #l115.
    // empty loc

  #l135.
    return (Table);
}

procedure ShellSort (
        Array_Type Table) {
  local
    Index_Type Gap;
    Integer J;
    Index_Type I;
    Index_Type _tcomp18;
    Index_Type _tcomp19;
    Array_Type _tbpr1;


  #l136.
    Gap := attribute__uif__last `Index_Type;

  #l137.
    // empty loc

  #l139.
    Gap := Gap / 2ii;

  #l141.
    _tcomp18 := Gap;

  #l142.
    _tcomp19 := attribute__uif__last `Index_Type;

  #l143.
    if _tcomp18 > _tcomp19 then goto l140;

  #l144.
    I := _tcomp18;

  #l145.
    // empty loc

  #l146.
    J := I - Gap;

  #l148.
    // empty loc

  #l149.
    if !(J >= attribute__uif__first `Index_Type && Table[J] > Table[J + Gap]) then goto l147;

  #l150.
    call _tbpr1 := Swap_Elements (Table, J, J + Gap);

  #_lbpr2.
    Table := _tbpr1;

  #l151.
    J := J - Gap;

  #l152.
    goto l148;

  #l147.
    // empty loc

  #l153.
    if I == _tcomp19 then goto l140;

  #l154.
    I := I + 1ii;

  #l155.
    goto l145;

  #l140.
    // empty loc

  #l156.
    if Gap == attribute__uif__first `Index_Type then goto l138;

  #l157.
    goto l137;

  #l138.
    // empty loc

  #l158.
    return (Table);
}package Sort;


typealias Integer Base_Index_Type;

typealias Base_Index_Type Index_Type;

typealias _SIGNED_INTEGER_TYPE_ Contents_Type;

typealias _ARRAY_ Array_Type;

const $CONST {
  Max_Elements = (Integer) 3ii;
}

procedure Boolean Ordered (
        Array_Type A,
        Index_Type L,
        Index_Type U) {

}

procedure Boolean Perm (
        Array_Type A,
        Array_Type B,
        Index_Type L,
        Index_Type U) {

}

procedure BubbleSort (
        Array_Type Table) {

}

procedure BubbleSortFast (
        Array_Type Table) {

}

procedure InsertionSort (
        Array_Type Table) {

}

procedure ShellSort (
        Array_Type Table) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;