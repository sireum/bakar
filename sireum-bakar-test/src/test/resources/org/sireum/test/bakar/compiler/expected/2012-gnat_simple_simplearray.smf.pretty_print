simplearray.ads
package SimpleArray;


procedure Boolean Dummy {

}

fake/standard.ads
package Standard;


typealias Boolean standard::boolean;

typealias Integer standard::integer;

typealias Integer standard::natural;

typealias Integer standard::positive;

typealias Float standard::float;

typealias Integer universal_integer;

typealias Float universal_real;

simplearray.adb
package SimpleArray;


typealias Integer Index;

typealias _ARRAY_ Vector;

procedure Boolean Dummy {

  #l1.
    return true;
}

procedure Integer Max (
        Vector V) {
  local
    Integer M;
    Index I;
    Index _tcomp0;
    Index _tcomp1;


  #l2.
    M := V[0ii];

  #l4.
    _tcomp0 := attribute__uif__first ^Index;

  #l5.
    _tcomp1 := attribute__uif__last ^Index;

  #l6.
    if _tcomp0 > _tcomp1 then goto l3;

  #l7.
    I := _tcomp0;

  #l8.
    // empty loc

  #l10.
    if !(V[I] > M) then goto l9;

  #l11.
    M := V[I];

  #l9.
    // empty loc

  #l12.
    if I == _tcomp1 then goto l3;

  #l13.
    I := I + 1ii;

  #l14.
    goto l8;

  #l3.
    // empty loc

  #l15.
    return M;
}

