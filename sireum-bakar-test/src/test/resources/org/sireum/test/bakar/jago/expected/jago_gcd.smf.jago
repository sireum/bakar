(* Compilation Unit *)
Library_Unit_XX 1
  (* Compilation Unit - Unit Declaration *)
  (Library_Subprogram_XX 2
    (* Procedure Body Declaration *)
    (Global_Procedure_XX 3
      (mkprocedure_declaration_xx 4
        (* Procedure Name *)
        ((*Gcd*) 1)
        (* Formal Parameters *)
        (
        (mkparameter_specification_xx 5 ((*M*) 1) Integer In) :: 
        (mkparameter_specification_xx 6 ((*N*) 2) Integer In) :: 
        (mkparameter_specification_xx 7 ((*Y*) 3) Integer Out) :: nil) 
        (* Procedure Contract *)
        (nil)  
        (* Object Declarations *)
        ((D_Seq_Declaration_XX 8 
      (D_Object_Declaration_XX 9 (mkobject_declaration_xx 10 ((*C*) 4) Integer None)) 
      (D_Seq_Declaration_XX 11 
      (D_Object_Declaration_XX 12 (mkobject_declaration_xx 13 ((*D*) 5) Integer None)) 
      (D_Seq_Declaration_XX 14 
      (D_Object_Declaration_XX 15 (mkobject_declaration_xx 16 ((*T*) 6) Integer None)) 
      (D_Object_Declaration_XX 17 (mkobject_declaration_xx 18 ((*R*) 7) Integer None))))))
        (* Procedure Body *)
          (S_Sequence_XX 19
          (S_Assignment_XX 20 (E_Identifier_XX 21 ((*C*) 4) (**(nil)**)) (E_Name_XX 22 (E_Identifier_XX 23 ((*M*) 1) (**(nil)**)) (**(nil)**))) 
          (S_Sequence_XX 24
          (S_Assignment_XX 25 (E_Identifier_XX 26 ((*D*) 5) (**(nil)**)) (E_Name_XX 27 (E_Identifier_XX 28 ((*N*) 2) (**(nil)**)) (**(nil)**))) 
          (S_Sequence_XX 29
          (S_While_Loop_XX 30 (E_Binary_Operation_XX 31 Not_Equal (E_Name_XX 32 (E_Identifier_XX 33 ((*D*) 5) (**(nil)**)) (**(nil)**)) (E_Literal_XX 34 (Integer_Literal 0) (**(nil)**)) (**(nil)**))
            (S_Sequence_XX 35
            (S_Assignment_XX 36 (E_Identifier_XX 37 ((*T*) 6) (**(nil)**)) (E_Binary_Operation_XX 38 Divide (E_Name_XX 39 (E_Identifier_XX 40 ((*C*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 41 (E_Identifier_XX 42 ((*D*) 5) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
            (S_Sequence_XX 43
            (S_Assignment_XX 44 (E_Identifier_XX 45 ((*R*) 7) (**(nil)**)) (E_Binary_Operation_XX 46 Minus (E_Name_XX 47 (E_Identifier_XX 48 ((*C*) 4) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 49 Multiply (E_Name_XX 50 (E_Identifier_XX 51 ((*T*) 6) (**(nil)**)) (**(nil)**)) (E_Name_XX 52 (E_Identifier_XX 53 ((*D*) 5) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(Do_Overflow_Check :: nil)**))) 
            (S_Sequence_XX 54
            (S_Assignment_XX 55 (E_Identifier_XX 56 ((*C*) 4) (**(nil)**)) (E_Name_XX 57 (E_Identifier_XX 58 ((*D*) 5) (**(nil)**)) (**(nil)**))) 
            (S_Assignment_XX 59 (E_Identifier_XX 60 ((*D*) 5) (**(nil)**)) (E_Name_XX 61 (E_Identifier_XX 62 ((*R*) 7) (**(nil)**)) (**(nil)**))))))
          ) 
          (S_Assignment_XX 63 (E_Identifier_XX 64 ((*Y*) 3) (**(nil)**)) (E_Name_XX 65 (E_Identifier_XX 66 ((*C*) 4) (**(nil)**)) (**(nil)**))))))
      )
    )
  )