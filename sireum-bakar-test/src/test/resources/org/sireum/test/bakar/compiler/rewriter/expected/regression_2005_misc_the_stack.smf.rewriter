package The_Stack;


typealias _SIGNED_INTEGER_TYPE_ Pointer_Range;

typealias Pointer_Range Index_Range;

typealias _ARRAY_ Vector;

const $CONST {
  Stack_Size = (Integer) 100ii;
}

global Vector @@S;

global Pointer_Range @@Pointer;

global AuditInfoType @@AuditInfo;

procedure $$binit {

  #l1.
    @@Pointer := 0ii;

  #l2.
    @@S := `Vector { iter => 
        switch iter
          case (attribute__uif__first `Index_Range, attribute__uif__last `Index_Range) => 0ii
    };

  #l3.
    @@AuditInfo := `AuditInfoType {
      __positional0 = 0ii,
      __positional1 = 0ii
    };

  #l43.
    return;
}

procedure Push (
        Integer X) {
  local
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;


  #rwl0.
    _t0 := @@Pointer;

  #rwl1.
    _t1 := 1ii;

  #l4.
    @@Pointer := _t0 + _t1;

  #l5.
    @@S[@@Pointer] := X;

  #rwl2.
    _t2 := @@AuditInfo.PushOps;

  #rwl3.
    _t3 := 1ii;

  #l6.
    @@AuditInfo.PushOps := _t2 + _t3;

  #l7.
    return;
}

procedure Pop (
        Integer X) {
  local
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;


  #l8.
    X := @@S[@@Pointer];

  #rwl4.
    _t4 := @@Pointer;

  #rwl5.
    _t5 := 1ii;

  #l9.
    @@Pointer := _t4 - _t5;

  #rwl6.
    _t6 := @@AuditInfo.PopOps;

  #rwl7.
    _t7 := 1ii;

  #l10.
    @@AuditInfo.PopOps := _t6 + _t7;

  #l11.
    return;
}

procedure Boolean Value_Present (
        Integer X) {
  local
    Boolean Result;
    Index_Range I;
    Index_Range _tcomp0;
    Index_Range _tcomp1;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;


  #l12.
    Result := false;

  #l14.
    _tcomp0 := attribute__uif__first `Index_Range;

  #l15.
    _tcomp1 := attribute__uif__last `Index_Range;

  #rwl8.
    _t8 := _tcomp0;

  #rwl9.
    _t9 := _tcomp1;

  #l16.
    if _t8 > _t9 then goto l13;

  #l17.
    I := _tcomp0;

  #l18.
    // empty loc

  #rwl10.
    _t10 := @@S[I];

  #rwl11.
    _t11 := X;

  #l20.
    if !(_t10 == _t11) then goto l19;

  #l21.
    Result := true;

  #l22.
    goto l13;

  #l19.
    // empty loc

  #rwl12.
    _t12 := I;

  #rwl13.
    _t13 := _tcomp1;

  #l23.
    if _t12 == _t13 then goto l13;

  #rwl14.
    _t14 := I;

  #rwl15.
    _t15 := 1ii;

  #l24.
    I := _t14 + _t15;

  #l25.
    goto l18;

  #l13.
    // empty loc

  #l26.
    return Result;
}

procedure Index_Range Find_Stack_Pos (
        Integer X) {
  local
    Index_Range Result_Pos;
    Index_Range I;
    Index_Range _tcomp2;
    Index_Range _tcomp3;
    FIXME _t16;
    FIXME _t17;
    FIXME _t18;
    FIXME _t19;
    FIXME _t20;
    FIXME _t21;
    FIXME _t22;
    FIXME _t23;


  #l27.
    Result_Pos := attribute__uif__first `Index_Range;

  #l29.
    _tcomp2 := attribute__uif__first `Index_Range;

  #l30.
    _tcomp3 := attribute__uif__last `Index_Range;

  #rwl16.
    _t16 := _tcomp2;

  #rwl17.
    _t17 := _tcomp3;

  #l31.
    if _t16 > _t17 then goto l28;

  #l32.
    I := _tcomp2;

  #l33.
    // empty loc

  #rwl18.
    _t18 := @@S[I];

  #rwl19.
    _t19 := X;

  #l35.
    if !(_t18 == _t19) then goto l34;

  #l36.
    Result_Pos := I;

  #l37.
    goto l28;

  #l34.
    // empty loc

  #rwl20.
    _t20 := I;

  #rwl21.
    _t21 := _tcomp3;

  #l38.
    if _t20 == _t21 then goto l28;

  #rwl22.
    _t22 := I;

  #rwl23.
    _t23 := 1ii;

  #l39.
    I := _t22 + _t23;

  #l40.
    goto l33;

  #l28.
    // empty loc

  #l41.
    return Result_Pos;
}

procedure Boolean aPrivateFunction {

  #l42.
    return true;
}package The_Stack;


typealias _SIGNED_INTEGER_TYPE_ StackID;

typealias _PRIVATE_TYPE_DECLARATION_ StackID;

enum Status {
  Empty, Full, Normal
}

typealias Status BoundaryStatus;

typealias Integer AuditCountType;

record AuditInfoType {

  AuditCountType PushOps;

  AuditCountType PopOps;
}

const $CONST {
  InitID = (StackID) __DEFERRED_CONSTANT__;

  AuditCount_LowerLimit = (Integer) 0ii;

  AuditCount_UpperLimit = (Integer) 200ii;

  InitID = (StackID) 1ii;
}

procedure Push (
        Integer X) {

}

procedure Pop (
        Integer X) {

}

procedure Boolean aPrivateFunction {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;