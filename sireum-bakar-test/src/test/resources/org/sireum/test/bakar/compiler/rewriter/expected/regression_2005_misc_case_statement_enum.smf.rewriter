package Case_Statement_Enum;


procedure Activity isWorkDay (
        Week d) {
  local
    Activity ret;
    Week _t0;
    Week _t1;
    Week _t2;
    Week _t3;
    Boolean _t4;
    Boolean _t5;
    HumpDay _t6;
    Week _t7;
    Week _t8;
    HumpDay _t9;
    Boolean _t10;
    Boolean _t11;
    Week _t12;
    Week _t13;
    Week _t14;
    Week _t15;
    Week _t16;
    Week _t17;
    Boolean _t18;
    Boolean _t19;
    WeekEnd _t20;
    Week _t21;
    Week _t22;
    WeekEnd _t23;
    Boolean _t24;
    Boolean _t25;


  #rwl0.
    _t0 := Mon;

  #rwl1.
    _t1 := d;

  #rwl2.
    _t2 := d;

  #rwl3.
    _t3 := Tue;

  #rwl4.
    _t4 := _t0 <= _t1;

  #rwl5.
    _t5 := _t2 <= _t3;

  #l2.
    if !(_t4 &&& _t5) then goto l1;

  #l3.
    ret := Work;

  #l4.
    goto l0;

  #l1.
    // empty loc

  #rwl6.
    _t6 := attribute__uif__first `HumpDay;

  #rwl7.
    _t7 := d;

  #rwl8.
    _t8 := d;

  #rwl9.
    _t9 := attribute__uif__last `HumpDay;

  #rwl10.
    _t10 := _t6 <= _t7;

  #rwl11.
    _t11 := _t8 <= _t9;

  #l6.
    if !(_t10 &&& _t11) then goto l5;

  #l7.
    ret := Sleep;

  #l8.
    goto l0;

  #l5.
    // empty loc

  #rwl12.
    _t12 := d;

  #rwl13.
    _t13 := Thur;

  #l10.
    if !(_t12 == _t13) then goto l9;

  #l11.
    ret := Sleep;

  #l12.
    goto l0;

  #l9.
    // empty loc

  #rwl14.
    _t14 := d;

  #rwl15.
    _t15 := Fri;

  #rwl16.
    _t16 := d;

  #rwl17.
    _t17 := FriPart2;

  #rwl18.
    _t18 := _t14 == _t15;

  #rwl19.
    _t19 := _t16 == _t17;

  #l14.
    if !(_t18 ||| _t19) then goto l13;

  #l15.
    ret := Party;

  #l16.
    goto l0;

  #l13.
    // empty loc

  #rwl20.
    _t20 := attribute__uif__first `WeekEnd;

  #rwl21.
    _t21 := d;

  #rwl22.
    _t22 := d;

  #rwl23.
    _t23 := attribute__uif__last `WeekEnd;

  #rwl24.
    _t24 := _t20 <= _t21;

  #rwl25.
    _t25 := _t22 <= _t23;

  #l18.
    if !(_t24 &&& _t25) then goto l0;

  #l19.
    ret := Drink;

  #l0.
    // empty loc

  #l20.
    return ret;
}package Case_Statement_Enum;


enum Week {
  Mon, Tue, Wed, Thur, Fri, FriPart2, Sat, Sun
}

typealias Week WeekDay;

typealias WeekDay HumpDay;

typealias Week WeekEnd;

enum Activity {
  Work, Sleep, Party, Drink
}

procedure Activity isWorkDay (
        Week d) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;