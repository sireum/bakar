package Case_Statement_Enum;


procedure Activity isWorkDay (
        Week d) {
  local
    Activity ret;
    Boolean _bert0;
    Boolean _bert1;
    Boolean _bert2;
    Boolean _bert3;


  #berl1.
    _bert0 := Mon <= d;

  #berl2.
    if !(_bert0) then goto berl0;

  #berl3.
    _bert0 := d <= Tue;

  #berl0.
    // empty loc

  #l2.
    if !(_bert0) then goto l1;

  #l3.
    ret := Work;

  #l4.
    goto l0;

  #l1.
    // empty loc

  #berl5.
    _bert1 := attribute__uif__first `HumpDay <= d;

  #berl6.
    if !(_bert1) then goto berl4;

  #berl7.
    _bert1 := d <= attribute__uif__last `HumpDay;

  #berl4.
    // empty loc

  #l6.
    if !(_bert1) then goto l5;

  #l7.
    ret := Sleep;

  #l8.
    goto l0;

  #l5.
    // empty loc

  #l10.
    if !(d == Thur) then goto l9;

  #l11.
    ret := Sleep;

  #l12.
    goto l0;

  #l9.
    // empty loc

  #berl9.
    _bert2 := d == Fri;

  #berl10.
    if _bert2 then goto berl8;

  #berl11.
    _bert2 := d == FriPart2;

  #berl8.
    // empty loc

  #l14.
    if !(_bert2) then goto l13;

  #l15.
    ret := Party;

  #l16.
    goto l0;

  #l13.
    // empty loc

  #berl13.
    _bert3 := attribute__uif__first `WeekEnd <= d;

  #berl14.
    if !(_bert3) then goto berl12;

  #berl15.
    _bert3 := d <= attribute__uif__last `WeekEnd;

  #berl12.
    // empty loc

  #l18.
    if !(_bert3) then goto l0;

  #l19.
    ret := Drink;

  #l0.
    // empty loc

  #l20.
    return ret;
}package Case_Statement_Enum;


enum Week {
  Mon, Tue, Wed, Thur, Fri, FriPart2, Sat, Sun
}

typealias Week WeekDay;

typealias WeekDay HumpDay;

typealias Week WeekEnd;

enum Activity {
  Work, Sleep, Party, Drink
}

procedure Activity isWorkDay (
        Week d) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;