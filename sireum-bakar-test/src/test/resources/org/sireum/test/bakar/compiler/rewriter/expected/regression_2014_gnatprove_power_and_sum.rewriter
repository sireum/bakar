package __anonymousPackage$0;


procedure Main {
  local
    Integer X;
    Integer N;
    Positive I;
    Integer Result;
    Integer Result2;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;


  #l1.
    X := 2ii;

  #l2.
    N := 15ii;

  #l3.
    I := 1ii;

  #l5.
    // empty loc

  #rwl0.
    _t0 := I;

  #rwl1.
    _t1 := N;

  #l6.
    if !(_t0 <= _t1) then goto l4;

  #l7.
    call Sum (I, Result);

  #l8.
    call Sum_Of_Sum (I, Result2);

  #rwl2.
    _t2 := "\"Sum(\"";

  #rwl3.
    _t3 := attribute__uif__iamge (`Integer, I);

  #rwl4.
    _t4 := _t2 STRING_CONCATENATE _t3;

  #rwl5.
    _t5 := "\" ) = \"";

  #rwl6.
    _t6 := _t4 STRING_CONCATENATE _t5;

  #rwl7.
    _t7 := attribute__uif__iamge (`Integer, Result);

  #l9.
    call Put_Line (_t6 STRING_CONCATENATE _t7);

  #rwl8.
    _t8 := "\"Sum_Of_Sum(\"";

  #rwl9.
    _t9 := attribute__uif__iamge (`Integer, I);

  #rwl10.
    _t10 := _t8 STRING_CONCATENATE _t9;

  #rwl11.
    _t11 := "\" ) = \"";

  #rwl12.
    _t12 := _t10 STRING_CONCATENATE _t11;

  #rwl13.
    _t13 := attribute__uif__iamge (`Integer, Result2);

  #l10.
    call Put_Line (_t12 STRING_CONCATENATE _t13);

  #rwl14.
    _t14 := I;

  #rwl15.
    _t15 := 1ii;

  #l11.
    I := _t14 + _t15;

  #l12.
    goto l5;

  #l4.
    // empty loc

  #l13.
    return;
}package Power_and_Sum;


procedure Power (
        Integer X,
        Positive N,
        Integer Result) {
  local
    Integer I;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;


  #l14.
    I := 1ii;

  #l15.
    Result := X;

  #l17.
    // empty loc

  #rwl0.
    _t0 := I;

  #rwl1.
    _t1 := N;

  #l18.
    if !(_t0 < _t1) then goto l16;

  #rwl2.
    _t2 := X;

  #rwl3.
    _t3 := I;

  #rwl4.
    _t4 := Result;

  #rwl5.
    _t5 := _t2 POWER _t3;

  #rwl6.
    _t6 := I;

  #rwl7.
    _t7 := 1ii;

  #rwl8.
    _t8 := _t4 == _t5;

  #rwl9.
    _t9 := _t6 >= _t7;

  #l19.
    assert proof__uif__loop_invariant _t8 &&& _t9;

  #rwl10.
    _t10 := Result;

  #rwl11.
    _t11 := X;

  #l20.
    Result := _t10 * _t11;

  #rwl12.
    _t12 := I;

  #rwl13.
    _t13 := 1ii;

  #l21.
    I := _t12 + _t13;

  #l22.
    goto l17;

  #l16.
    // empty loc

  #l23.
    return;
}

procedure Sum (
        Positive N,
        Positive Result) {
  local
    Positive I;
    Natural TotalSum;
    FIXME _t14;
    FIXME _t15;
    FIXME _t16;
    FIXME _t17;
    FIXME _t18;
    FIXME _t19;
    FIXME _t20;
    FIXME _t21;
    FIXME _t22;
    FIXME _t23;
    FIXME _t24;
    FIXME _t25;
    FIXME _t26;
    FIXME _t27;
    FIXME _t28;
    FIXME _t29;
    FIXME _t30;
    FIXME _t31;
    FIXME _t32;
    FIXME _t33;
    FIXME _t34;
    FIXME _t35;


  #l24.
    I := 1ii;

  #l25.
    TotalSum := 0ii;

  #l27.
    // empty loc

  #rwl14.
    _t14 := I;

  #rwl15.
    _t15 := N;

  #l28.
    if !(_t14 <= _t15) then goto l26;

  #rwl16.
    _t16 := 2ii;

  #rwl17.
    _t17 := TotalSum;

  #rwl18.
    _t18 := I;

  #rwl19.
    _t19 := 1ii;

  #rwl20.
    _t20 := I;

  #rwl21.
    _t21 := _t18 - _t19;

  #rwl22.
    _t22 := _t16 * _t17;

  #rwl23.
    _t23 := _t20 * _t21;

  #l29.
    assert proof__uif__loop_invariant _t22 == _t23;

  #rwl24.
    _t24 := TotalSum;

  #rwl25.
    _t25 := I;

  #l30.
    TotalSum := _t24 + _t25;

  #rwl26.
    _t26 := I;

  #rwl27.
    _t27 := 1ii;

  #l31.
    I := _t26 + _t27;

  #l32.
    goto l27;

  #l26.
    // empty loc

  #rwl28.
    _t28 := 2ii;

  #rwl29.
    _t29 := TotalSum;

  #rwl30.
    _t30 := N;

  #rwl31.
    _t31 := 1ii;

  #rwl32.
    _t32 := N;

  #rwl33.
    _t33 := _t30 + _t31;

  #rwl34.
    _t34 := _t28 * _t29;

  #rwl35.
    _t35 := _t32 * _t33;

  #l33.
    assert _t34 == _t35;

  #l34.
    Result := TotalSum;

  #l35.
    return;
}

procedure Sum_Of_Sum (
        Positive N,
        Positive Result) {
  local
    Positive I;
    Positive J;
    Natural TotalSum;
    Natural InnerSum;
    FIXME _t36;
    FIXME _t37;
    FIXME _t38;
    FIXME _t39;
    FIXME _t40;
    FIXME _t41;
    FIXME _t42;
    FIXME _t43;
    FIXME _t44;
    FIXME _t45;
    FIXME _t46;
    FIXME _t47;
    FIXME _t48;
    FIXME _t49;
    FIXME _t50;
    FIXME _t51;
    FIXME _t52;
    FIXME _t53;
    FIXME _t54;
    FIXME _t55;
    FIXME _t56;
    FIXME _t57;
    FIXME _t58;
    FIXME _t59;
    FIXME _t60;
    FIXME _t61;
    FIXME _t62;
    FIXME _t63;
    FIXME _t64;
    FIXME _t65;
    FIXME _t66;
    FIXME _t67;
    FIXME _t68;
    FIXME _t69;
    FIXME _t70;
    FIXME _t71;
    FIXME _t72;
    FIXME _t73;
    FIXME _t74;
    FIXME _t75;
    FIXME _t76;
    FIXME _t77;
    FIXME _t78;
    FIXME _t79;
    FIXME _t80;
    FIXME _t81;
    FIXME _t82;
    FIXME _t83;
    FIXME _t84;
    FIXME _t85;
    FIXME _t86;
    FIXME _t87;
    FIXME _t88;
    FIXME _t89;
    FIXME _t90;
    FIXME _t91;


  #l36.
    I := 1ii;

  #l37.
    J := 1ii;

  #l38.
    TotalSum := 0ii;

  #l39.
    InnerSum := 0ii;

  #l41.
    // empty loc

  #rwl36.
    _t36 := I;

  #rwl37.
    _t37 := N;

  #l42.
    if !(_t36 <= _t37) then goto l40;

  #rwl38.
    _t38 := 6ii;

  #rwl39.
    _t39 := TotalSum;

  #rwl40.
    _t40 := I;

  #rwl41.
    _t41 := 1ii;

  #rwl42.
    _t42 := _t40 - _t41;

  #rwl43.
    _t43 := I;

  #rwl44.
    _t44 := I;

  #rwl45.
    _t45 := 1ii;

  #rwl46.
    _t46 := _t42 * _t43;

  #rwl47.
    _t47 := _t44 + _t45;

  #rwl48.
    _t48 := _t38 * _t39;

  #rwl49.
    _t49 := _t46 * _t47;

  #l43.
    assert proof__uif__loop_invariant _t48 == _t49;

  #l44.
    InnerSum := 0ii;

  #l45.
    J := 1ii;

  #l47.
    // empty loc

  #rwl50.
    _t50 := J;

  #rwl51.
    _t51 := I;

  #l48.
    if !(_t50 <= _t51) then goto l46;

  #rwl52.
    _t52 := 2ii;

  #rwl53.
    _t53 := InnerSum;

  #rwl54.
    _t54 := J;

  #rwl55.
    _t55 := 1ii;

  #rwl56.
    _t56 := J;

  #rwl57.
    _t57 := _t54 - _t55;

  #rwl58.
    _t58 := _t52 * _t53;

  #rwl59.
    _t59 := _t56 * _t57;

  #l49.
    assert proof__uif__loop_invariant _t58 == _t59;

  #rwl60.
    _t60 := InnerSum;

  #rwl61.
    _t61 := J;

  #l50.
    InnerSum := _t60 + _t61;

  #rwl62.
    _t62 := J;

  #rwl63.
    _t63 := 1ii;

  #l51.
    J := _t62 + _t63;

  #l52.
    goto l47;

  #l46.
    // empty loc

  #rwl64.
    _t64 := I;

  #rwl65.
    _t65 := 1ii;

  #rwl66.
    _t66 := J;

  #rwl67.
    _t67 := _t64 + _t65;

  #l53.
    assert _t66 == _t67;

  #rwl68.
    _t68 := 2ii;

  #rwl69.
    _t69 := InnerSum;

  #rwl70.
    _t70 := I;

  #rwl71.
    _t71 := 1ii;

  #rwl72.
    _t72 := I;

  #rwl73.
    _t73 := _t70 + _t71;

  #rwl74.
    _t74 := _t68 * _t69;

  #rwl75.
    _t75 := _t72 * _t73;

  #l54.
    assert _t74 == _t75;

  #rwl76.
    _t76 := TotalSum;

  #rwl77.
    _t77 := InnerSum;

  #l55.
    TotalSum := _t76 + _t77;

  #rwl78.
    _t78 := I;

  #rwl79.
    _t79 := 1ii;

  #l56.
    I := _t78 + _t79;

  #l57.
    goto l41;

  #l40.
    // empty loc

  #rwl80.
    _t80 := 6ii;

  #rwl81.
    _t81 := TotalSum;

  #rwl82.
    _t82 := N;

  #rwl83.
    _t83 := 1ii;

  #rwl84.
    _t84 := N;

  #rwl85.
    _t85 := _t82 + _t83;

  #rwl86.
    _t86 := N;

  #rwl87.
    _t87 := 2ii;

  #rwl88.
    _t88 := _t84 * _t85;

  #rwl89.
    _t89 := _t86 + _t87;

  #rwl90.
    _t90 := _t80 * _t81;

  #rwl91.
    _t91 := _t88 * _t89;

  #l58.
    assert _t90 == _t91;

  #l59.
    Result := TotalSum;

  #l60.
    return;
}package Power_and_Sum;


procedure Power (
        Integer X,
        Positive N,
        Integer Result) {

}

procedure Sum (
        Positive N,
        Positive Result) {

}

procedure Sum_Of_Sum (
        Positive N,
        Positive Result) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;