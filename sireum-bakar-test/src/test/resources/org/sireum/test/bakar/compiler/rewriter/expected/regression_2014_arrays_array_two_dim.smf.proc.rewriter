package Array_Two_Dim;


procedure $$binit {

  #l2.
    @@Box := `Square {Integer iter => 
        switch iter
          case (1ii, constThree) => {Integer iter => 
              switch iter
                case (attribute__uif__first `Index, attribute__uif__last `Index) => 0ii
                default => 1ii}
          case (constThree + 1ii, 5ii) => {Integer iter => 
              switch iter
                case (1ii, 3ii) => 1ii
                default => 2ii}
          case (attribute__uif__first `subIndexRange, attribute__uif__last `subIndexRange) => {Integer iter => 
              switch iter
                default => 3ii}
          case 10ii - 2ii + 1ii => {Integer iter => 
              switch iter
                default => 5ii}
          default => {Integer iter => 
              switch iter
                default => 3ii}};

  #l7.
    return;
}

procedure dummy (
        Index X,
        Index Y) {

  #l3.
    @@Box[X, Y] := @@Box[X, Y] - 1ii;

  #l4.
    return;
}

procedure dummy2 (
        Board_Index M,
        Board_Index N) {

  #l5.
    @@aBoard[M][N] := @@aBoard[M][N] - 1ii;

  #l6.
    return;
}package Array_Two_Dim;


typealias Integer Index;

typealias Index subIndexRange;

typealias _UNCONSTRAINED_ARRAY_ Matrix;

typealias Matrix Square;

typealias _SIGNED_INTEGER_TYPE_ Board_Index;

typealias _ARRAY_ Row;

typealias _ARRAY_ Board;

const $CONST {
  constTwo = (Integer) 2ii;

  constThree = (Integer) constTwo + 1ii;

  highInt = (Integer) 10ii;
}

global Square @@Box;

global Square @@Box2;

global Board @@aBoard;

procedure $$sinit {

  #l0.
    @@Box2 := `Square {Integer iter => 
        switch iter
          default => {Integer iter => 
              switch iter
                default => 0ii}};

  #l1.
    @@aBoard := `Board {Board_Index iter => 
        switch iter
          default => `Row {Board_Index iter => 
              switch iter
                default => 1ii}};

  #l8.
    return;
}

procedure dummy (
        Index X,
        Index Y) {

}

procedure dummy2 (
        Board_Index M,
        Board_Index N) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;