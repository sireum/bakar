package SimpleArray;


typealias Integer Index;

typealias _ARRAY_ Vector;

global Vector @@A;

global Vector @@B;

procedure $$binit {
  local
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;


  #rwl0.
    _t0 := attribute__uif__first `Index;

  #rwl1.
    _t1 := 0ii;

  #rwl2.
    _t2 := attribute__uif__first `Index;

  #rwl3.
    _t3 := 1ii;

  #rwl4.
    _t4 := attribute__uif__first `Index;

  #rwl5.
    _t5 := 2ii;

  #rwl6.
    _t6 := attribute__uif__first `Index;

  #rwl7.
    _t7 := 3ii;

  #l1.
    @@A := `Vector { iter => 
        switch iter
          case _t0 + _t1 => 0ii
          case _t2 + _t3 => 1ii
          case _t4 + _t5 => 2ii
          case _t6 + _t7 => 3ii
          default => 9ii};

  #rwl8.
    _t8 := 1ii;

  #rwl9.
    _t9 := 1ii;

  #rwl10.
    _t10 := 8ii;

  #rwl11.
    _t11 := 2ii;

  #l2.
    @@B := `Vector { iter => 
        switch iter
          case 0ii => 0ii
          case 1ii => 1ii
          case _t8 + _t9 => 2ii
          case _t10 / _t11 => 3ii
          default => 9ii};

  #l18.
    return;
}

procedure Boolean Dummy {

  #l3.
    return true;
}

procedure Integer Max (
        Vector V) {
  local
    Integer M;
    Index I;
    Index _tcomp0;
    Index _tcomp1;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;
    FIXME _t16;
    FIXME _t17;
    FIXME _t18;
    FIXME _t19;


  #l4.
    M := V[0ii];

  #l6.
    _tcomp0 := attribute__uif__first `Index;

  #l7.
    _tcomp1 := attribute__uif__last `Index;

  #rwl12.
    _t12 := _tcomp0;

  #rwl13.
    _t13 := _tcomp1;

  #l8.
    if _t12 > _t13 then goto l5;

  #l9.
    I := _tcomp0;

  #l10.
    // empty loc

  #rwl14.
    _t14 := V[I];

  #rwl15.
    _t15 := M;

  #l12.
    if !(_t14 > _t15) then goto l11;

  #l13.
    M := V[I];

  #l11.
    // empty loc

  #rwl16.
    _t16 := I;

  #rwl17.
    _t17 := _tcomp1;

  #l14.
    if _t16 == _t17 then goto l5;

  #rwl18.
    _t18 := I;

  #rwl19.
    _t19 := 1ii;

  #l15.
    I := _t18 + _t19;

  #l16.
    goto l10;

  #l5.
    // empty loc

  #l17.
    return M;
}package SimpleArray;


procedure Boolean Dummy {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;