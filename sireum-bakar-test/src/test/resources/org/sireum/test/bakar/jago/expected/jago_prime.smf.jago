Definition Coq_AST_Tree_XX := 
(D_Procedure_Body_XX 1 
  (mkprocedure_body_xx 2
    (* = = = Procedure Name = = = *)
    ((*Prime*) 1)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_xx 3 ((*N*) 1) Integer In) :: 
    (mkparameter_specification_xx 4 ((*R*) 2) Integer Out) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 5
  (D_Object_Declaration_XX 6 (mkobject_declaration_xx 7 ((*Result*) 3) Integer None)) 
  (D_Seq_Declaration_XX 8
  (D_Object_Declaration_XX 9 (mkobject_declaration_xx 10 ((*I*) 4) Integer None)) 
  (D_Object_Declaration_XX 11 (mkobject_declaration_xx 12 ((*T*) 5) Integer None)))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 13
      (S_Assignment_XX 14 (E_Identifier_XX 15 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 16 (Integer_Literal 0) (**(nil)**))) 
      (S_Sequence_XX 17
      (S_If_XX 18 (E_Binary_Operation_XX 19 Or (E_Binary_Operation_XX 20 Equal (E_Name_XX 21 (E_Identifier_XX 22 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 23 (Integer_Literal 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 24 Equal (E_Name_XX 25 (E_Identifier_XX 26 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 27 (Integer_Literal 2) (**(nil)**)) (**(nil)**)) (**(nil)**))
        (S_Assignment_XX 28 (E_Identifier_XX 29 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 30 (Integer_Literal 1) (**(nil)**)))
        S_Null_XX
      ) 
      (S_Sequence_XX 31
      (S_Assignment_XX 32 (E_Identifier_XX 33 ((*I*) 4) (**(nil)**)) (E_Literal_XX 34 (Integer_Literal 2) (**(nil)**))) 
      (S_Sequence_XX 35
      (S_While_Loop_XX 36 (E_Binary_Operation_XX 37 And (E_Binary_Operation_XX 38 Less_Than (E_Name_XX 39 (E_Identifier_XX 40 ((*I*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 41 (E_Identifier_XX 42 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 43 Equal (E_Name_XX 44 (E_Identifier_XX 45 ((*Result*) 3) (**(nil)**)) (**(nil)**)) (E_Literal_XX 46 (Integer_Literal 0) (**(nil)**)) (**(nil)**)) (**(nil)**))
        (S_Sequence_XX 47
        (S_Assignment_XX 48 (E_Identifier_XX 49 ((*T*) 5) (**(nil)**)) (E_Binary_Operation_XX 50 Divide (E_Name_XX 51 (E_Identifier_XX 52 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 53 (E_Identifier_XX 54 ((*I*) 4) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
        (S_If_XX 55 (E_Binary_Operation_XX 56 Equal (E_Name_XX 57 (E_Identifier_XX 58 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 59 Multiply (E_Name_XX 60 (E_Identifier_XX 61 ((*T*) 5) (**(nil)**)) (**(nil)**)) (E_Name_XX 62 (E_Identifier_XX 63 ((*I*) 4) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
          (S_Assignment_XX 64 (E_Identifier_XX 65 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 66 (Integer_Literal 1) (**(nil)**)))
          S_Null_XX
        ))
      ) 
      (S_Assignment_XX 67 (E_Identifier_XX 68 ((*R*) 2) (**(nil)**)) (E_Name_XX 69 (E_Identifier_XX 70 ((*Result*) 3) (**(nil)**)) (**(nil)**)))))))
  )
).

Definition Symbol_Table_XX := 
(mkSymbolTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Prime*) 1), (0, (mkprocedure_body_xx 2
  (* = = = Procedure Name = = = *)
  ((*Prime*) 1)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_xx 3 ((*N*) 1) Integer In) :: 
  (mkparameter_specification_xx 4 ((*R*) 2) Integer Out) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 5
(D_Object_Declaration_XX 6 (mkobject_declaration_xx 7 ((*Result*) 3) Integer None)) 
(D_Seq_Declaration_XX 8
(D_Object_Declaration_XX 9 (mkobject_declaration_xx 10 ((*I*) 4) Integer None)) 
(D_Object_Declaration_XX 11 (mkobject_declaration_xx 12 ((*T*) 5) Integer None)))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 13
    (S_Assignment_XX 14 (E_Identifier_XX 15 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 16 (Integer_Literal 0) (**(nil)**))) 
    (S_Sequence_XX 17
    (S_If_XX 18 (E_Binary_Operation_XX 19 Or (E_Binary_Operation_XX 20 Equal (E_Name_XX 21 (E_Identifier_XX 22 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 23 (Integer_Literal 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 24 Equal (E_Name_XX 25 (E_Identifier_XX 26 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 27 (Integer_Literal 2) (**(nil)**)) (**(nil)**)) (**(nil)**))
      (S_Assignment_XX 28 (E_Identifier_XX 29 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 30 (Integer_Literal 1) (**(nil)**)))
      S_Null_XX
    ) 
    (S_Sequence_XX 31
    (S_Assignment_XX 32 (E_Identifier_XX 33 ((*I*) 4) (**(nil)**)) (E_Literal_XX 34 (Integer_Literal 2) (**(nil)**))) 
    (S_Sequence_XX 35
    (S_While_Loop_XX 36 (E_Binary_Operation_XX 37 And (E_Binary_Operation_XX 38 Less_Than (E_Name_XX 39 (E_Identifier_XX 40 ((*I*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 41 (E_Identifier_XX 42 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 43 Equal (E_Name_XX 44 (E_Identifier_XX 45 ((*Result*) 3) (**(nil)**)) (**(nil)**)) (E_Literal_XX 46 (Integer_Literal 0) (**(nil)**)) (**(nil)**)) (**(nil)**))
      (S_Sequence_XX 47
      (S_Assignment_XX 48 (E_Identifier_XX 49 ((*T*) 5) (**(nil)**)) (E_Binary_Operation_XX 50 Divide (E_Name_XX 51 (E_Identifier_XX 52 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 53 (E_Identifier_XX 54 ((*I*) 4) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
      (S_If_XX 55 (E_Binary_Operation_XX 56 Equal (E_Name_XX 57 (E_Identifier_XX 58 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 59 Multiply (E_Name_XX 60 (E_Identifier_XX 61 ((*T*) 5) (**(nil)**)) (**(nil)**)) (E_Name_XX 62 (E_Identifier_XX 63 ((*I*) 4) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
        (S_Assignment_XX 64 (E_Identifier_XX 65 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 66 (Integer_Literal 1) (**(nil)**)))
        S_Null_XX
      ))
    ) 
    (S_Assignment_XX 67 (E_Identifier_XX 68 ((*R*) 2) (**(nil)**)) (E_Name_XX 69 (E_Identifier_XX 70 ((*Result*) 3) (**(nil)**)) (**(nil)**)))))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((23, Integer) :: (68, Integer) :: (59, Integer) :: (50, Integer) :: (41, Integer) :: (62, Integer) :: (53, Integer) :: (44, Integer) :: (26, Integer) :: (56, Boolean) :: (29, Integer) :: (38, Boolean) :: (20, Boolean) :: (65, Integer) :: (46, Integer) :: (58, Integer) :: (49, Integer) :: (40, Integer) :: (22, Integer) :: (16, Integer) :: (70, Integer) :: (52, Integer) :: (43, Boolean) :: (25, Integer) :: (34, Integer) :: (61, Integer) :: (37, Boolean) :: (19, Boolean) :: (60, Integer) :: (69, Integer) :: (63, Integer) :: (54, Integer) :: (45, Integer) :: (27, Integer) :: (57, Integer) :: (21, Integer) :: (30, Integer) :: (39, Integer) :: (66, Integer) :: (15, Integer) :: (42, Integer) :: (51, Integer) :: (24, Boolean) :: (33, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((23, (sloc (*Line*)10 (*Col*)11 (*EndLine*)10 (*EndCol*)11)) :: (68, (sloc (*Line*)20 (*Col*)4 (*EndLine*)20 (*EndCol*)4)) :: (59, (sloc (*Line*)16 (*Col*)14 (*EndLine*)16 (*EndCol*)18)) :: (50, (sloc (*Line*)15 (*Col*)12 (*EndLine*)15 (*EndCol*)16)) :: (41, (sloc (*Line*)14 (*Col*)14 (*EndLine*)14 (*EndCol*)14)) :: (62, (sloc (*Line*)16 (*Col*)18 (*EndLine*)16 (*EndCol*)18)) :: (53, (sloc (*Line*)15 (*Col*)16 (*EndLine*)15 (*EndCol*)16)) :: (44, (sloc (*Line*)14 (*Col*)20 (*EndLine*)14 (*EndCol*)25)) :: (26, (sloc (*Line*)10 (*Col*)16 (*EndLine*)10 (*EndCol*)16)) :: (56, (sloc (*Line*)16 (*Col*)10 (*EndLine*)16 (*EndCol*)18)) :: (29, (sloc (*Line*)11 (*Col*)7 (*EndLine*)11 (*EndCol*)12)) :: (38, (sloc (*Line*)14 (*Col*)10 (*EndLine*)14 (*EndCol*)14)) :: (20, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)11)) :: (65, (sloc (*Line*)17 (*Col*)3 (*EndLine*)17 (*EndCol*)8)) :: (46, (sloc (*Line*)14 (*Col*)29 (*EndLine*)14 (*EndCol*)29)) :: (58, (sloc (*Line*)16 (*Col*)10 (*EndLine*)16 (*EndCol*)10)) :: (49, (sloc (*Line*)15 (*Col*)7 (*EndLine*)15 (*EndCol*)7)) :: (40, (sloc (*Line*)14 (*Col*)10 (*EndLine*)14 (*EndCol*)10)) :: (22, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)7)) :: (16, (sloc (*Line*)9 (*Col*)14 (*EndLine*)9 (*EndCol*)14)) :: (70, (sloc (*Line*)20 (*Col*)9 (*EndLine*)20 (*EndCol*)14)) :: (52, (sloc (*Line*)15 (*Col*)12 (*EndLine*)15 (*EndCol*)12)) :: (43, (sloc (*Line*)14 (*Col*)20 (*EndLine*)14 (*EndCol*)29)) :: (25, (sloc (*Line*)10 (*Col*)16 (*EndLine*)10 (*EndCol*)16)) :: (34, (sloc (*Line*)13 (*Col*)9 (*EndLine*)13 (*EndCol*)9)) :: (61, (sloc (*Line*)16 (*Col*)14 (*EndLine*)16 (*EndCol*)14)) :: (37, (sloc (*Line*)14 (*Col*)10 (*EndLine*)14 (*EndCol*)29)) :: (19, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)20)) :: (60, (sloc (*Line*)16 (*Col*)14 (*EndLine*)16 (*EndCol*)14)) :: (69, (sloc (*Line*)20 (*Col*)9 (*EndLine*)20 (*EndCol*)14)) :: (63, (sloc (*Line*)16 (*Col*)18 (*EndLine*)16 (*EndCol*)18)) :: (54, (sloc (*Line*)15 (*Col*)16 (*EndLine*)15 (*EndCol*)16)) :: (45, (sloc (*Line*)14 (*Col*)20 (*EndLine*)14 (*EndCol*)25)) :: (27, (sloc (*Line*)10 (*Col*)20 (*EndLine*)10 (*EndCol*)20)) :: (57, (sloc (*Line*)16 (*Col*)10 (*EndLine*)16 (*EndCol*)10)) :: (21, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)7)) :: (30, (sloc (*Line*)11 (*Col*)17 (*EndLine*)11 (*EndCol*)17)) :: (39, (sloc (*Line*)14 (*Col*)10 (*EndLine*)14 (*EndCol*)10)) :: (66, (sloc (*Line*)17 (*Col*)13 (*EndLine*)17 (*EndCol*)13)) :: (15, (sloc (*Line*)9 (*Col*)4 (*EndLine*)9 (*EndCol*)9)) :: (42, (sloc (*Line*)14 (*Col*)14 (*EndLine*)14 (*EndCol*)14)) :: (51, (sloc (*Line*)15 (*Col*)12 (*EndLine*)15 (*EndCol*)12)) :: (24, (sloc (*Line*)10 (*Col*)16 (*EndLine*)10 (*EndCol*)20)) :: (33, (sloc (*Line*)13 (*Col*)4 (*EndLine*)13 (*EndCol*)4)) :: nil)
  (* = = = (6) name id to a pair of (name string, unique name string) map = = = *)
  (*/////////////////////////////////////////////////*)
  ((mkNameTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable names map = = = *)
  (*///////////////////////////////////*)
  ((2, ("R", "ada://parameter/Prime+1:11/R+1:31")) :: (5, ("T", "ada://variable/Prime+1:11/T+5:4")) :: (4, ("I", "ada://variable/Prime+1:11/I+4:4")) :: (1, ("N", "ada://parameter/Prime+1:11/N+1:18")) :: (3, ("Result", "ada://variable/Prime+1:11/Result+3:4")) :: nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram names map = = = *)
  (*////////////////////////////////////////////*)
  ((1, ("Prime", "ada://procedure_body/Prime+1:11")) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) package names map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) type names map = = = *)
  (*/////////////////////////////////////*)
  (nil)
))
).

