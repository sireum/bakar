(* Compilation Unit *)
Library_Unit 1
  (* Compilation Unit - Unit Declaration *) (
    Library_Subprogram 2 (
      (* Function Body Declaration *)
      Function 3 (
        mkfunction_body 4
          (* Function Body - Name *)
          (*Prime*) 1
          (* Function Body - Return Type *) 
          (Integer) 
          (* Function Body - Specification *)
          (nil)
          (* Function Body - Parameters *)
          (
          mkparameter_specification 5 (*N*) 1 (1) (In) None :: nil)
          (* Function Body - Local Defined Variables *)
          (
          mkobject_declaration 6 (*Result*) 2 1 None :: 
          mkobject_declaration 7 (*I*) 3 1 None :: 
          mkobject_declaration 8 (*T*) 4 1 None :: nil)
          (* Function Body - Statements *) (
            S_Sequence 9 (
              S_Assignment 10 ((*Result*) 2) (E_Literal 11 (Integer_Literal 0)) ) ( 
              S_Sequence 12 (
                S_If 13 (E_Binary_Operation 14 Or (E_Binary_Operation 15 Equal (E_Identifier 16 (*N*) 1) (E_Literal 17 (Integer_Literal 1))) (E_Binary_Operation 18 Equal (E_Identifier 19 (*N*) 1) (E_Literal 20 (Integer_Literal 2)))) (
                    S_Assignment 21 ((*Result*) 2) (E_Literal 22 (Integer_Literal 1))
                  ) ) ( 
                S_Sequence 23 (
                  S_Assignment 24 ((*I*) 3) (E_Literal 25 (Integer_Literal 2)) ) ( 
                  S_Sequence 26 (
                    S_While_Loop 27 (E_Binary_Operation 28 And (E_Binary_Operation 29 Less_Than (E_Identifier 30 (*I*) 3) (E_Identifier 31 (*N*) 1)) (E_Binary_Operation 32 Equal (E_Identifier 33 (*Result*) 2) (E_Literal 34 (Integer_Literal 0)))) (
                        S_Sequence 35 (
                          S_Assignment 36 ((*T*) 4) (E_Binary_Operation 37 Divide (E_Identifier 38 (*N*) 1) (E_Identifier 39 (*I*) 3)) ) ( 
                          S_If 40 (E_Binary_Operation 41 Equal (E_Identifier 42 (*N*) 1) (E_Binary_Operation 43 Multiply (E_Identifier 44 (*T*) 4) (E_Identifier 45 (*I*) 3))) (
                              S_Assignment 46 ((*Result*) 2) (E_Literal 47 (Integer_Literal 1))
                            ) )
                      ) ) ( 
                    S_Return 48 (Some (E_Identifier 49 (*Result*) 2)) ) ) ) )
          )
      )
    )
  )
  (* Compilation Unit - Type Table *) (
    mktype_table (
      (* Expression Type Table: Expression AstNum --> TypeNum *)
      (11, 2) ::
      (14, 3) ::
      (15, 3) ::
      (16, 1) ::
      (17, 2) ::
      (18, 3) ::
      (19, 1) ::
      (20, 2) ::
      (22, 2) ::
      (25, 2) ::
      (28, 3) ::
      (29, 3) ::
      (30, 1) ::
      (31, 1) ::
      (32, 3) ::
      (33, 1) ::
      (34, 2) ::
      (37, 1) ::
      (38, 1) ::
      (39, 1) ::
      (41, 3) ::
      (42, 1) ::
      (43, 1) ::
      (44, 1) ::
      (45, 1) ::
      (47, 2) ::
      (49, 1) :: nil
    ) (
      (* Type Name Table: TypeNum --> (Type URI * Option(Type Declaration AST Num)) *)
      (1, ("ada://ordinary_type/Standard-1:1/Integer-1:1"%string, None)) ::
      (2, ("universal_integer"%string, None)) ::
      (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1"%string, None)) :: nil
    )
  )