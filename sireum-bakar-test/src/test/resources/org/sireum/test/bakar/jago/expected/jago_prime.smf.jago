Definition Coq_AST_Tree_XX := 
(D_Procedure_Body_XX 2 
  (mkprocedure_body_xx 4
    (* = = = Procedure Name = = = *)
    ((*Prime*) 1)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_xx 5 ((*N*) 1) Integer In) :: 
    (mkparameter_specification_xx 6 ((*R*) 2) Integer Out) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 7
  (D_Object_Declaration_XX 8 (mkobject_declaration_xx 9 ((*Result*) 3) Integer None)) 
  (D_Seq_Declaration_XX 10
  (D_Object_Declaration_XX 11 (mkobject_declaration_xx 12 ((*I*) 4) Integer None)) 
  (D_Object_Declaration_XX 13 (mkobject_declaration_xx 14 ((*T*) 5) Integer None)))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 15
      (S_Assignment_XX 16 (E_Identifier_XX 17 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 18 (Integer_Literal 0) (**(nil)**))) 
      (S_Sequence_XX 19
      (S_If_XX 20 (E_Binary_Operation_XX 21 Or (E_Binary_Operation_XX 22 Equal (E_Name_XX 23 (E_Identifier_XX 24 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 25 (Integer_Literal 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 26 Equal (E_Name_XX 27 (E_Identifier_XX 28 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 29 (Integer_Literal 2) (**(nil)**)) (**(nil)**)) (**(nil)**))
        (S_Assignment_XX 30 (E_Identifier_XX 31 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 32 (Integer_Literal 1) (**(nil)**)))
        S_Null_XX
      ) 
      (S_Sequence_XX 33
      (S_Assignment_XX 34 (E_Identifier_XX 35 ((*I*) 4) (**(nil)**)) (E_Literal_XX 36 (Integer_Literal 2) (**(nil)**))) 
      (S_Sequence_XX 37
      (S_While_Loop_XX 38 (E_Binary_Operation_XX 39 And (E_Binary_Operation_XX 40 Less_Than (E_Name_XX 41 (E_Identifier_XX 42 ((*I*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 43 (E_Identifier_XX 44 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 45 Equal (E_Name_XX 46 (E_Identifier_XX 47 ((*Result*) 3) (**(nil)**)) (**(nil)**)) (E_Literal_XX 48 (Integer_Literal 0) (**(nil)**)) (**(nil)**)) (**(nil)**))
        (S_Sequence_XX 49
        (S_Assignment_XX 50 (E_Identifier_XX 51 ((*T*) 5) (**(nil)**)) (E_Binary_Operation_XX 52 Divide (E_Name_XX 53 (E_Identifier_XX 54 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 55 (E_Identifier_XX 56 ((*I*) 4) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
        (S_If_XX 57 (E_Binary_Operation_XX 58 Equal (E_Name_XX 59 (E_Identifier_XX 60 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 61 Multiply (E_Name_XX 62 (E_Identifier_XX 63 ((*T*) 5) (**(nil)**)) (**(nil)**)) (E_Name_XX 64 (E_Identifier_XX 65 ((*I*) 4) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
          (S_Assignment_XX 66 (E_Identifier_XX 67 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 68 (Integer_Literal 1) (**(nil)**)))
          S_Null_XX
        ))
      ) 
      (S_Assignment_XX 69 (E_Identifier_XX 70 ((*R*) 2) (**(nil)**)) (E_Name_XX 71 (E_Identifier_XX 72 ((*Result*) 3) (**(nil)**)) (**(nil)**)))))))
  )
).

Definition Symbol_Table_XX := 
(mkSymbolTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Prime*) 1), (0, (mkprocedure_body_xx 4
  (* = = = Procedure Name = = = *)
  ((*Prime*) 1)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_xx 5 ((*N*) 1) Integer In) :: 
  (mkparameter_specification_xx 6 ((*R*) 2) Integer Out) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 7
(D_Object_Declaration_XX 8 (mkobject_declaration_xx 9 ((*Result*) 3) Integer None)) 
(D_Seq_Declaration_XX 10
(D_Object_Declaration_XX 11 (mkobject_declaration_xx 12 ((*I*) 4) Integer None)) 
(D_Object_Declaration_XX 13 (mkobject_declaration_xx 14 ((*T*) 5) Integer None)))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 15
    (S_Assignment_XX 16 (E_Identifier_XX 17 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 18 (Integer_Literal 0) (**(nil)**))) 
    (S_Sequence_XX 19
    (S_If_XX 20 (E_Binary_Operation_XX 21 Or (E_Binary_Operation_XX 22 Equal (E_Name_XX 23 (E_Identifier_XX 24 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 25 (Integer_Literal 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 26 Equal (E_Name_XX 27 (E_Identifier_XX 28 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 29 (Integer_Literal 2) (**(nil)**)) (**(nil)**)) (**(nil)**))
      (S_Assignment_XX 30 (E_Identifier_XX 31 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 32 (Integer_Literal 1) (**(nil)**)))
      S_Null_XX
    ) 
    (S_Sequence_XX 33
    (S_Assignment_XX 34 (E_Identifier_XX 35 ((*I*) 4) (**(nil)**)) (E_Literal_XX 36 (Integer_Literal 2) (**(nil)**))) 
    (S_Sequence_XX 37
    (S_While_Loop_XX 38 (E_Binary_Operation_XX 39 And (E_Binary_Operation_XX 40 Less_Than (E_Name_XX 41 (E_Identifier_XX 42 ((*I*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 43 (E_Identifier_XX 44 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 45 Equal (E_Name_XX 46 (E_Identifier_XX 47 ((*Result*) 3) (**(nil)**)) (**(nil)**)) (E_Literal_XX 48 (Integer_Literal 0) (**(nil)**)) (**(nil)**)) (**(nil)**))
      (S_Sequence_XX 49
      (S_Assignment_XX 50 (E_Identifier_XX 51 ((*T*) 5) (**(nil)**)) (E_Binary_Operation_XX 52 Divide (E_Name_XX 53 (E_Identifier_XX 54 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 55 (E_Identifier_XX 56 ((*I*) 4) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
      (S_If_XX 57 (E_Binary_Operation_XX 58 Equal (E_Name_XX 59 (E_Identifier_XX 60 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 61 Multiply (E_Name_XX 62 (E_Identifier_XX 63 ((*T*) 5) (**(nil)**)) (**(nil)**)) (E_Name_XX 64 (E_Identifier_XX 65 ((*I*) 4) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
        (S_Assignment_XX 66 (E_Identifier_XX 67 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 68 (Integer_Literal 1) (**(nil)**)))
        S_Null_XX
      ))
    ) 
    (S_Assignment_XX 69 (E_Identifier_XX 70 ((*R*) 2) (**(nil)**)) (E_Name_XX 71 (E_Identifier_XX 72 ((*Result*) 3) (**(nil)**)) (**(nil)**)))))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((23, Integer) :: (68, Integer) :: (59, Integer) :: (32, Integer) :: (41, Integer) :: (62, Integer) :: (53, Integer) :: (17, Integer) :: (35, Integer) :: (44, Integer) :: (26, Boolean) :: (71, Integer) :: (56, Integer) :: (29, Integer) :: (47, Integer) :: (65, Integer) :: (46, Integer) :: (64, Integer) :: (55, Integer) :: (67, Integer) :: (58, Boolean) :: (40, Boolean) :: (31, Integer) :: (22, Boolean) :: (70, Integer) :: (52, Integer) :: (43, Integer) :: (25, Integer) :: (61, Integer) :: (28, Integer) :: (60, Integer) :: (63, Integer) :: (54, Integer) :: (45, Boolean) :: (72, Integer) :: (27, Integer) :: (18, Integer) :: (36, Integer) :: (21, Boolean) :: (48, Integer) :: (39, Boolean) :: (42, Integer) :: (51, Integer) :: (24, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((23, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)7)) :: (68, (sloc (*Line*)17 (*Col*)13 (*EndLine*)17 (*EndCol*)13)) :: (59, (sloc (*Line*)16 (*Col*)10 (*EndLine*)16 (*EndCol*)10)) :: (32, (sloc (*Line*)11 (*Col*)17 (*EndLine*)11 (*EndCol*)17)) :: (41, (sloc (*Line*)14 (*Col*)10 (*EndLine*)14 (*EndCol*)10)) :: (62, (sloc (*Line*)16 (*Col*)14 (*EndLine*)16 (*EndCol*)14)) :: (53, (sloc (*Line*)15 (*Col*)12 (*EndLine*)15 (*EndCol*)12)) :: (17, (sloc (*Line*)9 (*Col*)4 (*EndLine*)9 (*EndCol*)9)) :: (35, (sloc (*Line*)13 (*Col*)4 (*EndLine*)13 (*EndCol*)4)) :: (44, (sloc (*Line*)14 (*Col*)14 (*EndLine*)14 (*EndCol*)14)) :: (26, (sloc (*Line*)10 (*Col*)16 (*EndLine*)10 (*EndCol*)20)) :: (71, (sloc (*Line*)20 (*Col*)9 (*EndLine*)20 (*EndCol*)14)) :: (56, (sloc (*Line*)15 (*Col*)16 (*EndLine*)15 (*EndCol*)16)) :: (29, (sloc (*Line*)10 (*Col*)20 (*EndLine*)10 (*EndCol*)20)) :: (47, (sloc (*Line*)14 (*Col*)20 (*EndLine*)14 (*EndCol*)25)) :: (65, (sloc (*Line*)16 (*Col*)18 (*EndLine*)16 (*EndCol*)18)) :: (46, (sloc (*Line*)14 (*Col*)20 (*EndLine*)14 (*EndCol*)25)) :: (64, (sloc (*Line*)16 (*Col*)18 (*EndLine*)16 (*EndCol*)18)) :: (55, (sloc (*Line*)15 (*Col*)16 (*EndLine*)15 (*EndCol*)16)) :: (67, (sloc (*Line*)17 (*Col*)3 (*EndLine*)17 (*EndCol*)8)) :: (58, (sloc (*Line*)16 (*Col*)10 (*EndLine*)16 (*EndCol*)18)) :: (40, (sloc (*Line*)14 (*Col*)10 (*EndLine*)14 (*EndCol*)14)) :: (31, (sloc (*Line*)11 (*Col*)7 (*EndLine*)11 (*EndCol*)12)) :: (22, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)11)) :: (70, (sloc (*Line*)20 (*Col*)4 (*EndLine*)20 (*EndCol*)4)) :: (52, (sloc (*Line*)15 (*Col*)12 (*EndLine*)15 (*EndCol*)16)) :: (43, (sloc (*Line*)14 (*Col*)14 (*EndLine*)14 (*EndCol*)14)) :: (25, (sloc (*Line*)10 (*Col*)11 (*EndLine*)10 (*EndCol*)11)) :: (61, (sloc (*Line*)16 (*Col*)14 (*EndLine*)16 (*EndCol*)18)) :: (28, (sloc (*Line*)10 (*Col*)16 (*EndLine*)10 (*EndCol*)16)) :: (60, (sloc (*Line*)16 (*Col*)10 (*EndLine*)16 (*EndCol*)10)) :: (63, (sloc (*Line*)16 (*Col*)14 (*EndLine*)16 (*EndCol*)14)) :: (54, (sloc (*Line*)15 (*Col*)12 (*EndLine*)15 (*EndCol*)12)) :: (45, (sloc (*Line*)14 (*Col*)20 (*EndLine*)14 (*EndCol*)29)) :: (72, (sloc (*Line*)20 (*Col*)9 (*EndLine*)20 (*EndCol*)14)) :: (27, (sloc (*Line*)10 (*Col*)16 (*EndLine*)10 (*EndCol*)16)) :: (18, (sloc (*Line*)9 (*Col*)14 (*EndLine*)9 (*EndCol*)14)) :: (36, (sloc (*Line*)13 (*Col*)9 (*EndLine*)13 (*EndCol*)9)) :: (21, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)20)) :: (48, (sloc (*Line*)14 (*Col*)29 (*EndLine*)14 (*EndCol*)29)) :: (39, (sloc (*Line*)14 (*Col*)10 (*EndLine*)14 (*EndCol*)29)) :: (42, (sloc (*Line*)14 (*Col*)10 (*EndLine*)14 (*EndCol*)10)) :: (51, (sloc (*Line*)15 (*Col*)7 (*EndLine*)15 (*EndCol*)7)) :: (24, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)7)) :: nil)
).

