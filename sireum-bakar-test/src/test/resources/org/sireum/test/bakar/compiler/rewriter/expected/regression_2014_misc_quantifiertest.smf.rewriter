package QuantifierTest;


procedure $$binit {

  #l1.
    V := `Vector { iter => 
        switch iter
          default => 0ii};

  #l2.
    return;
}

procedure dummy (
        Index I) {
  local
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;
    FIXME _t16;
    FIXME _t17;


  #rwl0.
    _t0 := V[J];

  #rwl1.
    _t1 := 0ii;

  #rwl2.
    _t2 := V[J];

  #rwl3.
    _t3 := 7ii;

  #rwl4.
    _t4 := _t0 > _t1;

  #rwl5.
    _t5 := _t2 < _t3;

  #l3.
    assert proof__uif__for_some {Index J => 
        switch J
          case (1ii, 2ii) => _t4 && _t5
          default => true};

  #rwl6.
    _t6 := V[I];

  #rwl7.
    _t7 := 3ii;

  #l4.
    V[I] := _t6 + _t7;

  #rwl8.
    _t8 := 3ii;

  #rwl9.
    _t9 := 3ii;

  #rwl10.
    _t10 := V[J];

  #rwl11.
    _t11 := 0ii;

  #rwl12.
    _t12 := V[J];

  #rwl13.
    _t13 := 7ii;

  #rwl14.
    _t14 := _t10 > _t11;

  #rwl15.
    _t15 := _t12 < _t13;

  #rwl16.
    _t16 := _t8 == _t9;

  #rwl17.
    _t17 := proof__uif__for_all {Index J => 
        switch J
          case (attribute__uif__first `Index, attribute__uif__last `Index) => _t14 || _t15
          default => true};

  #l5.
    assert _t16 &&& _t17;

  #l6.
    return;
}package QuantifierTest;


typealias _SIGNED_INTEGER_TYPE_ Index;

typealias _ARRAY_ Vector;

global Vector @@V;

procedure dummy (
        Index I) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;