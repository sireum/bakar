(* Compilation Unit *)
Library_Unit ( 1,
  (* Compilation Unit - Unit Declaration *)
  Library_Subprogram( 2,
    (* Function Body Declaration *)
    Function( 3,
      {
        function_astnum =   
          (* Function Body - AST Number *)
          4; 
        function_name =
          (* Function Body - Name *)
           (*Gcd*) 1;
        function_result_subtype = 
          (* Function Body - Return Type *)
          Integer;
        function_contracts = 
          (* Function Body - Specification *)
          [];
        function_parameter_profile = 
          (* Function Body - Parameters *)
          [
          { parameter_astnum = 5; parameter_name =  (*M*) 1; parameter_subtype_mark = 1; parameter_mode = In; parameter_default_expression = None }; 
          { parameter_astnum = 6; parameter_name =  (*N*) 2; parameter_subtype_mark = 1; parameter_mode = In; parameter_default_expression = None }];
        function_declarative_part = 
          (* Function Body - Locally Defined Variables *)
          [
          { declaration_astnum = 7; object_name =  (*C*) 3; object_nominal_subtype = 1; initialization_expression = None }; 
          { declaration_astnum = 8; object_name =  (*T*) 5; object_nominal_subtype = 1; initialization_expression = None }; 
          { declaration_astnum = 9; object_name =  (*R*) 6; object_nominal_subtype = 1; initialization_expression = None }];
        function_statements = 
          (* Function Body - Statements *)
          S_Sequence (10,
            S_Assignment (11,  (*C*) 3, E_Identifier (12,  (*M*) 1)),
            S_Sequence (13,
              S_Assignment (14,  (*D*) 4, E_Identifier (15,  (*N*) 2)),
              S_Sequence (16,
                S_While_Loop (17, E_Binary_Operation (18, Not_Equal, E_Identifier (19,  (*D*) 4), E_Literal (20, Integer_Literal 0)),
                  S_Sequence (21,
                    S_Assignment (22,  (*T*) 5, E_Binary_Operation (23, Divide, E_Identifier (24,  (*C*) 3), E_Identifier (25,  (*D*) 4))),
                    S_Sequence (26,
                      S_Assignment (27,  (*R*) 6, E_Binary_Operation (28, Minus, E_Identifier (29,  (*C*) 3), E_Binary_Operation (30, Multiply, E_Identifier (31,  (*T*) 5), E_Identifier (32,  (*D*) 4)))),
                      S_Sequence (33,
                        S_Assignment (34,  (*C*) 3, E_Identifier (35,  (*D*) 4)),
                        S_Assignment (36,  (*D*) 4, E_Identifier (37,  (*R*) 6)) ) ) )
                ),
                S_Return (38, (Some (E_Identifier (39,  (*C*) 3)))) ) ) )
      }
    )
  ),  
  (* Compilation Unit - Type Table *)
  {
    tt_exptype_table = 
      (* Expression AstNum --> TypeNum *) 
      [
        (12, 1) ;
        (15, 1) ;
        (18, 3) ;
        (19, 1) ;
        (20, 2) ;
        (23, 1) ;
        (24, 1) ;
        (25, 1) ;
        (28, 1) ;
        (29, 1) ;
        (30, 1) ;
        (31, 1) ;
        (32, 1) ;
        (35, 1) ;
        (37, 1) ;
        (39, 1)
      ];
    tt_typename_table = 
      (* TypeNum --> (Type URI * (Type Declaration AST Num) Option) *) 
      [
        (1, ("ada://ordinary_type/Standard-1:1/Integer-1:1", None)) ;
        (2, ("universal_integer", None)) ;
        (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1", None))
      ]
  }
)