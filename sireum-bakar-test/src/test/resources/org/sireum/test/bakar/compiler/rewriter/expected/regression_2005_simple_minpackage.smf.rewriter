package Minpackage;


procedure Integer MinFunc (
        Integer X,
        Integer Y) {
  local
    Integer Min;
    Integer Max;
    Boolean _bert0;
    Boolean _bert1;
    Boolean _bert2;


  #l2.
    if !(X >= Y) then goto l1;

  #l3.
    Min := Y;

  #l4.
    Max := X;

  #l5.
    goto l0;

  #l1.
    // empty loc

  #l6.
    Min := X;

  #l7.
    Max := Y;

  #l0.
    // empty loc

  #berl1.
    _bert0 := Min <= X;

  #berl2.
    if !(_bert0) then goto berl0;

  #berl3.
    _bert0 := Min <= Y;

  #berl0.
    // empty loc

  #berl5.
    _bert1 := _bert0;

  #berl6.
    if !(_bert1) then goto berl4;

  #berl7.
    _bert1 := X <= Max;

  #berl4.
    // empty loc

  #berl9.
    _bert2 := _bert1;

  #berl10.
    if !(_bert2) then goto berl8;

  #berl11.
    _bert2 := Y <= Max;

  #berl8.
    // empty loc

  #l8.
    assert (proof__uif__assert _bert2, "Assertion failed at [13, 7]");

  #l9.
    return Min;
}package Minpackage;


procedure Integer MinFunc (
        Integer X,
        Integer Y) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;