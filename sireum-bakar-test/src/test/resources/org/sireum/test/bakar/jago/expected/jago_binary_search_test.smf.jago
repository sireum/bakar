Require Import String.
Require Import symboltable.
Open Scope string_scope.

Definition Coq_AST_Tree := 
(D_Procedure_Body 1 
  (mkprocedure_body 2
    (* = = = Procedure Name = = = *)
    ((*Binary_Search_Test*) 1)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification 3 ((*I*) 2) Integer In) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration 4
  (D_Type_Declaration 5 (Integer_Type_Declaration 6 ((*T*) 3) (Range 0 10))) 
  (D_Seq_Declaration 7
  (D_Type_Declaration 8 (Subtype_Declaration 9 ((*U*) 4) (Integer_Type ((*T*) 3)) (Range 1 10))) 
  (D_Seq_Declaration 10
  (D_Type_Declaration 11 (Array_Type_Declaration 12 ((*Ar*) 5) ((*index subtype mark*) Integer) ((*component type*) (Subtype ((*U*) 4))))) 
  (D_Seq_Declaration 13
  (D_Object_Declaration 14 (mkobject_declaration 15 ((*A*) 6) (Array_Type ((*Ar*) 5)) None)) 
  (D_Seq_Declaration 16
  (D_Object_Declaration 17 (mkobject_declaration 18 ((*R*) 7) (Integer_Type ((*T*) 3)) None)) 
  (D_Seq_Declaration 19
  (D_Type_Declaration 20 (Derived_Type_Declaration 21 ((*T1*) 8) Integer (Range 1 10))) 
  (D_Seq_Declaration 22
  (D_Type_Declaration 23 (Derived_Type_Declaration 24 ((*T2*) 9) (Integer_Type ((*T*) 3)) (Range 2 5))) 
  (D_Seq_Declaration 25
  (D_Type_Declaration 26 (Subtype_Declaration 27 ((*T3*) 10) Integer (Range 1 10))) 
  (D_Seq_Declaration 28
  (D_Type_Declaration 29 (Subtype_Declaration 30 ((*T4*) 11) Integer (Range 5 10))) 
  (D_Seq_Declaration 31
  (D_Type_Declaration 32 (Record_Type_Declaration 33 ((*RT*) 12) ((((*X*) 13), Integer) :: (((*Y*) 14), Integer) :: nil))) 
  (D_Seq_Declaration 35
  (D_Procedure_Body 36 
    (mkprocedure_body 37
      (* = = = Procedure Name = = = *)
      ((*increase*) 15)
      (* = = = Formal Parameters = = = *)
      (
      (mkparameter_specification 38 ((*X*) 16) Integer In) :: 
      (mkparameter_specification 39 ((*Y*) 17) Integer Out) :: nil)
      (* = = = Object Declarations = = = *)
      (D_Null_Declaration)
      (* = = = Procedure Body = = = *)
        (S_Assignment 40 (E_Identifier 41 ((*Y*) 17) ) (E_Binary_Operation 42 Plus (E_Name 43 (E_Identifier 44 ((*X*) 16) ) ) (E_Literal 45 (Integer_Literal 1) ) ))
    )
  ) 
  (D_Seq_Declaration 46
  (D_Object_Declaration 48 (mkobject_declaration 49 ((*B*) 21) Boolean (Some ((E_Literal 47 (Boolean_Literal true) ))))) 
  (D_Seq_Declaration 50
  (D_Procedure_Body 51 
    (mkprocedure_body 52
      (* = = = Procedure Name = = = *)
      ((*Search*) 22)
      (* = = = Formal Parameters = = = *)
      (
      (mkparameter_specification 53 ((*A*) 23) (Array_Type ((*Ar*) 5)) In) :: 
      (mkparameter_specification 54 ((*I*) 24) Integer In) :: 
      (mkparameter_specification 55 ((*R*) 25) (Integer_Type ((*T*) 3)) Out) :: nil)
      (* = = = Object Declarations = = = *)
      ((D_Seq_Declaration 56
    (D_Object_Declaration 57 (mkobject_declaration 58 ((*Left*) 26) (Subtype ((*U*) 4)) None)) 
    (D_Seq_Declaration 59
    (D_Object_Declaration 60 (mkobject_declaration 61 ((*Right*) 27) (Subtype ((*U*) 4)) None)) 
    (D_Object_Declaration 62 (mkobject_declaration 63 ((*Med*) 28) (Subtype ((*U*) 4)) None)))))
      (* = = = Procedure Body = = = *)
        (S_Sequence 64
        (S_Assignment 65 (E_Identifier 66 ((*Left*) 26) ) (E_Literal 67 (Integer_Literal 0) )) 
        (S_Sequence 68
        (S_Assignment 69 (E_Identifier 70 ((*Right*) 27) ) (E_Literal 71 (Integer_Literal 10) )) 
        (S_Sequence 72
        (S_Assignment 73 (E_Identifier 74 ((*R*) 25) ) (E_Literal 75 (Integer_Literal 0) )) 
        (S_Sequence 76
        (S_If 77 (E_Binary_Operation 78 Or (E_Binary_Operation 79 Greater_Than (E_Name 80 (E_Indexed_Component 81 82 ((*A*) 23) (E_Binary_Operation 84 Plus (E_Name 85 (E_Identifier 86 ((*Left*) 26) ) ) (E_Literal 87 (Integer_Literal 1) ) ) ) ) (E_Name 88 (E_Identifier 89 ((*I*) 24) ) ) ) (E_Binary_Operation 90 Less_Than (E_Name 91 (E_Indexed_Component 92 93 ((*A*) 23) (E_Name 95 (E_Identifier 96 ((*Right*) 27) ) ) ) ) (E_Name 97 (E_Identifier 98 ((*I*) 24) ) ) ) )
          (S_Assignment 99 (E_Identifier 100 ((*R*) 25) ) (E_Literal 101 (Integer_Literal 0) ))
          S_Null
        ) 
        (S_While_Loop 102 (E_Binary_Operation 103 Less_Than_Or_Equal (E_Name 104 (E_Identifier 105 ((*Left*) 26) ) ) (E_Name 106 (E_Identifier 107 ((*Right*) 27) ) ) )
          (S_Sequence 108
          (S_Assignment 109 (E_Identifier 110 ((*Med*) 28) ) (E_Binary_Operation 111 Plus (E_Name 112 (E_Identifier 113 ((*Left*) 26) ) ) (E_Binary_Operation 114 Divide (E_Binary_Operation 115 Minus (E_Name 116 (E_Identifier 117 ((*Right*) 27) ) ) (E_Name 118 (E_Identifier 119 ((*Left*) 26) ) ) ) (E_Literal 120 (Integer_Literal 2) ) ) )) 
          (S_If 121 (E_Binary_Operation 122 Less_Than (E_Name 123 (E_Indexed_Component 124 125 ((*A*) 23) (E_Name 127 (E_Identifier 128 ((*Med*) 28) ) ) ) ) (E_Name 129 (E_Identifier 130 ((*I*) 24) ) ) )
            (S_Assignment 131 (E_Identifier 132 ((*Left*) 26) ) (E_Binary_Operation 133 Plus (E_Name 134 (E_Identifier 135 ((*Med*) 28) ) ) (E_Literal 136 (Integer_Literal 1) ) ))
            (S_If 137 (E_Binary_Operation 138 Greater_Than (E_Name 139 (E_Indexed_Component 140 141 ((*A*) 23) (E_Name 143 (E_Identifier 144 ((*Med*) 28) ) ) ) ) (E_Name 145 (E_Identifier 146 ((*I*) 24) ) ) )
              (S_Assignment 147 (E_Identifier 148 ((*Right*) 27) ) (E_Binary_Operation 149 Minus (E_Name 150 (E_Identifier 151 ((*Med*) 28) ) ) (E_Literal 152 (Integer_Literal 1) ) ))
              (S_Assignment 153 (E_Identifier 154 ((*R*) 25) ) (E_Name 155 (E_Identifier 156 ((*Med*) 28) ) ))
            )
          ))
        )))))
    )
  ) 
  (D_Seq_Declaration 157
  (D_Object_Declaration 159 (mkobject_declaration 160 ((*X1*) 29) (Derived_Type ((*T1*) 8)) (Some ((E_Literal 158 (Integer_Literal 2) ))))) 
  (D_Seq_Declaration 161
  (D_Object_Declaration 163 (mkobject_declaration 164 ((*X2*) 30) (Derived_Type ((*T2*) 9)) (Some ((E_Literal 162 (Integer_Literal 3) ))))) 
  (D_Seq_Declaration 165
  (D_Object_Declaration 167 (mkobject_declaration 168 ((*X3*) 31) (Subtype ((*T3*) 10)) (Some ((E_Literal 166 (Integer_Literal 4) ))))) 
  (D_Object_Declaration 170 (mkobject_declaration 171 ((*X4*) 32) (Subtype ((*T4*) 11)) (Some ((E_Literal 169 (Integer_Literal 6) ))))))))))))))))))))))
    (* = = = Procedure Body = = = *)
      (S_Sequence 172
      (S_Procedure_Call 173 174 ((*increase*) 15) 
        ((E_Literal 175 (Integer_Literal 10) ) :: (E_Name 176 (E_Identifier 177 ((*X4*) 32) ) ) :: nil)
      ) 
      (S_Sequence 178
      (S_Assignment 179 (E_Identifier 180 ((*X1*) 29) ) (E_Binary_Operation 181 Plus (E_Name 182 (E_Identifier 183 ((*X1*) 29) ) ) (E_Literal 184 (Integer_Literal 1) ) )) 
      (S_Sequence 185
      (S_Assignment 186 (E_Identifier 187 ((*X2*) 30) ) (E_Binary_Operation 188 Plus (E_Name 189 (E_Identifier 190 ((*X2*) 30) ) ) (E_Literal 191 (Integer_Literal 2) ) )) 
      (S_Sequence 192
      (S_Assignment 193 (E_Identifier 194 ((*X4*) 32) ) (E_Binary_Operation 195 Plus (E_Name 196 (E_Identifier 197 ((*X3*) 31) ) ) (E_Name 198 (E_Identifier 199 ((*X4*) 32) ) ) )) 
      (S_Sequence 200
      (S_Assignment 201 (E_Indexed_Component 202 203 ((*A*) 6) (E_Literal 205 (Integer_Literal 0) ) ) (E_Literal 206 (Integer_Literal 0) )) 
      (S_Sequence 207
      (S_Assignment 208 (E_Indexed_Component 209 210 ((*A*) 6) (E_Literal 212 (Integer_Literal 1) ) ) (E_Literal 213 (Integer_Literal 10) )) 
      (S_Procedure_Call 214 215 ((*Search*) 22) 
        ((E_Name 216 (E_Identifier 217 ((*A*) 6) ) ) :: (E_Name 218 (E_Identifier 219 ((*I*) 2) ) ) :: (E_Name 220 (E_Identifier 221 ((*R*) 7) ) ) :: nil)
      )))))))
  )
).

Definition Symbol_Table := 
(mkSymbolTable
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Search*) 22), (1, (mkprocedure_body 52
  (* = = = Procedure Name = = = *)
  ((*Search*) 22)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification 53 ((*A*) 23) (Array_Type ((*Ar*) 5)) In) :: 
  (mkparameter_specification 54 ((*I*) 24) Integer In) :: 
  (mkparameter_specification 55 ((*R*) 25) (Integer_Type ((*T*) 3)) Out) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration 56
(D_Object_Declaration 57 (mkobject_declaration 58 ((*Left*) 26) (Subtype ((*U*) 4)) None)) 
(D_Seq_Declaration 59
(D_Object_Declaration 60 (mkobject_declaration 61 ((*Right*) 27) (Subtype ((*U*) 4)) None)) 
(D_Object_Declaration 62 (mkobject_declaration 63 ((*Med*) 28) (Subtype ((*U*) 4)) None)))))
  (* = = = Procedure Body = = = *)
    (S_Sequence 64
    (S_Assignment 65 (E_Identifier 66 ((*Left*) 26) ) (E_Literal 67 (Integer_Literal 0) )) 
    (S_Sequence 68
    (S_Assignment 69 (E_Identifier 70 ((*Right*) 27) ) (E_Literal 71 (Integer_Literal 10) )) 
    (S_Sequence 72
    (S_Assignment 73 (E_Identifier 74 ((*R*) 25) ) (E_Literal 75 (Integer_Literal 0) )) 
    (S_Sequence 76
    (S_If 77 (E_Binary_Operation 78 Or (E_Binary_Operation 79 Greater_Than (E_Name 80 (E_Indexed_Component 81 82 ((*A*) 23) (E_Binary_Operation 84 Plus (E_Name 85 (E_Identifier 86 ((*Left*) 26) ) ) (E_Literal 87 (Integer_Literal 1) ) ) ) ) (E_Name 88 (E_Identifier 89 ((*I*) 24) ) ) ) (E_Binary_Operation 90 Less_Than (E_Name 91 (E_Indexed_Component 92 93 ((*A*) 23) (E_Name 95 (E_Identifier 96 ((*Right*) 27) ) ) ) ) (E_Name 97 (E_Identifier 98 ((*I*) 24) ) ) ) )
      (S_Assignment 99 (E_Identifier 100 ((*R*) 25) ) (E_Literal 101 (Integer_Literal 0) ))
      S_Null
    ) 
    (S_While_Loop 102 (E_Binary_Operation 103 Less_Than_Or_Equal (E_Name 104 (E_Identifier 105 ((*Left*) 26) ) ) (E_Name 106 (E_Identifier 107 ((*Right*) 27) ) ) )
      (S_Sequence 108
      (S_Assignment 109 (E_Identifier 110 ((*Med*) 28) ) (E_Binary_Operation 111 Plus (E_Name 112 (E_Identifier 113 ((*Left*) 26) ) ) (E_Binary_Operation 114 Divide (E_Binary_Operation 115 Minus (E_Name 116 (E_Identifier 117 ((*Right*) 27) ) ) (E_Name 118 (E_Identifier 119 ((*Left*) 26) ) ) ) (E_Literal 120 (Integer_Literal 2) ) ) )) 
      (S_If 121 (E_Binary_Operation 122 Less_Than (E_Name 123 (E_Indexed_Component 124 125 ((*A*) 23) (E_Name 127 (E_Identifier 128 ((*Med*) 28) ) ) ) ) (E_Name 129 (E_Identifier 130 ((*I*) 24) ) ) )
        (S_Assignment 131 (E_Identifier 132 ((*Left*) 26) ) (E_Binary_Operation 133 Plus (E_Name 134 (E_Identifier 135 ((*Med*) 28) ) ) (E_Literal 136 (Integer_Literal 1) ) ))
        (S_If 137 (E_Binary_Operation 138 Greater_Than (E_Name 139 (E_Indexed_Component 140 141 ((*A*) 23) (E_Name 143 (E_Identifier 144 ((*Med*) 28) ) ) ) ) (E_Name 145 (E_Identifier 146 ((*I*) 24) ) ) )
          (S_Assignment 147 (E_Identifier 148 ((*Right*) 27) ) (E_Binary_Operation 149 Minus (E_Name 150 (E_Identifier 151 ((*Med*) 28) ) ) (E_Literal 152 (Integer_Literal 1) ) ))
          (S_Assignment 153 (E_Identifier 154 ((*R*) 25) ) (E_Name 155 (E_Identifier 156 ((*Med*) 28) ) ))
        )
      ))
    )))))
))) :: (((*Binary_Search_Test*) 1), (0, (mkprocedure_body 2
  (* = = = Procedure Name = = = *)
  ((*Binary_Search_Test*) 1)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification 3 ((*I*) 2) Integer In) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration 4
(D_Type_Declaration 5 (Integer_Type_Declaration 6 ((*T*) 3) (Range 0 10))) 
(D_Seq_Declaration 7
(D_Type_Declaration 8 (Subtype_Declaration 9 ((*U*) 4) (Integer_Type ((*T*) 3)) (Range 1 10))) 
(D_Seq_Declaration 10
(D_Type_Declaration 11 (Array_Type_Declaration 12 ((*Ar*) 5) ((*index subtype mark*) Integer) ((*component type*) (Subtype ((*U*) 4))))) 
(D_Seq_Declaration 13
(D_Object_Declaration 14 (mkobject_declaration 15 ((*A*) 6) (Array_Type ((*Ar*) 5)) None)) 
(D_Seq_Declaration 16
(D_Object_Declaration 17 (mkobject_declaration 18 ((*R*) 7) (Integer_Type ((*T*) 3)) None)) 
(D_Seq_Declaration 19
(D_Type_Declaration 20 (Derived_Type_Declaration 21 ((*T1*) 8) Integer (Range 1 10))) 
(D_Seq_Declaration 22
(D_Type_Declaration 23 (Derived_Type_Declaration 24 ((*T2*) 9) (Integer_Type ((*T*) 3)) (Range 2 5))) 
(D_Seq_Declaration 25
(D_Type_Declaration 26 (Subtype_Declaration 27 ((*T3*) 10) Integer (Range 1 10))) 
(D_Seq_Declaration 28
(D_Type_Declaration 29 (Subtype_Declaration 30 ((*T4*) 11) Integer (Range 5 10))) 
(D_Seq_Declaration 31
(D_Type_Declaration 32 (Record_Type_Declaration 33 ((*RT*) 12) ((((*X*) 13), Integer) :: (((*Y*) 14), Integer) :: nil))) 
(D_Seq_Declaration 35
(D_Procedure_Body 36 
  (mkprocedure_body 37
    (* = = = Procedure Name = = = *)
    ((*increase*) 15)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification 38 ((*X*) 16) Integer In) :: 
    (mkparameter_specification 39 ((*Y*) 17) Integer Out) :: nil)
    (* = = = Object Declarations = = = *)
    (D_Null_Declaration)
    (* = = = Procedure Body = = = *)
      (S_Assignment 40 (E_Identifier 41 ((*Y*) 17) ) (E_Binary_Operation 42 Plus (E_Name 43 (E_Identifier 44 ((*X*) 16) ) ) (E_Literal 45 (Integer_Literal 1) ) ))
  )
) 
(D_Seq_Declaration 46
(D_Object_Declaration 48 (mkobject_declaration 49 ((*B*) 21) Boolean (Some ((E_Literal 47 (Boolean_Literal true) ))))) 
(D_Seq_Declaration 50
(D_Procedure_Body 51 
  (mkprocedure_body 52
    (* = = = Procedure Name = = = *)
    ((*Search*) 22)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification 53 ((*A*) 23) (Array_Type ((*Ar*) 5)) In) :: 
    (mkparameter_specification 54 ((*I*) 24) Integer In) :: 
    (mkparameter_specification 55 ((*R*) 25) (Integer_Type ((*T*) 3)) Out) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration 56
  (D_Object_Declaration 57 (mkobject_declaration 58 ((*Left*) 26) (Subtype ((*U*) 4)) None)) 
  (D_Seq_Declaration 59
  (D_Object_Declaration 60 (mkobject_declaration 61 ((*Right*) 27) (Subtype ((*U*) 4)) None)) 
  (D_Object_Declaration 62 (mkobject_declaration 63 ((*Med*) 28) (Subtype ((*U*) 4)) None)))))
    (* = = = Procedure Body = = = *)
      (S_Sequence 64
      (S_Assignment 65 (E_Identifier 66 ((*Left*) 26) ) (E_Literal 67 (Integer_Literal 0) )) 
      (S_Sequence 68
      (S_Assignment 69 (E_Identifier 70 ((*Right*) 27) ) (E_Literal 71 (Integer_Literal 10) )) 
      (S_Sequence 72
      (S_Assignment 73 (E_Identifier 74 ((*R*) 25) ) (E_Literal 75 (Integer_Literal 0) )) 
      (S_Sequence 76
      (S_If 77 (E_Binary_Operation 78 Or (E_Binary_Operation 79 Greater_Than (E_Name 80 (E_Indexed_Component 81 82 ((*A*) 23) (E_Binary_Operation 84 Plus (E_Name 85 (E_Identifier 86 ((*Left*) 26) ) ) (E_Literal 87 (Integer_Literal 1) ) ) ) ) (E_Name 88 (E_Identifier 89 ((*I*) 24) ) ) ) (E_Binary_Operation 90 Less_Than (E_Name 91 (E_Indexed_Component 92 93 ((*A*) 23) (E_Name 95 (E_Identifier 96 ((*Right*) 27) ) ) ) ) (E_Name 97 (E_Identifier 98 ((*I*) 24) ) ) ) )
        (S_Assignment 99 (E_Identifier 100 ((*R*) 25) ) (E_Literal 101 (Integer_Literal 0) ))
        S_Null
      ) 
      (S_While_Loop 102 (E_Binary_Operation 103 Less_Than_Or_Equal (E_Name 104 (E_Identifier 105 ((*Left*) 26) ) ) (E_Name 106 (E_Identifier 107 ((*Right*) 27) ) ) )
        (S_Sequence 108
        (S_Assignment 109 (E_Identifier 110 ((*Med*) 28) ) (E_Binary_Operation 111 Plus (E_Name 112 (E_Identifier 113 ((*Left*) 26) ) ) (E_Binary_Operation 114 Divide (E_Binary_Operation 115 Minus (E_Name 116 (E_Identifier 117 ((*Right*) 27) ) ) (E_Name 118 (E_Identifier 119 ((*Left*) 26) ) ) ) (E_Literal 120 (Integer_Literal 2) ) ) )) 
        (S_If 121 (E_Binary_Operation 122 Less_Than (E_Name 123 (E_Indexed_Component 124 125 ((*A*) 23) (E_Name 127 (E_Identifier 128 ((*Med*) 28) ) ) ) ) (E_Name 129 (E_Identifier 130 ((*I*) 24) ) ) )
          (S_Assignment 131 (E_Identifier 132 ((*Left*) 26) ) (E_Binary_Operation 133 Plus (E_Name 134 (E_Identifier 135 ((*Med*) 28) ) ) (E_Literal 136 (Integer_Literal 1) ) ))
          (S_If 137 (E_Binary_Operation 138 Greater_Than (E_Name 139 (E_Indexed_Component 140 141 ((*A*) 23) (E_Name 143 (E_Identifier 144 ((*Med*) 28) ) ) ) ) (E_Name 145 (E_Identifier 146 ((*I*) 24) ) ) )
            (S_Assignment 147 (E_Identifier 148 ((*Right*) 27) ) (E_Binary_Operation 149 Minus (E_Name 150 (E_Identifier 151 ((*Med*) 28) ) ) (E_Literal 152 (Integer_Literal 1) ) ))
            (S_Assignment 153 (E_Identifier 154 ((*R*) 25) ) (E_Name 155 (E_Identifier 156 ((*Med*) 28) ) ))
          )
        ))
      )))))
  )
) 
(D_Seq_Declaration 157
(D_Object_Declaration 159 (mkobject_declaration 160 ((*X1*) 29) (Derived_Type ((*T1*) 8)) (Some ((E_Literal 158 (Integer_Literal 2) ))))) 
(D_Seq_Declaration 161
(D_Object_Declaration 163 (mkobject_declaration 164 ((*X2*) 30) (Derived_Type ((*T2*) 9)) (Some ((E_Literal 162 (Integer_Literal 3) ))))) 
(D_Seq_Declaration 165
(D_Object_Declaration 167 (mkobject_declaration 168 ((*X3*) 31) (Subtype ((*T3*) 10)) (Some ((E_Literal 166 (Integer_Literal 4) ))))) 
(D_Object_Declaration 170 (mkobject_declaration 171 ((*X4*) 32) (Subtype ((*T4*) 11)) (Some ((E_Literal 169 (Integer_Literal 6) ))))))))))))))))))))))
  (* = = = Procedure Body = = = *)
    (S_Sequence 172
    (S_Procedure_Call 173 174 ((*increase*) 15) 
      ((E_Literal 175 (Integer_Literal 10) ) :: (E_Name 176 (E_Identifier 177 ((*X4*) 32) ) ) :: nil)
    ) 
    (S_Sequence 178
    (S_Assignment 179 (E_Identifier 180 ((*X1*) 29) ) (E_Binary_Operation 181 Plus (E_Name 182 (E_Identifier 183 ((*X1*) 29) ) ) (E_Literal 184 (Integer_Literal 1) ) )) 
    (S_Sequence 185
    (S_Assignment 186 (E_Identifier 187 ((*X2*) 30) ) (E_Binary_Operation 188 Plus (E_Name 189 (E_Identifier 190 ((*X2*) 30) ) ) (E_Literal 191 (Integer_Literal 2) ) )) 
    (S_Sequence 192
    (S_Assignment 193 (E_Identifier 194 ((*X4*) 32) ) (E_Binary_Operation 195 Plus (E_Name 196 (E_Identifier 197 ((*X3*) 31) ) ) (E_Name 198 (E_Identifier 199 ((*X4*) 32) ) ) )) 
    (S_Sequence 200
    (S_Assignment 201 (E_Indexed_Component 202 203 ((*A*) 6) (E_Literal 205 (Integer_Literal 0) ) ) (E_Literal 206 (Integer_Literal 0) )) 
    (S_Sequence 207
    (S_Assignment 208 (E_Indexed_Component 209 210 ((*A*) 6) (E_Literal 212 (Integer_Literal 1) ) ) (E_Literal 213 (Integer_Literal 10) )) 
    (S_Procedure_Call 214 215 ((*Search*) 22) 
      ((E_Name 216 (E_Identifier 217 ((*A*) 6) ) ) :: (E_Name 218 (E_Identifier 219 ((*I*) 2) ) ) :: (E_Name 220 (E_Identifier 221 ((*R*) 7) ) ) :: nil)
    )))))))
))) :: (((*increase*) 15), (1, (mkprocedure_body 37
  (* = = = Procedure Name = = = *)
  ((*increase*) 15)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification 38 ((*X*) 16) Integer In) :: 
  (mkparameter_specification 39 ((*Y*) 17) Integer Out) :: nil)
  (* = = = Object Declarations = = = *)
  (D_Null_Declaration)
  (* = = = Procedure Body = = = *)
    (S_Assignment 40 (E_Identifier 41 ((*Y*) 17) ) (E_Binary_Operation 42 Plus (E_Name 43 (E_Identifier 44 ((*X*) 16) ) ) (E_Literal 45 (Integer_Literal 1) ) ))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  ((((*RT*) 12), (Record_Type_Declaration 33 ((*RT*) 12) ((((*X*) 13), Integer) :: (((*Y*) 14), Integer) :: nil))) :: (((*T3*) 10), (Subtype_Declaration 27 ((*T3*) 10) Integer (Range 1 10))) :: (((*Ar*) 5), (Array_Type_Declaration 12 ((*Ar*) 5) ((*index subtype mark*) Integer) ((*component type*) (Subtype ((*U*) 4))))) :: (((*T4*) 11), (Subtype_Declaration 30 ((*T4*) 11) Integer (Range 5 10))) :: (((*T2*) 9), (Derived_Type_Declaration 24 ((*T2*) 9) (Integer_Type ((*T*) 3)) (Range 2 5))) :: (((*T1*) 8), (Derived_Type_Declaration 21 ((*T1*) 8) Integer (Range 1 10))) :: (((*U*) 4), (Subtype_Declaration 9 ((*U*) 4) (Integer_Type ((*T*) 3)) (Range 1 10))) :: (((*T*) 3), (Integer_Type_Declaration 6 ((*T*) 3) (Range 0 10))) :: nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((146, Integer) :: (218, Integer) :: (92, Integer) :: (101, Integer) :: (209, Integer) :: (182, (Derived_Type ((*T1*) 8))) :: (191, Integer) :: (83, (Array_Type ((*Ar*) 5))) :: (155, (Subtype ((*U*) 4))) :: (110, (Subtype ((*U*) 4))) :: (119, (Subtype ((*U*) 4))) :: (128, (Subtype ((*U*) 4))) :: (104, (Subtype ((*U*) 4))) :: (95, (Subtype ((*U*) 4))) :: (122, Boolean) :: (176, (Subtype ((*T4*) 11))) :: (194, (Subtype ((*T4*) 11))) :: (86, (Subtype ((*U*) 4))) :: (158, Integer) :: (113, (Subtype ((*U*) 4))) :: (41, Integer) :: (140, Integer) :: (149, (Integer_Type ((*T*) 3))) :: (134, (Subtype ((*U*) 4))) :: (44, Integer) :: (80, Integer) :: (89, Integer) :: (116, (Subtype ((*U*) 4))) :: (98, Integer) :: (71, Integer) :: (107, (Subtype ((*U*) 4))) :: (74, (Integer_Type ((*T*) 3))) :: (47, Boolean) :: (184, Integer) :: (175, Integer) :: (211, (Array_Type ((*Ar*) 5))) :: (166, Integer) :: (220, (Integer_Type ((*T*) 3))) :: (202, Integer) :: (142, (Array_Type ((*Ar*) 5))) :: (151, (Subtype ((*U*) 4))) :: (124, Integer) :: (205, Integer) :: (106, (Subtype ((*U*) 4))) :: (133, (Integer_Type ((*T*) 3))) :: (169, Integer) :: (115, (Integer_Type ((*T*) 3))) :: (187, (Derived_Type ((*T2*) 9))) :: (196, (Subtype ((*T3*) 10))) :: (181, (Derived_Type ((*T1*) 8))) :: (118, (Subtype ((*U*) 4))) :: (127, (Subtype ((*U*) 4))) :: (199, (Subtype ((*T4*) 11))) :: (136, Integer) :: (217, (Array_Type ((*Ar*) 5))) :: (100, (Integer_Type ((*T*) 3))) :: (91, Integer) :: (190, (Derived_Type ((*T2*) 9))) :: (145, Integer) :: (154, (Integer_Type ((*T*) 3))) :: (94, (Array_Type ((*Ar*) 5))) :: (67, Integer) :: (85, (Subtype ((*U*) 4))) :: (139, Integer) :: (130, Integer) :: (148, (Subtype ((*U*) 4))) :: (103, Boolean) :: (112, (Subtype ((*U*) 4))) :: (97, Integer) :: (79, Boolean) :: (88, Integer) :: (70, (Subtype ((*U*) 4))) :: (43, Integer) :: (189, (Derived_Type ((*T2*) 9))) :: (180, (Derived_Type ((*T1*) 8))) :: (216, (Array_Type ((*Ar*) 5))) :: (198, (Subtype ((*T4*) 11))) :: (156, (Subtype ((*U*) 4))) :: (183, (Derived_Type ((*T1*) 8))) :: (129, Integer) :: (138, Boolean) :: (219, Integer) :: (120, Integer) :: (213, Integer) :: (87, Integer) :: (96, (Subtype ((*U*) 4))) :: (177, (Subtype ((*T4*) 11))) :: (132, (Subtype ((*U*) 4))) :: (150, (Subtype ((*U*) 4))) :: (105, (Subtype ((*U*) 4))) :: (114, (Integer_Type ((*T*) 3))) :: (123, Integer) :: (204, (Array_Type ((*Ar*) 5))) :: (195, Integer) :: (78, Boolean) :: (90, Boolean) :: (45, Integer) :: (81, Integer) :: (144, (Subtype ((*U*) 4))) :: (126, (Array_Type ((*Ar*) 5))) :: (162, Integer) :: (135, (Subtype ((*U*) 4))) :: (117, (Subtype ((*U*) 4))) :: (84, (Integer_Type ((*T*) 3))) :: (75, Integer) :: (111, (Integer_Type ((*T*) 3))) :: (66, (Subtype ((*U*) 4))) :: (42, Integer) :: (221, (Integer_Type ((*T*) 3))) :: (212, Integer) :: (152, Integer) :: (188, (Derived_Type ((*T2*) 9))) :: (143, (Subtype ((*U*) 4))) :: (197, (Subtype ((*T3*) 10))) :: (206, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((146, (sloc (*Line*)46 (*Col*)19 (*EndLine*)46 (*EndCol*)19)) :: (218, (sloc (*Line*)69 (*Col*)14 (*EndLine*)69 (*EndCol*)14)) :: (92, (sloc (*Line*)37 (*Col*)28 (*EndLine*)37 (*EndCol*)36)) :: (101, (sloc (*Line*)38 (*Col*)8 (*EndLine*)38 (*EndCol*)8)) :: (209, (sloc (*Line*)68 (*Col*)4 (*EndLine*)68 (*EndCol*)7)) :: (182, (sloc (*Line*)63 (*Col*)10 (*EndLine*)63 (*EndCol*)11)) :: (191, (sloc (*Line*)64 (*Col*)15 (*EndLine*)64 (*EndCol*)15)) :: (83, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)10)) :: (155, (sloc (*Line*)49 (*Col*)14 (*EndLine*)49 (*EndCol*)16)) :: (110, (sloc (*Line*)42 (*Col*)3 (*EndLine*)42 (*EndCol*)5)) :: (119, (sloc (*Line*)42 (*Col*)26 (*EndLine*)42 (*EndCol*)29)) :: (128, (sloc (*Line*)43 (*Col*)9 (*EndLine*)43 (*EndCol*)11)) :: (104, (sloc (*Line*)41 (*Col*)13 (*EndLine*)41 (*EndCol*)16)) :: (95, (sloc (*Line*)37 (*Col*)31 (*EndLine*)37 (*EndCol*)35)) :: (122, (sloc (*Line*)43 (*Col*)6 (*EndLine*)43 (*EndCol*)16)) :: (176, (sloc (*Line*)62 (*Col*)17 (*EndLine*)62 (*EndCol*)18)) :: (194, (sloc (*Line*)65 (*Col*)4 (*EndLine*)65 (*EndCol*)5)) :: (86, (sloc (*Line*)37 (*Col*)13 (*EndLine*)37 (*EndCol*)16)) :: (158, (sloc (*Line*)56 (*Col*)14 (*EndLine*)56 (*EndCol*)14)) :: (113, (sloc (*Line*)42 (*Col*)10 (*EndLine*)42 (*EndCol*)13)) :: (41, (sloc (*Line*)23 (*Col*)7 (*EndLine*)23 (*EndCol*)7)) :: (140, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)15)) :: (149, (sloc (*Line*)47 (*Col*)18 (*EndLine*)47 (*EndCol*)24)) :: (134, (sloc (*Line*)44 (*Col*)14 (*EndLine*)44 (*EndCol*)16)) :: (44, (sloc (*Line*)23 (*Col*)12 (*EndLine*)23 (*EndCol*)12)) :: (80, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)19)) :: (89, (sloc (*Line*)37 (*Col*)23 (*EndLine*)37 (*EndCol*)23)) :: (116, (sloc (*Line*)42 (*Col*)18 (*EndLine*)42 (*EndCol*)22)) :: (98, (sloc (*Line*)37 (*Col*)40 (*EndLine*)37 (*EndCol*)40)) :: (71, (sloc (*Line*)34 (*Col*)16 (*EndLine*)34 (*EndCol*)17)) :: (107, (sloc (*Line*)41 (*Col*)21 (*EndLine*)41 (*EndCol*)25)) :: (74, (sloc (*Line*)36 (*Col*)7 (*EndLine*)36 (*EndCol*)7)) :: (47, (sloc (*Line*)25 (*Col*)18 (*EndLine*)25 (*EndCol*)21)) :: (184, (sloc (*Line*)63 (*Col*)15 (*EndLine*)63 (*EndCol*)15)) :: (175, (sloc (*Line*)62 (*Col*)13 (*EndLine*)62 (*EndCol*)14)) :: (211, (sloc (*Line*)68 (*Col*)4 (*EndLine*)68 (*EndCol*)4)) :: (166, (sloc (*Line*)58 (*Col*)14 (*EndLine*)58 (*EndCol*)14)) :: (220, (sloc (*Line*)69 (*Col*)17 (*EndLine*)69 (*EndCol*)17)) :: (202, (sloc (*Line*)67 (*Col*)4 (*EndLine*)67 (*EndCol*)7)) :: (142, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)9)) :: (151, (sloc (*Line*)47 (*Col*)18 (*EndLine*)47 (*EndCol*)20)) :: (124, (sloc (*Line*)43 (*Col*)6 (*EndLine*)43 (*EndCol*)12)) :: (205, (sloc (*Line*)67 (*Col*)6 (*EndLine*)67 (*EndCol*)6)) :: (106, (sloc (*Line*)41 (*Col*)21 (*EndLine*)41 (*EndCol*)25)) :: (133, (sloc (*Line*)44 (*Col*)14 (*EndLine*)44 (*EndCol*)20)) :: (169, (sloc (*Line*)59 (*Col*)14 (*EndLine*)59 (*EndCol*)14)) :: (115, (sloc (*Line*)42 (*Col*)18 (*EndLine*)42 (*EndCol*)29)) :: (187, (sloc (*Line*)64 (*Col*)4 (*EndLine*)64 (*EndCol*)5)) :: (196, (sloc (*Line*)65 (*Col*)10 (*EndLine*)65 (*EndCol*)11)) :: (181, (sloc (*Line*)63 (*Col*)10 (*EndLine*)63 (*EndCol*)15)) :: (118, (sloc (*Line*)42 (*Col*)26 (*EndLine*)42 (*EndCol*)29)) :: (127, (sloc (*Line*)43 (*Col*)9 (*EndLine*)43 (*EndCol*)11)) :: (199, (sloc (*Line*)65 (*Col*)15 (*EndLine*)65 (*EndCol*)16)) :: (136, (sloc (*Line*)44 (*Col*)20 (*EndLine*)44 (*EndCol*)20)) :: (217, (sloc (*Line*)69 (*Col*)11 (*EndLine*)69 (*EndCol*)11)) :: (100, (sloc (*Line*)38 (*Col*)3 (*EndLine*)38 (*EndCol*)3)) :: (91, (sloc (*Line*)37 (*Col*)28 (*EndLine*)37 (*EndCol*)36)) :: (190, (sloc (*Line*)64 (*Col*)10 (*EndLine*)64 (*EndCol*)11)) :: (145, (sloc (*Line*)46 (*Col*)19 (*EndLine*)46 (*EndCol*)19)) :: (154, (sloc (*Line*)49 (*Col*)9 (*EndLine*)49 (*EndCol*)9)) :: (94, (sloc (*Line*)37 (*Col*)28 (*EndLine*)37 (*EndCol*)28)) :: (67, (sloc (*Line*)33 (*Col*)16 (*EndLine*)33 (*EndCol*)16)) :: (85, (sloc (*Line*)37 (*Col*)13 (*EndLine*)37 (*EndCol*)16)) :: (139, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)15)) :: (130, (sloc (*Line*)43 (*Col*)16 (*EndLine*)43 (*EndCol*)16)) :: (148, (sloc (*Line*)47 (*Col*)9 (*EndLine*)47 (*EndCol*)13)) :: (103, (sloc (*Line*)41 (*Col*)13 (*EndLine*)41 (*EndCol*)25)) :: (112, (sloc (*Line*)42 (*Col*)10 (*EndLine*)42 (*EndCol*)13)) :: (97, (sloc (*Line*)37 (*Col*)40 (*EndLine*)37 (*EndCol*)40)) :: (79, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)23)) :: (88, (sloc (*Line*)37 (*Col*)23 (*EndLine*)37 (*EndCol*)23)) :: (70, (sloc (*Line*)34 (*Col*)7 (*EndLine*)34 (*EndCol*)11)) :: (43, (sloc (*Line*)23 (*Col*)12 (*EndLine*)23 (*EndCol*)12)) :: (189, (sloc (*Line*)64 (*Col*)10 (*EndLine*)64 (*EndCol*)11)) :: (180, (sloc (*Line*)63 (*Col*)4 (*EndLine*)63 (*EndCol*)5)) :: (216, (sloc (*Line*)69 (*Col*)11 (*EndLine*)69 (*EndCol*)11)) :: (198, (sloc (*Line*)65 (*Col*)15 (*EndLine*)65 (*EndCol*)16)) :: (156, (sloc (*Line*)49 (*Col*)14 (*EndLine*)49 (*EndCol*)16)) :: (183, (sloc (*Line*)63 (*Col*)10 (*EndLine*)63 (*EndCol*)11)) :: (129, (sloc (*Line*)43 (*Col*)16 (*EndLine*)43 (*EndCol*)16)) :: (138, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)19)) :: (219, (sloc (*Line*)69 (*Col*)14 (*EndLine*)69 (*EndCol*)14)) :: (120, (sloc (*Line*)42 (*Col*)34 (*EndLine*)42 (*EndCol*)34)) :: (213, (sloc (*Line*)68 (*Col*)12 (*EndLine*)68 (*EndCol*)13)) :: (87, (sloc (*Line*)37 (*Col*)18 (*EndLine*)37 (*EndCol*)18)) :: (96, (sloc (*Line*)37 (*Col*)31 (*EndLine*)37 (*EndCol*)35)) :: (177, (sloc (*Line*)62 (*Col*)17 (*EndLine*)62 (*EndCol*)18)) :: (132, (sloc (*Line*)44 (*Col*)6 (*EndLine*)44 (*EndCol*)9)) :: (150, (sloc (*Line*)47 (*Col*)18 (*EndLine*)47 (*EndCol*)20)) :: (105, (sloc (*Line*)41 (*Col*)13 (*EndLine*)41 (*EndCol*)16)) :: (114, (sloc (*Line*)42 (*Col*)17 (*EndLine*)42 (*EndCol*)34)) :: (123, (sloc (*Line*)43 (*Col*)6 (*EndLine*)43 (*EndCol*)12)) :: (204, (sloc (*Line*)67 (*Col*)4 (*EndLine*)67 (*EndCol*)4)) :: (195, (sloc (*Line*)65 (*Col*)10 (*EndLine*)65 (*EndCol*)16)) :: (78, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)40)) :: (90, (sloc (*Line*)37 (*Col*)28 (*EndLine*)37 (*EndCol*)40)) :: (45, (sloc (*Line*)23 (*Col*)16 (*EndLine*)23 (*EndCol*)16)) :: (81, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)19)) :: (144, (sloc (*Line*)46 (*Col*)12 (*EndLine*)46 (*EndCol*)14)) :: (126, (sloc (*Line*)43 (*Col*)6 (*EndLine*)43 (*EndCol*)6)) :: (162, (sloc (*Line*)57 (*Col*)14 (*EndLine*)57 (*EndCol*)14)) :: (135, (sloc (*Line*)44 (*Col*)14 (*EndLine*)44 (*EndCol*)16)) :: (117, (sloc (*Line*)42 (*Col*)18 (*EndLine*)42 (*EndCol*)22)) :: (84, (sloc (*Line*)37 (*Col*)13 (*EndLine*)37 (*EndCol*)18)) :: (75, (sloc (*Line*)36 (*Col*)12 (*EndLine*)36 (*EndCol*)12)) :: (111, (sloc (*Line*)42 (*Col*)10 (*EndLine*)42 (*EndCol*)34)) :: (66, (sloc (*Line*)33 (*Col*)7 (*EndLine*)33 (*EndCol*)10)) :: (42, (sloc (*Line*)23 (*Col*)12 (*EndLine*)23 (*EndCol*)16)) :: (221, (sloc (*Line*)69 (*Col*)17 (*EndLine*)69 (*EndCol*)17)) :: (212, (sloc (*Line*)68 (*Col*)6 (*EndLine*)68 (*EndCol*)6)) :: (152, (sloc (*Line*)47 (*Col*)24 (*EndLine*)47 (*EndCol*)24)) :: (188, (sloc (*Line*)64 (*Col*)10 (*EndLine*)64 (*EndCol*)15)) :: (143, (sloc (*Line*)46 (*Col*)12 (*EndLine*)46 (*EndCol*)14)) :: (197, (sloc (*Line*)65 (*Col*)10 (*EndLine*)65 (*EndCol*)11)) :: (206, (sloc (*Line*)67 (*Col*)12 (*EndLine*)67 (*EndCol*)12)) :: nil)
  (* = = = (6) name id to a pair of (name string, unique name string) map = = = *)
  (*/////////////////////////////////////////////////*)
  ((mkNameTable
  (*///////////////////////////////////*)
  (* = = = (1) variable names map = = = *)
  (*///////////////////////////////////*)
  ((23, ("A", "ada://parameter/Binary_Search_Test+1:11/Search+28:14/A+28:22")) :: (32, ("X4", "ada://variable/Binary_Search_Test+1:11/X4+59:4")) :: (17, ("Y", "ada://parameter/Binary_Search_Test+1:11/increase+21:14/Y+21:36")) :: (26, ("Left", "ada://variable/Binary_Search_Test+1:11/Search+28:14/Left+29:7")) :: (29, ("X1", "ada://variable/Binary_Search_Test+1:11/X1+56:4")) :: (2, ("I", "ada://parameter/Binary_Search_Test+1:11/I+1:31")) :: (14, ("Y", "ada://component/Binary_Search_Test+1:11/RT+16:9/Y+18:7")) :: (13, ("X", "ada://component/Binary_Search_Test+1:11/RT+16:9/X+17:7")) :: (31, ("X3", "ada://variable/Binary_Search_Test+1:11/X3+58:4")) :: (7, ("R", "ada://variable/Binary_Search_Test+1:11/R+9:4")) :: (16, ("X", "ada://parameter/Binary_Search_Test+1:11/increase+21:14/X+21:24")) :: (25, ("R", "ada://parameter/Binary_Search_Test+1:11/Search+28:14/R+28:43")) :: (28, ("Med", "ada://variable/Binary_Search_Test+1:11/Search+28:14/Med+31:7")) :: (27, ("Right", "ada://variable/Binary_Search_Test+1:11/Search+28:14/Right+30:7")) :: (21, ("B", "ada://variable/Binary_Search_Test+1:11/B+25:4")) :: (30, ("X2", "ada://variable/Binary_Search_Test+1:11/X2+57:4")) :: (6, ("A", "ada://variable/Binary_Search_Test+1:11/A+8:4")) :: (24, ("I", "ada://parameter/Binary_Search_Test+1:11/Search+28:14/I+28:30")) :: nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram names map = = = *)
  (*////////////////////////////////////////////*)
  ((22, ("Search", "ada://procedure_body/Binary_Search_Test+1:11/Search+28:14")) :: (1, ("Binary_Search_Test", "ada://procedure_body/Binary_Search_Test+1:11")) :: (15, ("increase", "ada://procedure_body/Binary_Search_Test+1:11/increase+21:14")) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) package names map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) type names map = = = *)
  (*/////////////////////////////////////*)
  ((8, ("T1", "ada://ordinary_type/Binary_Search_Test+1:11/T1+12:9")) :: (11, ("T4", "ada://subtype/Binary_Search_Test+1:11/T4+15:12")) :: (5, ("Ar", "ada://ordinary_type/Binary_Search_Test+1:11/Ar+6:9")) :: (4, ("U", "ada://subtype/Binary_Search_Test+1:11/U+4:12")) :: (10, ("T3", "ada://subtype/Binary_Search_Test+1:11/T3+14:12")) :: (9, ("T2", "ada://ordinary_type/Binary_Search_Test+1:11/T2+13:9")) :: (12, ("RT", "ada://ordinary_type/Binary_Search_Test+1:11/RT+16:9")) :: (3, ("T", "ada://ordinary_type/Binary_Search_Test+1:11/T+3:9")) :: nil)
))
).

Definition Coq_AST_Tree_X := 
(D_Procedure_Body_X 1 
  (mkprocedure_body_x 2
    (* = = = Procedure Name = = = *)
    ((*Binary_Search_Test*) 1)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_x 3 ((*I*) 2) Integer In) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_X 4
  (D_Type_Declaration_X 5 (Integer_Type_Declaration_X 6 ((*T*) 3) (Range_X 0 10))) 
  (D_Seq_Declaration_X 7
  (D_Type_Declaration_X 8 (Subtype_Declaration_X 9 ((*U*) 4) (Integer_Type ((*T*) 3)) (Range_X 1 10))) 
  (D_Seq_Declaration_X 10
  (D_Type_Declaration_X 11 (Array_Type_Declaration_X 12 ((*Ar*) 5) ((*index subtype mark*) Integer) ((*component type*) (Subtype ((*U*) 4))))) 
  (D_Seq_Declaration_X 13
  (D_Object_Declaration_X 14 (mkobject_declaration_x 15 ((*A*) 6) (Array_Type ((*Ar*) 5)) None)) 
  (D_Seq_Declaration_X 16
  (D_Object_Declaration_X 17 (mkobject_declaration_x 18 ((*R*) 7) (Integer_Type ((*T*) 3)) None)) 
  (D_Seq_Declaration_X 19
  (D_Type_Declaration_X 20 (Derived_Type_Declaration_X 21 ((*T1*) 8) Integer (Range_X 1 10))) 
  (D_Seq_Declaration_X 22
  (D_Type_Declaration_X 23 (Derived_Type_Declaration_X 24 ((*T2*) 9) (Integer_Type ((*T*) 3)) (Range_X 2 5))) 
  (D_Seq_Declaration_X 25
  (D_Type_Declaration_X 26 (Subtype_Declaration_X 27 ((*T3*) 10) Integer (Range_X 1 10))) 
  (D_Seq_Declaration_X 28
  (D_Type_Declaration_X 29 (Subtype_Declaration_X 30 ((*T4*) 11) Integer (Range_X 5 10))) 
  (D_Seq_Declaration_X 31
  (D_Type_Declaration_X 32 (Record_Type_Declaration_X 33 ((*RT*) 12) ((((*X*) 13), Integer) :: (((*Y*) 14), Integer) :: nil))) 
  (D_Seq_Declaration_X 35
  (D_Procedure_Body_X 36 
    (mkprocedure_body_x 37
      (* = = = Procedure Name = = = *)
      ((*increase*) 15)
      (* = = = Formal Parameters = = = *)
      (
      (mkparameter_specification_x 38 ((*X*) 16) Integer In) :: 
      (mkparameter_specification_x 39 ((*Y*) 17) Integer Out) :: nil)
      (* = = = Object Declarations = = = *)
      (D_Null_Declaration_X)
      (* = = = Procedure Body = = = *)
        (S_Assignment_X 40 (E_Identifier_X 41 ((*Y*) 17) (nil)) (E_Binary_Operation_X 42 Plus (E_Name_X 43 (E_Identifier_X 44 ((*X*) 16) (nil)) (nil)) (E_Literal_X 45 (Integer_Literal 1) (nil)) (Do_Overflow_Check :: nil)))
    )
  ) 
  (D_Seq_Declaration_X 46
  (D_Object_Declaration_X 48 (mkobject_declaration_x 49 ((*B*) 21) Boolean (Some ((E_Literal_X 47 (Boolean_Literal true) (nil)))))) 
  (D_Seq_Declaration_X 50
  (D_Procedure_Body_X 51 
    (mkprocedure_body_x 52
      (* = = = Procedure Name = = = *)
      ((*Search*) 22)
      (* = = = Formal Parameters = = = *)
      (
      (mkparameter_specification_x 53 ((*A*) 23) (Array_Type ((*Ar*) 5)) In) :: 
      (mkparameter_specification_x 54 ((*I*) 24) Integer In) :: 
      (mkparameter_specification_x 55 ((*R*) 25) (Integer_Type ((*T*) 3)) Out) :: nil)
      (* = = = Object Declarations = = = *)
      ((D_Seq_Declaration_X 56
    (D_Object_Declaration_X 57 (mkobject_declaration_x 58 ((*Left*) 26) (Subtype ((*U*) 4)) None)) 
    (D_Seq_Declaration_X 59
    (D_Object_Declaration_X 60 (mkobject_declaration_x 61 ((*Right*) 27) (Subtype ((*U*) 4)) None)) 
    (D_Object_Declaration_X 62 (mkobject_declaration_x 63 ((*Med*) 28) (Subtype ((*U*) 4)) None)))))
      (* = = = Procedure Body = = = *)
        (S_Sequence_X 64
        (S_Assignment_X 65 (E_Identifier_X 66 ((*Left*) 26) (nil)) (E_Literal_X 67 (Integer_Literal 0) (nil))) 
        (S_Sequence_X 68
        (S_Assignment_X 69 (E_Identifier_X 70 ((*Right*) 27) (nil)) (E_Literal_X 71 (Integer_Literal 10) (nil))) 
        (S_Sequence_X 72
        (S_Assignment_X 73 (E_Identifier_X 74 ((*R*) 25) (nil)) (E_Literal_X 75 (Integer_Literal 0) (nil))) 
        (S_Sequence_X 76
        (S_If_X 77 (E_Binary_Operation_X 78 Or (E_Binary_Operation_X 79 Greater_Than (E_Name_X 80 (E_Indexed_Component_X 81 82 ((*A*) 23) (E_Binary_Operation_X 84 Plus (E_Name_X 85 (E_Identifier_X 86 ((*Left*) 26) (nil)) (nil)) (E_Literal_X 87 (Integer_Literal 1) (nil)) (Do_Range_Check :: nil)) (nil)) (nil)) (E_Name_X 88 (E_Identifier_X 89 ((*I*) 24) (nil)) (nil)) (nil)) (E_Binary_Operation_X 90 Less_Than (E_Name_X 91 (E_Indexed_Component_X 92 93 ((*A*) 23) (E_Name_X 95 (E_Identifier_X 96 ((*Right*) 27) (nil)) (nil)) (nil)) (nil)) (E_Name_X 97 (E_Identifier_X 98 ((*I*) 24) (nil)) (nil)) (nil)) (nil))
          (S_Assignment_X 99 (E_Identifier_X 100 ((*R*) 25) (nil)) (E_Literal_X 101 (Integer_Literal 0) (nil)))
          S_Null_X
        ) 
        (S_While_Loop_X 102 (E_Binary_Operation_X 103 Less_Than_Or_Equal (E_Name_X 104 (E_Identifier_X 105 ((*Left*) 26) (nil)) (nil)) (E_Name_X 106 (E_Identifier_X 107 ((*Right*) 27) (nil)) (nil)) (nil))
          (S_Sequence_X 108
          (S_Assignment_X 109 (E_Identifier_X 110 ((*Med*) 28) (nil)) (E_Binary_Operation_X 111 Plus (E_Name_X 112 (E_Identifier_X 113 ((*Left*) 26) (nil)) (nil)) (E_Binary_Operation_X 114 Divide (E_Binary_Operation_X 115 Minus (E_Name_X 116 (E_Identifier_X 117 ((*Right*) 27) (nil)) (nil)) (E_Name_X 118 (E_Identifier_X 119 ((*Left*) 26) (nil)) (nil)) (nil)) (E_Literal_X 120 (Integer_Literal 2) (nil)) (Do_Division_Check :: nil)) (Do_Range_Check :: nil))) 
          (S_If_X 121 (E_Binary_Operation_X 122 Less_Than (E_Name_X 123 (E_Indexed_Component_X 124 125 ((*A*) 23) (E_Name_X 127 (E_Identifier_X 128 ((*Med*) 28) (nil)) (nil)) (nil)) (nil)) (E_Name_X 129 (E_Identifier_X 130 ((*I*) 24) (nil)) (nil)) (nil))
            (S_Assignment_X 131 (E_Identifier_X 132 ((*Left*) 26) (nil)) (E_Binary_Operation_X 133 Plus (E_Name_X 134 (E_Identifier_X 135 ((*Med*) 28) (nil)) (nil)) (E_Literal_X 136 (Integer_Literal 1) (nil)) (Do_Range_Check :: nil)))
            (S_If_X 137 (E_Binary_Operation_X 138 Greater_Than (E_Name_X 139 (E_Indexed_Component_X 140 141 ((*A*) 23) (E_Name_X 143 (E_Identifier_X 144 ((*Med*) 28) (nil)) (nil)) (nil)) (nil)) (E_Name_X 145 (E_Identifier_X 146 ((*I*) 24) (nil)) (nil)) (nil))
              (S_Assignment_X 147 (E_Identifier_X 148 ((*Right*) 27) (nil)) (E_Binary_Operation_X 149 Minus (E_Name_X 150 (E_Identifier_X 151 ((*Med*) 28) (nil)) (nil)) (E_Literal_X 152 (Integer_Literal 1) (nil)) (Do_Range_Check :: nil)))
              (S_Assignment_X 153 (E_Identifier_X 154 ((*R*) 25) (nil)) (E_Name_X 155 (E_Identifier_X 156 ((*Med*) 28) (nil)) (nil)))
            )
          ))
        )))))
    )
  ) 
  (D_Seq_Declaration_X 157
  (D_Object_Declaration_X 159 (mkobject_declaration_x 160 ((*X1*) 29) (Derived_Type ((*T1*) 8)) (Some ((E_Literal_X 158 (Integer_Literal 2) (nil)))))) 
  (D_Seq_Declaration_X 161
  (D_Object_Declaration_X 163 (mkobject_declaration_x 164 ((*X2*) 30) (Derived_Type ((*T2*) 9)) (Some ((E_Literal_X 162 (Integer_Literal 3) (nil)))))) 
  (D_Seq_Declaration_X 165
  (D_Object_Declaration_X 167 (mkobject_declaration_x 168 ((*X3*) 31) (Subtype ((*T3*) 10)) (Some ((E_Literal_X 166 (Integer_Literal 4) (nil)))))) 
  (D_Object_Declaration_X 170 (mkobject_declaration_x 171 ((*X4*) 32) (Subtype ((*T4*) 11)) (Some ((E_Literal_X 169 (Integer_Literal 6) (nil)))))))))))))))))))))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_X 172
      (S_Procedure_Call_X 173 174 ((*increase*) 15) 
        ((E_Literal_X 175 (Integer_Literal 10) (nil)) :: (E_Name_X 176 (E_Identifier_X 177 ((*X4*) 32) (Do_Range_Check :: nil)) (nil)) :: nil)
      ) 
      (S_Sequence_X 178
      (S_Assignment_X 179 (E_Identifier_X 180 ((*X1*) 29) (nil)) (E_Binary_Operation_X 181 Plus (E_Name_X 182 (E_Identifier_X 183 ((*X1*) 29) (nil)) (nil)) (E_Literal_X 184 (Integer_Literal 1) (nil)) (Do_Range_Check :: nil))) 
      (S_Sequence_X 185
      (S_Assignment_X 186 (E_Identifier_X 187 ((*X2*) 30) (nil)) (E_Binary_Operation_X 188 Plus (E_Name_X 189 (E_Identifier_X 190 ((*X2*) 30) (nil)) (nil)) (E_Literal_X 191 (Integer_Literal 2) (nil)) (Do_Range_Check :: nil))) 
      (S_Sequence_X 192
      (S_Assignment_X 193 (E_Identifier_X 194 ((*X4*) 32) (nil)) (E_Binary_Operation_X 195 Plus (E_Name_X 196 (E_Identifier_X 197 ((*X3*) 31) (nil)) (nil)) (E_Name_X 198 (E_Identifier_X 199 ((*X4*) 32) (nil)) (nil)) (Do_Range_Check :: nil))) 
      (S_Sequence_X 200
      (S_Assignment_X 201 (E_Indexed_Component_X 202 203 ((*A*) 6) (E_Literal_X 205 (Integer_Literal 0) (nil)) (nil)) (E_Literal_X 206 (Integer_Literal 0) (nil))) 
      (S_Sequence_X 207
      (S_Assignment_X 208 (E_Indexed_Component_X 209 210 ((*A*) 6) (E_Literal_X 212 (Integer_Literal 1) (nil)) (nil)) (E_Literal_X 213 (Integer_Literal 10) (nil))) 
      (S_Procedure_Call_X 214 215 ((*Search*) 22) 
        ((E_Name_X 216 (E_Identifier_X 217 ((*A*) 6) (nil)) (nil)) :: (E_Name_X 218 (E_Identifier_X 219 ((*I*) 2) (nil)) (nil)) :: (E_Name_X 220 (E_Identifier_X 221 ((*R*) 7) (nil)) (nil)) :: nil)
      )))))))
  )
).

Definition Symbol_Table_X := 
(mkSymbolTable_x
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Search*) 22), (1, (mkprocedure_body_x 52
  (* = = = Procedure Name = = = *)
  ((*Search*) 22)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_x 53 ((*A*) 23) (Array_Type ((*Ar*) 5)) In) :: 
  (mkparameter_specification_x 54 ((*I*) 24) Integer In) :: 
  (mkparameter_specification_x 55 ((*R*) 25) (Integer_Type ((*T*) 3)) Out) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_X 56
(D_Object_Declaration_X 57 (mkobject_declaration_x 58 ((*Left*) 26) (Subtype ((*U*) 4)) None)) 
(D_Seq_Declaration_X 59
(D_Object_Declaration_X 60 (mkobject_declaration_x 61 ((*Right*) 27) (Subtype ((*U*) 4)) None)) 
(D_Object_Declaration_X 62 (mkobject_declaration_x 63 ((*Med*) 28) (Subtype ((*U*) 4)) None)))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_X 64
    (S_Assignment_X 65 (E_Identifier_X 66 ((*Left*) 26) (nil)) (E_Literal_X 67 (Integer_Literal 0) (nil))) 
    (S_Sequence_X 68
    (S_Assignment_X 69 (E_Identifier_X 70 ((*Right*) 27) (nil)) (E_Literal_X 71 (Integer_Literal 10) (nil))) 
    (S_Sequence_X 72
    (S_Assignment_X 73 (E_Identifier_X 74 ((*R*) 25) (nil)) (E_Literal_X 75 (Integer_Literal 0) (nil))) 
    (S_Sequence_X 76
    (S_If_X 77 (E_Binary_Operation_X 78 Or (E_Binary_Operation_X 79 Greater_Than (E_Name_X 80 (E_Indexed_Component_X 81 82 ((*A*) 23) (E_Binary_Operation_X 84 Plus (E_Name_X 85 (E_Identifier_X 86 ((*Left*) 26) (nil)) (nil)) (E_Literal_X 87 (Integer_Literal 1) (nil)) (Do_Range_Check :: nil)) (nil)) (nil)) (E_Name_X 88 (E_Identifier_X 89 ((*I*) 24) (nil)) (nil)) (nil)) (E_Binary_Operation_X 90 Less_Than (E_Name_X 91 (E_Indexed_Component_X 92 93 ((*A*) 23) (E_Name_X 95 (E_Identifier_X 96 ((*Right*) 27) (nil)) (nil)) (nil)) (nil)) (E_Name_X 97 (E_Identifier_X 98 ((*I*) 24) (nil)) (nil)) (nil)) (nil))
      (S_Assignment_X 99 (E_Identifier_X 100 ((*R*) 25) (nil)) (E_Literal_X 101 (Integer_Literal 0) (nil)))
      S_Null_X
    ) 
    (S_While_Loop_X 102 (E_Binary_Operation_X 103 Less_Than_Or_Equal (E_Name_X 104 (E_Identifier_X 105 ((*Left*) 26) (nil)) (nil)) (E_Name_X 106 (E_Identifier_X 107 ((*Right*) 27) (nil)) (nil)) (nil))
      (S_Sequence_X 108
      (S_Assignment_X 109 (E_Identifier_X 110 ((*Med*) 28) (nil)) (E_Binary_Operation_X 111 Plus (E_Name_X 112 (E_Identifier_X 113 ((*Left*) 26) (nil)) (nil)) (E_Binary_Operation_X 114 Divide (E_Binary_Operation_X 115 Minus (E_Name_X 116 (E_Identifier_X 117 ((*Right*) 27) (nil)) (nil)) (E_Name_X 118 (E_Identifier_X 119 ((*Left*) 26) (nil)) (nil)) (nil)) (E_Literal_X 120 (Integer_Literal 2) (nil)) (Do_Division_Check :: nil)) (Do_Range_Check :: nil))) 
      (S_If_X 121 (E_Binary_Operation_X 122 Less_Than (E_Name_X 123 (E_Indexed_Component_X 124 125 ((*A*) 23) (E_Name_X 127 (E_Identifier_X 128 ((*Med*) 28) (nil)) (nil)) (nil)) (nil)) (E_Name_X 129 (E_Identifier_X 130 ((*I*) 24) (nil)) (nil)) (nil))
        (S_Assignment_X 131 (E_Identifier_X 132 ((*Left*) 26) (nil)) (E_Binary_Operation_X 133 Plus (E_Name_X 134 (E_Identifier_X 135 ((*Med*) 28) (nil)) (nil)) (E_Literal_X 136 (Integer_Literal 1) (nil)) (Do_Range_Check :: nil)))
        (S_If_X 137 (E_Binary_Operation_X 138 Greater_Than (E_Name_X 139 (E_Indexed_Component_X 140 141 ((*A*) 23) (E_Name_X 143 (E_Identifier_X 144 ((*Med*) 28) (nil)) (nil)) (nil)) (nil)) (E_Name_X 145 (E_Identifier_X 146 ((*I*) 24) (nil)) (nil)) (nil))
          (S_Assignment_X 147 (E_Identifier_X 148 ((*Right*) 27) (nil)) (E_Binary_Operation_X 149 Minus (E_Name_X 150 (E_Identifier_X 151 ((*Med*) 28) (nil)) (nil)) (E_Literal_X 152 (Integer_Literal 1) (nil)) (Do_Range_Check :: nil)))
          (S_Assignment_X 153 (E_Identifier_X 154 ((*R*) 25) (nil)) (E_Name_X 155 (E_Identifier_X 156 ((*Med*) 28) (nil)) (nil)))
        )
      ))
    )))))
))) :: (((*Binary_Search_Test*) 1), (0, (mkprocedure_body_x 2
  (* = = = Procedure Name = = = *)
  ((*Binary_Search_Test*) 1)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_x 3 ((*I*) 2) Integer In) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_X 4
(D_Type_Declaration_X 5 (Integer_Type_Declaration_X 6 ((*T*) 3) (Range_X 0 10))) 
(D_Seq_Declaration_X 7
(D_Type_Declaration_X 8 (Subtype_Declaration_X 9 ((*U*) 4) (Integer_Type ((*T*) 3)) (Range_X 1 10))) 
(D_Seq_Declaration_X 10
(D_Type_Declaration_X 11 (Array_Type_Declaration_X 12 ((*Ar*) 5) ((*index subtype mark*) Integer) ((*component type*) (Subtype ((*U*) 4))))) 
(D_Seq_Declaration_X 13
(D_Object_Declaration_X 14 (mkobject_declaration_x 15 ((*A*) 6) (Array_Type ((*Ar*) 5)) None)) 
(D_Seq_Declaration_X 16
(D_Object_Declaration_X 17 (mkobject_declaration_x 18 ((*R*) 7) (Integer_Type ((*T*) 3)) None)) 
(D_Seq_Declaration_X 19
(D_Type_Declaration_X 20 (Derived_Type_Declaration_X 21 ((*T1*) 8) Integer (Range_X 1 10))) 
(D_Seq_Declaration_X 22
(D_Type_Declaration_X 23 (Derived_Type_Declaration_X 24 ((*T2*) 9) (Integer_Type ((*T*) 3)) (Range_X 2 5))) 
(D_Seq_Declaration_X 25
(D_Type_Declaration_X 26 (Subtype_Declaration_X 27 ((*T3*) 10) Integer (Range_X 1 10))) 
(D_Seq_Declaration_X 28
(D_Type_Declaration_X 29 (Subtype_Declaration_X 30 ((*T4*) 11) Integer (Range_X 5 10))) 
(D_Seq_Declaration_X 31
(D_Type_Declaration_X 32 (Record_Type_Declaration_X 33 ((*RT*) 12) ((((*X*) 13), Integer) :: (((*Y*) 14), Integer) :: nil))) 
(D_Seq_Declaration_X 35
(D_Procedure_Body_X 36 
  (mkprocedure_body_x 37
    (* = = = Procedure Name = = = *)
    ((*increase*) 15)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_x 38 ((*X*) 16) Integer In) :: 
    (mkparameter_specification_x 39 ((*Y*) 17) Integer Out) :: nil)
    (* = = = Object Declarations = = = *)
    (D_Null_Declaration_X)
    (* = = = Procedure Body = = = *)
      (S_Assignment_X 40 (E_Identifier_X 41 ((*Y*) 17) (nil)) (E_Binary_Operation_X 42 Plus (E_Name_X 43 (E_Identifier_X 44 ((*X*) 16) (nil)) (nil)) (E_Literal_X 45 (Integer_Literal 1) (nil)) (Do_Overflow_Check :: nil)))
  )
) 
(D_Seq_Declaration_X 46
(D_Object_Declaration_X 48 (mkobject_declaration_x 49 ((*B*) 21) Boolean (Some ((E_Literal_X 47 (Boolean_Literal true) (nil)))))) 
(D_Seq_Declaration_X 50
(D_Procedure_Body_X 51 
  (mkprocedure_body_x 52
    (* = = = Procedure Name = = = *)
    ((*Search*) 22)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_x 53 ((*A*) 23) (Array_Type ((*Ar*) 5)) In) :: 
    (mkparameter_specification_x 54 ((*I*) 24) Integer In) :: 
    (mkparameter_specification_x 55 ((*R*) 25) (Integer_Type ((*T*) 3)) Out) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_X 56
  (D_Object_Declaration_X 57 (mkobject_declaration_x 58 ((*Left*) 26) (Subtype ((*U*) 4)) None)) 
  (D_Seq_Declaration_X 59
  (D_Object_Declaration_X 60 (mkobject_declaration_x 61 ((*Right*) 27) (Subtype ((*U*) 4)) None)) 
  (D_Object_Declaration_X 62 (mkobject_declaration_x 63 ((*Med*) 28) (Subtype ((*U*) 4)) None)))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_X 64
      (S_Assignment_X 65 (E_Identifier_X 66 ((*Left*) 26) (nil)) (E_Literal_X 67 (Integer_Literal 0) (nil))) 
      (S_Sequence_X 68
      (S_Assignment_X 69 (E_Identifier_X 70 ((*Right*) 27) (nil)) (E_Literal_X 71 (Integer_Literal 10) (nil))) 
      (S_Sequence_X 72
      (S_Assignment_X 73 (E_Identifier_X 74 ((*R*) 25) (nil)) (E_Literal_X 75 (Integer_Literal 0) (nil))) 
      (S_Sequence_X 76
      (S_If_X 77 (E_Binary_Operation_X 78 Or (E_Binary_Operation_X 79 Greater_Than (E_Name_X 80 (E_Indexed_Component_X 81 82 ((*A*) 23) (E_Binary_Operation_X 84 Plus (E_Name_X 85 (E_Identifier_X 86 ((*Left*) 26) (nil)) (nil)) (E_Literal_X 87 (Integer_Literal 1) (nil)) (Do_Range_Check :: nil)) (nil)) (nil)) (E_Name_X 88 (E_Identifier_X 89 ((*I*) 24) (nil)) (nil)) (nil)) (E_Binary_Operation_X 90 Less_Than (E_Name_X 91 (E_Indexed_Component_X 92 93 ((*A*) 23) (E_Name_X 95 (E_Identifier_X 96 ((*Right*) 27) (nil)) (nil)) (nil)) (nil)) (E_Name_X 97 (E_Identifier_X 98 ((*I*) 24) (nil)) (nil)) (nil)) (nil))
        (S_Assignment_X 99 (E_Identifier_X 100 ((*R*) 25) (nil)) (E_Literal_X 101 (Integer_Literal 0) (nil)))
        S_Null_X
      ) 
      (S_While_Loop_X 102 (E_Binary_Operation_X 103 Less_Than_Or_Equal (E_Name_X 104 (E_Identifier_X 105 ((*Left*) 26) (nil)) (nil)) (E_Name_X 106 (E_Identifier_X 107 ((*Right*) 27) (nil)) (nil)) (nil))
        (S_Sequence_X 108
        (S_Assignment_X 109 (E_Identifier_X 110 ((*Med*) 28) (nil)) (E_Binary_Operation_X 111 Plus (E_Name_X 112 (E_Identifier_X 113 ((*Left*) 26) (nil)) (nil)) (E_Binary_Operation_X 114 Divide (E_Binary_Operation_X 115 Minus (E_Name_X 116 (E_Identifier_X 117 ((*Right*) 27) (nil)) (nil)) (E_Name_X 118 (E_Identifier_X 119 ((*Left*) 26) (nil)) (nil)) (nil)) (E_Literal_X 120 (Integer_Literal 2) (nil)) (Do_Division_Check :: nil)) (Do_Range_Check :: nil))) 
        (S_If_X 121 (E_Binary_Operation_X 122 Less_Than (E_Name_X 123 (E_Indexed_Component_X 124 125 ((*A*) 23) (E_Name_X 127 (E_Identifier_X 128 ((*Med*) 28) (nil)) (nil)) (nil)) (nil)) (E_Name_X 129 (E_Identifier_X 130 ((*I*) 24) (nil)) (nil)) (nil))
          (S_Assignment_X 131 (E_Identifier_X 132 ((*Left*) 26) (nil)) (E_Binary_Operation_X 133 Plus (E_Name_X 134 (E_Identifier_X 135 ((*Med*) 28) (nil)) (nil)) (E_Literal_X 136 (Integer_Literal 1) (nil)) (Do_Range_Check :: nil)))
          (S_If_X 137 (E_Binary_Operation_X 138 Greater_Than (E_Name_X 139 (E_Indexed_Component_X 140 141 ((*A*) 23) (E_Name_X 143 (E_Identifier_X 144 ((*Med*) 28) (nil)) (nil)) (nil)) (nil)) (E_Name_X 145 (E_Identifier_X 146 ((*I*) 24) (nil)) (nil)) (nil))
            (S_Assignment_X 147 (E_Identifier_X 148 ((*Right*) 27) (nil)) (E_Binary_Operation_X 149 Minus (E_Name_X 150 (E_Identifier_X 151 ((*Med*) 28) (nil)) (nil)) (E_Literal_X 152 (Integer_Literal 1) (nil)) (Do_Range_Check :: nil)))
            (S_Assignment_X 153 (E_Identifier_X 154 ((*R*) 25) (nil)) (E_Name_X 155 (E_Identifier_X 156 ((*Med*) 28) (nil)) (nil)))
          )
        ))
      )))))
  )
) 
(D_Seq_Declaration_X 157
(D_Object_Declaration_X 159 (mkobject_declaration_x 160 ((*X1*) 29) (Derived_Type ((*T1*) 8)) (Some ((E_Literal_X 158 (Integer_Literal 2) (nil)))))) 
(D_Seq_Declaration_X 161
(D_Object_Declaration_X 163 (mkobject_declaration_x 164 ((*X2*) 30) (Derived_Type ((*T2*) 9)) (Some ((E_Literal_X 162 (Integer_Literal 3) (nil)))))) 
(D_Seq_Declaration_X 165
(D_Object_Declaration_X 167 (mkobject_declaration_x 168 ((*X3*) 31) (Subtype ((*T3*) 10)) (Some ((E_Literal_X 166 (Integer_Literal 4) (nil)))))) 
(D_Object_Declaration_X 170 (mkobject_declaration_x 171 ((*X4*) 32) (Subtype ((*T4*) 11)) (Some ((E_Literal_X 169 (Integer_Literal 6) (nil)))))))))))))))))))))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_X 172
    (S_Procedure_Call_X 173 174 ((*increase*) 15) 
      ((E_Literal_X 175 (Integer_Literal 10) (nil)) :: (E_Name_X 176 (E_Identifier_X 177 ((*X4*) 32) (Do_Range_Check :: nil)) (nil)) :: nil)
    ) 
    (S_Sequence_X 178
    (S_Assignment_X 179 (E_Identifier_X 180 ((*X1*) 29) (nil)) (E_Binary_Operation_X 181 Plus (E_Name_X 182 (E_Identifier_X 183 ((*X1*) 29) (nil)) (nil)) (E_Literal_X 184 (Integer_Literal 1) (nil)) (Do_Range_Check :: nil))) 
    (S_Sequence_X 185
    (S_Assignment_X 186 (E_Identifier_X 187 ((*X2*) 30) (nil)) (E_Binary_Operation_X 188 Plus (E_Name_X 189 (E_Identifier_X 190 ((*X2*) 30) (nil)) (nil)) (E_Literal_X 191 (Integer_Literal 2) (nil)) (Do_Range_Check :: nil))) 
    (S_Sequence_X 192
    (S_Assignment_X 193 (E_Identifier_X 194 ((*X4*) 32) (nil)) (E_Binary_Operation_X 195 Plus (E_Name_X 196 (E_Identifier_X 197 ((*X3*) 31) (nil)) (nil)) (E_Name_X 198 (E_Identifier_X 199 ((*X4*) 32) (nil)) (nil)) (Do_Range_Check :: nil))) 
    (S_Sequence_X 200
    (S_Assignment_X 201 (E_Indexed_Component_X 202 203 ((*A*) 6) (E_Literal_X 205 (Integer_Literal 0) (nil)) (nil)) (E_Literal_X 206 (Integer_Literal 0) (nil))) 
    (S_Sequence_X 207
    (S_Assignment_X 208 (E_Indexed_Component_X 209 210 ((*A*) 6) (E_Literal_X 212 (Integer_Literal 1) (nil)) (nil)) (E_Literal_X 213 (Integer_Literal 10) (nil))) 
    (S_Procedure_Call_X 214 215 ((*Search*) 22) 
      ((E_Name_X 216 (E_Identifier_X 217 ((*A*) 6) (nil)) (nil)) :: (E_Name_X 218 (E_Identifier_X 219 ((*I*) 2) (nil)) (nil)) :: (E_Name_X 220 (E_Identifier_X 221 ((*R*) 7) (nil)) (nil)) :: nil)
    )))))))
))) :: (((*increase*) 15), (1, (mkprocedure_body_x 37
  (* = = = Procedure Name = = = *)
  ((*increase*) 15)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_x 38 ((*X*) 16) Integer In) :: 
  (mkparameter_specification_x 39 ((*Y*) 17) Integer Out) :: nil)
  (* = = = Object Declarations = = = *)
  (D_Null_Declaration_X)
  (* = = = Procedure Body = = = *)
    (S_Assignment_X 40 (E_Identifier_X 41 ((*Y*) 17) (nil)) (E_Binary_Operation_X 42 Plus (E_Name_X 43 (E_Identifier_X 44 ((*X*) 16) (nil)) (nil)) (E_Literal_X 45 (Integer_Literal 1) (nil)) (Do_Overflow_Check :: nil)))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  ((((*RT*) 12), (Record_Type_Declaration_X 33 ((*RT*) 12) ((((*X*) 13), Integer) :: (((*Y*) 14), Integer) :: nil))) :: (((*T3*) 10), (Subtype_Declaration_X 27 ((*T3*) 10) Integer (Range_X 1 10))) :: (((*Ar*) 5), (Array_Type_Declaration_X 12 ((*Ar*) 5) ((*index subtype mark*) Integer) ((*component type*) (Subtype ((*U*) 4))))) :: (((*T4*) 11), (Subtype_Declaration_X 30 ((*T4*) 11) Integer (Range_X 5 10))) :: (((*T2*) 9), (Derived_Type_Declaration_X 24 ((*T2*) 9) (Integer_Type ((*T*) 3)) (Range_X 2 5))) :: (((*T1*) 8), (Derived_Type_Declaration_X 21 ((*T1*) 8) Integer (Range_X 1 10))) :: (((*U*) 4), (Subtype_Declaration_X 9 ((*U*) 4) (Integer_Type ((*T*) 3)) (Range_X 1 10))) :: (((*T*) 3), (Integer_Type_Declaration_X 6 ((*T*) 3) (Range_X 0 10))) :: nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((146, Integer) :: (218, Integer) :: (92, Integer) :: (101, Integer) :: (209, Integer) :: (182, (Derived_Type ((*T1*) 8))) :: (191, Integer) :: (83, (Array_Type ((*Ar*) 5))) :: (155, (Subtype ((*U*) 4))) :: (110, (Subtype ((*U*) 4))) :: (119, (Subtype ((*U*) 4))) :: (128, (Subtype ((*U*) 4))) :: (104, (Subtype ((*U*) 4))) :: (95, (Subtype ((*U*) 4))) :: (122, Boolean) :: (176, (Subtype ((*T4*) 11))) :: (194, (Subtype ((*T4*) 11))) :: (86, (Subtype ((*U*) 4))) :: (158, Integer) :: (113, (Subtype ((*U*) 4))) :: (41, Integer) :: (140, Integer) :: (149, (Integer_Type ((*T*) 3))) :: (134, (Subtype ((*U*) 4))) :: (44, Integer) :: (80, Integer) :: (89, Integer) :: (116, (Subtype ((*U*) 4))) :: (98, Integer) :: (71, Integer) :: (107, (Subtype ((*U*) 4))) :: (74, (Integer_Type ((*T*) 3))) :: (47, Boolean) :: (184, Integer) :: (175, Integer) :: (211, (Array_Type ((*Ar*) 5))) :: (166, Integer) :: (220, (Integer_Type ((*T*) 3))) :: (202, Integer) :: (142, (Array_Type ((*Ar*) 5))) :: (151, (Subtype ((*U*) 4))) :: (124, Integer) :: (205, Integer) :: (106, (Subtype ((*U*) 4))) :: (133, (Integer_Type ((*T*) 3))) :: (169, Integer) :: (115, (Integer_Type ((*T*) 3))) :: (187, (Derived_Type ((*T2*) 9))) :: (196, (Subtype ((*T3*) 10))) :: (181, (Derived_Type ((*T1*) 8))) :: (118, (Subtype ((*U*) 4))) :: (127, (Subtype ((*U*) 4))) :: (199, (Subtype ((*T4*) 11))) :: (136, Integer) :: (217, (Array_Type ((*Ar*) 5))) :: (100, (Integer_Type ((*T*) 3))) :: (91, Integer) :: (190, (Derived_Type ((*T2*) 9))) :: (145, Integer) :: (154, (Integer_Type ((*T*) 3))) :: (94, (Array_Type ((*Ar*) 5))) :: (67, Integer) :: (85, (Subtype ((*U*) 4))) :: (139, Integer) :: (130, Integer) :: (148, (Subtype ((*U*) 4))) :: (103, Boolean) :: (112, (Subtype ((*U*) 4))) :: (97, Integer) :: (79, Boolean) :: (88, Integer) :: (70, (Subtype ((*U*) 4))) :: (43, Integer) :: (189, (Derived_Type ((*T2*) 9))) :: (180, (Derived_Type ((*T1*) 8))) :: (216, (Array_Type ((*Ar*) 5))) :: (198, (Subtype ((*T4*) 11))) :: (156, (Subtype ((*U*) 4))) :: (183, (Derived_Type ((*T1*) 8))) :: (129, Integer) :: (138, Boolean) :: (219, Integer) :: (120, Integer) :: (213, Integer) :: (87, Integer) :: (96, (Subtype ((*U*) 4))) :: (177, (Subtype ((*T4*) 11))) :: (132, (Subtype ((*U*) 4))) :: (150, (Subtype ((*U*) 4))) :: (105, (Subtype ((*U*) 4))) :: (114, (Integer_Type ((*T*) 3))) :: (123, Integer) :: (204, (Array_Type ((*Ar*) 5))) :: (195, Integer) :: (78, Boolean) :: (90, Boolean) :: (45, Integer) :: (81, Integer) :: (144, (Subtype ((*U*) 4))) :: (126, (Array_Type ((*Ar*) 5))) :: (162, Integer) :: (135, (Subtype ((*U*) 4))) :: (117, (Subtype ((*U*) 4))) :: (84, (Integer_Type ((*T*) 3))) :: (75, Integer) :: (111, (Integer_Type ((*T*) 3))) :: (66, (Subtype ((*U*) 4))) :: (42, Integer) :: (221, (Integer_Type ((*T*) 3))) :: (212, Integer) :: (152, Integer) :: (188, (Derived_Type ((*T2*) 9))) :: (143, (Subtype ((*U*) 4))) :: (197, (Subtype ((*T3*) 10))) :: (206, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((146, (sloc (*Line*)46 (*Col*)19 (*EndLine*)46 (*EndCol*)19)) :: (218, (sloc (*Line*)69 (*Col*)14 (*EndLine*)69 (*EndCol*)14)) :: (92, (sloc (*Line*)37 (*Col*)28 (*EndLine*)37 (*EndCol*)36)) :: (101, (sloc (*Line*)38 (*Col*)8 (*EndLine*)38 (*EndCol*)8)) :: (209, (sloc (*Line*)68 (*Col*)4 (*EndLine*)68 (*EndCol*)7)) :: (182, (sloc (*Line*)63 (*Col*)10 (*EndLine*)63 (*EndCol*)11)) :: (191, (sloc (*Line*)64 (*Col*)15 (*EndLine*)64 (*EndCol*)15)) :: (83, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)10)) :: (155, (sloc (*Line*)49 (*Col*)14 (*EndLine*)49 (*EndCol*)16)) :: (110, (sloc (*Line*)42 (*Col*)3 (*EndLine*)42 (*EndCol*)5)) :: (119, (sloc (*Line*)42 (*Col*)26 (*EndLine*)42 (*EndCol*)29)) :: (128, (sloc (*Line*)43 (*Col*)9 (*EndLine*)43 (*EndCol*)11)) :: (104, (sloc (*Line*)41 (*Col*)13 (*EndLine*)41 (*EndCol*)16)) :: (95, (sloc (*Line*)37 (*Col*)31 (*EndLine*)37 (*EndCol*)35)) :: (122, (sloc (*Line*)43 (*Col*)6 (*EndLine*)43 (*EndCol*)16)) :: (176, (sloc (*Line*)62 (*Col*)17 (*EndLine*)62 (*EndCol*)18)) :: (194, (sloc (*Line*)65 (*Col*)4 (*EndLine*)65 (*EndCol*)5)) :: (86, (sloc (*Line*)37 (*Col*)13 (*EndLine*)37 (*EndCol*)16)) :: (158, (sloc (*Line*)56 (*Col*)14 (*EndLine*)56 (*EndCol*)14)) :: (113, (sloc (*Line*)42 (*Col*)10 (*EndLine*)42 (*EndCol*)13)) :: (41, (sloc (*Line*)23 (*Col*)7 (*EndLine*)23 (*EndCol*)7)) :: (140, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)15)) :: (149, (sloc (*Line*)47 (*Col*)18 (*EndLine*)47 (*EndCol*)24)) :: (134, (sloc (*Line*)44 (*Col*)14 (*EndLine*)44 (*EndCol*)16)) :: (44, (sloc (*Line*)23 (*Col*)12 (*EndLine*)23 (*EndCol*)12)) :: (80, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)19)) :: (89, (sloc (*Line*)37 (*Col*)23 (*EndLine*)37 (*EndCol*)23)) :: (116, (sloc (*Line*)42 (*Col*)18 (*EndLine*)42 (*EndCol*)22)) :: (98, (sloc (*Line*)37 (*Col*)40 (*EndLine*)37 (*EndCol*)40)) :: (71, (sloc (*Line*)34 (*Col*)16 (*EndLine*)34 (*EndCol*)17)) :: (107, (sloc (*Line*)41 (*Col*)21 (*EndLine*)41 (*EndCol*)25)) :: (74, (sloc (*Line*)36 (*Col*)7 (*EndLine*)36 (*EndCol*)7)) :: (47, (sloc (*Line*)25 (*Col*)18 (*EndLine*)25 (*EndCol*)21)) :: (184, (sloc (*Line*)63 (*Col*)15 (*EndLine*)63 (*EndCol*)15)) :: (175, (sloc (*Line*)62 (*Col*)13 (*EndLine*)62 (*EndCol*)14)) :: (211, (sloc (*Line*)68 (*Col*)4 (*EndLine*)68 (*EndCol*)4)) :: (166, (sloc (*Line*)58 (*Col*)14 (*EndLine*)58 (*EndCol*)14)) :: (220, (sloc (*Line*)69 (*Col*)17 (*EndLine*)69 (*EndCol*)17)) :: (202, (sloc (*Line*)67 (*Col*)4 (*EndLine*)67 (*EndCol*)7)) :: (142, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)9)) :: (151, (sloc (*Line*)47 (*Col*)18 (*EndLine*)47 (*EndCol*)20)) :: (124, (sloc (*Line*)43 (*Col*)6 (*EndLine*)43 (*EndCol*)12)) :: (205, (sloc (*Line*)67 (*Col*)6 (*EndLine*)67 (*EndCol*)6)) :: (106, (sloc (*Line*)41 (*Col*)21 (*EndLine*)41 (*EndCol*)25)) :: (133, (sloc (*Line*)44 (*Col*)14 (*EndLine*)44 (*EndCol*)20)) :: (169, (sloc (*Line*)59 (*Col*)14 (*EndLine*)59 (*EndCol*)14)) :: (115, (sloc (*Line*)42 (*Col*)18 (*EndLine*)42 (*EndCol*)29)) :: (187, (sloc (*Line*)64 (*Col*)4 (*EndLine*)64 (*EndCol*)5)) :: (196, (sloc (*Line*)65 (*Col*)10 (*EndLine*)65 (*EndCol*)11)) :: (181, (sloc (*Line*)63 (*Col*)10 (*EndLine*)63 (*EndCol*)15)) :: (118, (sloc (*Line*)42 (*Col*)26 (*EndLine*)42 (*EndCol*)29)) :: (127, (sloc (*Line*)43 (*Col*)9 (*EndLine*)43 (*EndCol*)11)) :: (199, (sloc (*Line*)65 (*Col*)15 (*EndLine*)65 (*EndCol*)16)) :: (136, (sloc (*Line*)44 (*Col*)20 (*EndLine*)44 (*EndCol*)20)) :: (217, (sloc (*Line*)69 (*Col*)11 (*EndLine*)69 (*EndCol*)11)) :: (100, (sloc (*Line*)38 (*Col*)3 (*EndLine*)38 (*EndCol*)3)) :: (91, (sloc (*Line*)37 (*Col*)28 (*EndLine*)37 (*EndCol*)36)) :: (190, (sloc (*Line*)64 (*Col*)10 (*EndLine*)64 (*EndCol*)11)) :: (145, (sloc (*Line*)46 (*Col*)19 (*EndLine*)46 (*EndCol*)19)) :: (154, (sloc (*Line*)49 (*Col*)9 (*EndLine*)49 (*EndCol*)9)) :: (94, (sloc (*Line*)37 (*Col*)28 (*EndLine*)37 (*EndCol*)28)) :: (67, (sloc (*Line*)33 (*Col*)16 (*EndLine*)33 (*EndCol*)16)) :: (85, (sloc (*Line*)37 (*Col*)13 (*EndLine*)37 (*EndCol*)16)) :: (139, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)15)) :: (130, (sloc (*Line*)43 (*Col*)16 (*EndLine*)43 (*EndCol*)16)) :: (148, (sloc (*Line*)47 (*Col*)9 (*EndLine*)47 (*EndCol*)13)) :: (103, (sloc (*Line*)41 (*Col*)13 (*EndLine*)41 (*EndCol*)25)) :: (112, (sloc (*Line*)42 (*Col*)10 (*EndLine*)42 (*EndCol*)13)) :: (97, (sloc (*Line*)37 (*Col*)40 (*EndLine*)37 (*EndCol*)40)) :: (79, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)23)) :: (88, (sloc (*Line*)37 (*Col*)23 (*EndLine*)37 (*EndCol*)23)) :: (70, (sloc (*Line*)34 (*Col*)7 (*EndLine*)34 (*EndCol*)11)) :: (43, (sloc (*Line*)23 (*Col*)12 (*EndLine*)23 (*EndCol*)12)) :: (189, (sloc (*Line*)64 (*Col*)10 (*EndLine*)64 (*EndCol*)11)) :: (180, (sloc (*Line*)63 (*Col*)4 (*EndLine*)63 (*EndCol*)5)) :: (216, (sloc (*Line*)69 (*Col*)11 (*EndLine*)69 (*EndCol*)11)) :: (198, (sloc (*Line*)65 (*Col*)15 (*EndLine*)65 (*EndCol*)16)) :: (156, (sloc (*Line*)49 (*Col*)14 (*EndLine*)49 (*EndCol*)16)) :: (183, (sloc (*Line*)63 (*Col*)10 (*EndLine*)63 (*EndCol*)11)) :: (129, (sloc (*Line*)43 (*Col*)16 (*EndLine*)43 (*EndCol*)16)) :: (138, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)19)) :: (219, (sloc (*Line*)69 (*Col*)14 (*EndLine*)69 (*EndCol*)14)) :: (120, (sloc (*Line*)42 (*Col*)34 (*EndLine*)42 (*EndCol*)34)) :: (213, (sloc (*Line*)68 (*Col*)12 (*EndLine*)68 (*EndCol*)13)) :: (87, (sloc (*Line*)37 (*Col*)18 (*EndLine*)37 (*EndCol*)18)) :: (96, (sloc (*Line*)37 (*Col*)31 (*EndLine*)37 (*EndCol*)35)) :: (177, (sloc (*Line*)62 (*Col*)17 (*EndLine*)62 (*EndCol*)18)) :: (132, (sloc (*Line*)44 (*Col*)6 (*EndLine*)44 (*EndCol*)9)) :: (150, (sloc (*Line*)47 (*Col*)18 (*EndLine*)47 (*EndCol*)20)) :: (105, (sloc (*Line*)41 (*Col*)13 (*EndLine*)41 (*EndCol*)16)) :: (114, (sloc (*Line*)42 (*Col*)17 (*EndLine*)42 (*EndCol*)34)) :: (123, (sloc (*Line*)43 (*Col*)6 (*EndLine*)43 (*EndCol*)12)) :: (204, (sloc (*Line*)67 (*Col*)4 (*EndLine*)67 (*EndCol*)4)) :: (195, (sloc (*Line*)65 (*Col*)10 (*EndLine*)65 (*EndCol*)16)) :: (78, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)40)) :: (90, (sloc (*Line*)37 (*Col*)28 (*EndLine*)37 (*EndCol*)40)) :: (45, (sloc (*Line*)23 (*Col*)16 (*EndLine*)23 (*EndCol*)16)) :: (81, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)19)) :: (144, (sloc (*Line*)46 (*Col*)12 (*EndLine*)46 (*EndCol*)14)) :: (126, (sloc (*Line*)43 (*Col*)6 (*EndLine*)43 (*EndCol*)6)) :: (162, (sloc (*Line*)57 (*Col*)14 (*EndLine*)57 (*EndCol*)14)) :: (135, (sloc (*Line*)44 (*Col*)14 (*EndLine*)44 (*EndCol*)16)) :: (117, (sloc (*Line*)42 (*Col*)18 (*EndLine*)42 (*EndCol*)22)) :: (84, (sloc (*Line*)37 (*Col*)13 (*EndLine*)37 (*EndCol*)18)) :: (75, (sloc (*Line*)36 (*Col*)12 (*EndLine*)36 (*EndCol*)12)) :: (111, (sloc (*Line*)42 (*Col*)10 (*EndLine*)42 (*EndCol*)34)) :: (66, (sloc (*Line*)33 (*Col*)7 (*EndLine*)33 (*EndCol*)10)) :: (42, (sloc (*Line*)23 (*Col*)12 (*EndLine*)23 (*EndCol*)16)) :: (221, (sloc (*Line*)69 (*Col*)17 (*EndLine*)69 (*EndCol*)17)) :: (212, (sloc (*Line*)68 (*Col*)6 (*EndLine*)68 (*EndCol*)6)) :: (152, (sloc (*Line*)47 (*Col*)24 (*EndLine*)47 (*EndCol*)24)) :: (188, (sloc (*Line*)64 (*Col*)10 (*EndLine*)64 (*EndCol*)15)) :: (143, (sloc (*Line*)46 (*Col*)12 (*EndLine*)46 (*EndCol*)14)) :: (197, (sloc (*Line*)65 (*Col*)10 (*EndLine*)65 (*EndCol*)11)) :: (206, (sloc (*Line*)67 (*Col*)12 (*EndLine*)67 (*EndCol*)12)) :: nil)
  (* = = = (6) name id to a pair of (name string, unique name string) map = = = *)
  (*/////////////////////////////////////////////////*)
  ((mkNameTable_x
  (*///////////////////////////////////*)
  (* = = = (1) variable names map = = = *)
  (*///////////////////////////////////*)
  ((23, ("A", "ada://parameter/Binary_Search_Test+1:11/Search+28:14/A+28:22")) :: (32, ("X4", "ada://variable/Binary_Search_Test+1:11/X4+59:4")) :: (17, ("Y", "ada://parameter/Binary_Search_Test+1:11/increase+21:14/Y+21:36")) :: (26, ("Left", "ada://variable/Binary_Search_Test+1:11/Search+28:14/Left+29:7")) :: (29, ("X1", "ada://variable/Binary_Search_Test+1:11/X1+56:4")) :: (2, ("I", "ada://parameter/Binary_Search_Test+1:11/I+1:31")) :: (14, ("Y", "ada://component/Binary_Search_Test+1:11/RT+16:9/Y+18:7")) :: (13, ("X", "ada://component/Binary_Search_Test+1:11/RT+16:9/X+17:7")) :: (31, ("X3", "ada://variable/Binary_Search_Test+1:11/X3+58:4")) :: (7, ("R", "ada://variable/Binary_Search_Test+1:11/R+9:4")) :: (16, ("X", "ada://parameter/Binary_Search_Test+1:11/increase+21:14/X+21:24")) :: (25, ("R", "ada://parameter/Binary_Search_Test+1:11/Search+28:14/R+28:43")) :: (28, ("Med", "ada://variable/Binary_Search_Test+1:11/Search+28:14/Med+31:7")) :: (27, ("Right", "ada://variable/Binary_Search_Test+1:11/Search+28:14/Right+30:7")) :: (21, ("B", "ada://variable/Binary_Search_Test+1:11/B+25:4")) :: (30, ("X2", "ada://variable/Binary_Search_Test+1:11/X2+57:4")) :: (6, ("A", "ada://variable/Binary_Search_Test+1:11/A+8:4")) :: (24, ("I", "ada://parameter/Binary_Search_Test+1:11/Search+28:14/I+28:30")) :: nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram names map = = = *)
  (*////////////////////////////////////////////*)
  ((22, ("Search", "ada://procedure_body/Binary_Search_Test+1:11/Search+28:14")) :: (1, ("Binary_Search_Test", "ada://procedure_body/Binary_Search_Test+1:11")) :: (15, ("increase", "ada://procedure_body/Binary_Search_Test+1:11/increase+21:14")) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) package names map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) type names map = = = *)
  (*/////////////////////////////////////*)
  ((8, ("T1", "ada://ordinary_type/Binary_Search_Test+1:11/T1+12:9")) :: (11, ("T4", "ada://subtype/Binary_Search_Test+1:11/T4+15:12")) :: (5, ("Ar", "ada://ordinary_type/Binary_Search_Test+1:11/Ar+6:9")) :: (4, ("U", "ada://subtype/Binary_Search_Test+1:11/U+4:12")) :: (10, ("T3", "ada://subtype/Binary_Search_Test+1:11/T3+14:12")) :: (9, ("T2", "ada://ordinary_type/Binary_Search_Test+1:11/T2+13:9")) :: (12, ("RT", "ada://ordinary_type/Binary_Search_Test+1:11/RT+16:9")) :: (3, ("T", "ada://ordinary_type/Binary_Search_Test+1:11/T+3:9")) :: nil)
))
).

