Definition Coq_AST_Tree_XX := 
(D_Procedure_Body_XX 1 
  (mkprocedure_body_xx 2
    (* = = = Procedure Name = = = *)
    ((*Binary_Search_Test*) 1)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_xx 3 ((*I*) 1) Integer In) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 4
  (D_Type_Declaration_XX 5 (Integer_Type_Declaration_XX 6 ((*T*) 1) (Range_XX 0 10))) 
  (D_Seq_Declaration_XX 7
  (D_Type_Declaration_XX 8 (Subtype_Declaration_XX 9 ((*U*) 2) (Integer_Type ((*T*) 1)) (Range_XX 1 10))) 
  (D_Seq_Declaration_XX 10
  (D_Type_Declaration_XX 11 (Array_Type_Declaration_XX 12 ((*Ar*) 3) ((*index subtype mark*) Integer) ((*component type*) (Subtype ((*U*) 2))))) 
  (D_Seq_Declaration_XX 13
  (D_Object_Declaration_XX 14 (mkobject_declaration_xx 15 ((*A*) 2) (Array_Type ((*Ar*) 3)) None)) 
  (D_Seq_Declaration_XX 16
  (D_Object_Declaration_XX 17 (mkobject_declaration_xx 18 ((*R*) 3) (Integer_Type ((*T*) 1)) None)) 
  (D_Seq_Declaration_XX 19
  (D_Type_Declaration_XX 20 (Derived_Type_Declaration_XX 21 ((*T1*) 4) Integer (Range_XX 1 10))) 
  (D_Seq_Declaration_XX 22
  (D_Type_Declaration_XX 23 (Derived_Type_Declaration_XX 24 ((*T2*) 5) (Integer_Type ((*T*) 1)) (Range_XX 2 5))) 
  (D_Seq_Declaration_XX 25
  (D_Type_Declaration_XX 26 (Subtype_Declaration_XX 27 ((*T3*) 6) Integer (Range_XX 1 10))) 
  (D_Seq_Declaration_XX 28
  (D_Type_Declaration_XX 29 (Subtype_Declaration_XX 30 ((*T4*) 7) Integer (Range_XX 5 10))) 
  (D_Seq_Declaration_XX 31
  (D_Type_Declaration_XX 32 (Record_Type_Declaration_XX 33 ((*RT*) 8) ((((*X*) 4), Integer) :: (((*Y*) 5), Integer) :: nil))) 
  (D_Seq_Declaration_XX 35
  (D_Procedure_Body_XX 36 
    (mkprocedure_body_xx 37
      (* = = = Procedure Name = = = *)
      ((*increase*) 2)
      (* = = = Formal Parameters = = = *)
      (
      (mkparameter_specification_xx 38 ((*X*) 6) Integer In) :: 
      (mkparameter_specification_xx 39 ((*Y*) 7) Integer Out) :: nil)
      (* = = = Object Declarations = = = *)
      (D_Null_Declaration_XX)
      (* = = = Procedure Body = = = *)
        (S_Assignment_XX 40 (E_Identifier_XX 41 ((*Y*) 7) (**(nil)**)) (E_Binary_Operation_XX 42 Plus (E_Name_XX 43 (E_Identifier_XX 44 ((*X*) 6) (**(nil)**)) (**(nil)**)) (E_Literal_XX 45 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))
    )
  ) 
  (D_Seq_Declaration_XX 46
  (D_Object_Declaration_XX 48 (mkobject_declaration_xx 49 ((*B*) 8) Boolean (Some ((E_Literal_XX 47 (Boolean_Literal true) (**(nil)**)))))) 
  (D_Seq_Declaration_XX 50
  (D_Procedure_Body_XX 51 
    (mkprocedure_body_xx 52
      (* = = = Procedure Name = = = *)
      ((*Search*) 3)
      (* = = = Formal Parameters = = = *)
      (
      (mkparameter_specification_xx 53 ((*A*) 9) (Array_Type ((*Ar*) 3)) In) :: 
      (mkparameter_specification_xx 54 ((*I*) 10) Integer In) :: 
      (mkparameter_specification_xx 55 ((*R*) 11) (Integer_Type ((*T*) 1)) Out) :: nil)
      (* = = = Object Declarations = = = *)
      ((D_Seq_Declaration_XX 56
    (D_Object_Declaration_XX 57 (mkobject_declaration_xx 58 ((*Left*) 12) (Subtype ((*U*) 2)) None)) 
    (D_Seq_Declaration_XX 59
    (D_Object_Declaration_XX 60 (mkobject_declaration_xx 61 ((*Right*) 13) (Subtype ((*U*) 2)) None)) 
    (D_Object_Declaration_XX 62 (mkobject_declaration_xx 63 ((*Med*) 14) (Subtype ((*U*) 2)) None)))))
      (* = = = Procedure Body = = = *)
        (S_Sequence_XX 64
        (S_Assignment_XX 65 (E_Identifier_XX 66 ((*Left*) 12) (**(nil)**)) (E_Literal_XX 67 (Integer_Literal 0) (**(nil)**))) 
        (S_Sequence_XX 68
        (S_Assignment_XX 69 (E_Identifier_XX 70 ((*Right*) 13) (**(nil)**)) (E_Literal_XX 71 (Integer_Literal 10) (**(nil)**))) 
        (S_Sequence_XX 72
        (S_Assignment_XX 73 (E_Identifier_XX 74 ((*R*) 11) (**(nil)**)) (E_Literal_XX 75 (Integer_Literal 0) (**(nil)**))) 
        (S_Sequence_XX 76
        (S_If_XX 77 (E_Binary_Operation_XX 78 Or (E_Binary_Operation_XX 79 Greater_Than (E_Name_XX 80 (E_Indexed_Component_XX 81 82 ((*A*) 9) (E_Binary_Operation_XX 84 Plus (E_Name_XX 85 (E_Identifier_XX 86 ((*Left*) 12) (**(nil)**)) (**(nil)**)) (E_Literal_XX 87 (Integer_Literal 1) (**(nil)**)) (**(Do_Range_Check :: nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 88 (E_Identifier_XX 89 ((*I*) 10) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 90 Less_Than (E_Name_XX 91 (E_Indexed_Component_XX 92 93 ((*A*) 9) (E_Name_XX 95 (E_Identifier_XX 96 ((*Right*) 13) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 97 (E_Identifier_XX 98 ((*I*) 10) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**))
          (S_Assignment_XX 99 (E_Identifier_XX 100 ((*R*) 11) (**(nil)**)) (E_Literal_XX 101 (Integer_Literal 0) (**(nil)**)))
          S_Null_XX
        ) 
        (S_While_Loop_XX 102 (E_Binary_Operation_XX 103 Less_Than_Or_Equal (E_Name_XX 104 (E_Identifier_XX 105 ((*Left*) 12) (**(nil)**)) (**(nil)**)) (E_Name_XX 106 (E_Identifier_XX 107 ((*Right*) 13) (**(nil)**)) (**(nil)**)) (**(nil)**))
          (S_Sequence_XX 108
          (S_Assignment_XX 109 (E_Identifier_XX 110 ((*Med*) 14) (**(nil)**)) (E_Binary_Operation_XX 111 Plus (E_Name_XX 112 (E_Identifier_XX 113 ((*Left*) 12) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 114 Divide (E_Binary_Operation_XX 115 Minus (E_Name_XX 116 (E_Identifier_XX 117 ((*Right*) 13) (**(nil)**)) (**(nil)**)) (E_Name_XX 118 (E_Identifier_XX 119 ((*Left*) 12) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Literal_XX 120 (Integer_Literal 2) (**(nil)**)) (**(Do_Division_Check :: nil)**)) (**(Do_Range_Check :: nil)**))) 
          (S_If_XX 121 (E_Binary_Operation_XX 122 Less_Than (E_Name_XX 123 (E_Indexed_Component_XX 124 125 ((*A*) 9) (E_Name_XX 127 (E_Identifier_XX 128 ((*Med*) 14) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 129 (E_Identifier_XX 130 ((*I*) 10) (**(nil)**)) (**(nil)**)) (**(nil)**))
            (S_Assignment_XX 131 (E_Identifier_XX 132 ((*Left*) 12) (**(nil)**)) (E_Binary_Operation_XX 133 Plus (E_Name_XX 134 (E_Identifier_XX 135 ((*Med*) 14) (**(nil)**)) (**(nil)**)) (E_Literal_XX 136 (Integer_Literal 1) (**(nil)**)) (**(Do_Range_Check :: nil)**)))
            (S_If_XX 137 (E_Binary_Operation_XX 138 Greater_Than (E_Name_XX 139 (E_Indexed_Component_XX 140 141 ((*A*) 9) (E_Name_XX 143 (E_Identifier_XX 144 ((*Med*) 14) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 145 (E_Identifier_XX 146 ((*I*) 10) (**(nil)**)) (**(nil)**)) (**(nil)**))
              (S_Assignment_XX 147 (E_Identifier_XX 148 ((*Right*) 13) (**(nil)**)) (E_Binary_Operation_XX 149 Minus (E_Name_XX 150 (E_Identifier_XX 151 ((*Med*) 14) (**(nil)**)) (**(nil)**)) (E_Literal_XX 152 (Integer_Literal 1) (**(nil)**)) (**(Do_Range_Check :: nil)**)))
              (S_Assignment_XX 153 (E_Identifier_XX 154 ((*R*) 11) (**(nil)**)) (E_Name_XX 155 (E_Identifier_XX 156 ((*Med*) 14) (**(nil)**)) (**(nil)**)))
            )
          ))
        )))))
    )
  ) 
  (D_Seq_Declaration_XX 157
  (D_Object_Declaration_XX 159 (mkobject_declaration_xx 160 ((*X1*) 15) (Derived_Type ((*T1*) 4)) (Some ((E_Literal_XX 158 (Integer_Literal 2) (**(nil)**)))))) 
  (D_Seq_Declaration_XX 161
  (D_Object_Declaration_XX 163 (mkobject_declaration_xx 164 ((*X2*) 16) (Derived_Type ((*T2*) 5)) (Some ((E_Literal_XX 162 (Integer_Literal 3) (**(nil)**)))))) 
  (D_Seq_Declaration_XX 165
  (D_Object_Declaration_XX 167 (mkobject_declaration_xx 168 ((*X3*) 17) (Subtype ((*T3*) 6)) (Some ((E_Literal_XX 166 (Integer_Literal 4) (**(nil)**)))))) 
  (D_Object_Declaration_XX 170 (mkobject_declaration_xx 171 ((*X4*) 18) (Subtype ((*T4*) 7)) (Some ((E_Literal_XX 169 (Integer_Literal 6) (**(nil)**)))))))))))))))))))))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 172
      (S_Procedure_Call_XX 173 174 ((*increase*) 2) 
        ((E_Literal_XX 175 (Integer_Literal 10) (**(nil)**)) :: (E_Name_XX 176 (E_Identifier_XX 177 ((*X4*) 18) (**(Do_Range_Check :: nil)**)) (**(nil)**)) :: nil)
      ) 
      (S_Sequence_XX 178
      (S_Assignment_XX 179 (E_Identifier_XX 180 ((*X1*) 15) (**(nil)**)) (E_Binary_Operation_XX 181 Plus (E_Name_XX 182 (E_Identifier_XX 183 ((*X1*) 15) (**(nil)**)) (**(nil)**)) (E_Literal_XX 184 (Integer_Literal 1) (**(nil)**)) (**(Do_Range_Check :: nil)**))) 
      (S_Sequence_XX 185
      (S_Assignment_XX 186 (E_Identifier_XX 187 ((*X2*) 16) (**(nil)**)) (E_Binary_Operation_XX 188 Plus (E_Name_XX 189 (E_Identifier_XX 190 ((*X2*) 16) (**(nil)**)) (**(nil)**)) (E_Literal_XX 191 (Integer_Literal 2) (**(nil)**)) (**(Do_Range_Check :: nil)**))) 
      (S_Sequence_XX 192
      (S_Assignment_XX 193 (E_Identifier_XX 194 ((*X4*) 18) (**(nil)**)) (E_Binary_Operation_XX 195 Plus (E_Name_XX 196 (E_Identifier_XX 197 ((*X3*) 17) (**(nil)**)) (**(nil)**)) (E_Name_XX 198 (E_Identifier_XX 199 ((*X4*) 18) (**(nil)**)) (**(nil)**)) (**(Do_Range_Check :: nil)**))) 
      (S_Sequence_XX 200
      (S_Assignment_XX 201 (E_Indexed_Component_XX 202 203 ((*A*) 2) (E_Literal_XX 205 (Integer_Literal 0) (**(nil)**)) (**(nil)**)) (E_Literal_XX 206 (Integer_Literal 0) (**(nil)**))) 
      (S_Sequence_XX 207
      (S_Assignment_XX 208 (E_Indexed_Component_XX 209 210 ((*A*) 2) (E_Literal_XX 212 (Integer_Literal 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 213 (Integer_Literal 10) (**(nil)**))) 
      (S_Procedure_Call_XX 214 215 ((*Search*) 3) 
        ((E_Name_XX 216 (E_Identifier_XX 217 ((*A*) 2) (**(nil)**)) (**(nil)**)) :: (E_Name_XX 218 (E_Identifier_XX 219 ((*I*) 1) (**(nil)**)) (**(nil)**)) :: (E_Name_XX 220 (E_Identifier_XX 221 ((*R*) 3) (**(nil)**)) (**(nil)**)) :: nil)
      )))))))
  )
).

Definition Symbol_Table_XX := 
(mkSymbolTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Binary_Search_Test*) 1), (0, (mkprocedure_body_xx 2
  (* = = = Procedure Name = = = *)
  ((*Binary_Search_Test*) 1)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_xx 3 ((*I*) 1) Integer In) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 4
(D_Type_Declaration_XX 5 (Integer_Type_Declaration_XX 6 ((*T*) 1) (Range_XX 0 10))) 
(D_Seq_Declaration_XX 7
(D_Type_Declaration_XX 8 (Subtype_Declaration_XX 9 ((*U*) 2) (Integer_Type ((*T*) 1)) (Range_XX 1 10))) 
(D_Seq_Declaration_XX 10
(D_Type_Declaration_XX 11 (Array_Type_Declaration_XX 12 ((*Ar*) 3) ((*index subtype mark*) Integer) ((*component type*) (Subtype ((*U*) 2))))) 
(D_Seq_Declaration_XX 13
(D_Object_Declaration_XX 14 (mkobject_declaration_xx 15 ((*A*) 2) (Array_Type ((*Ar*) 3)) None)) 
(D_Seq_Declaration_XX 16
(D_Object_Declaration_XX 17 (mkobject_declaration_xx 18 ((*R*) 3) (Integer_Type ((*T*) 1)) None)) 
(D_Seq_Declaration_XX 19
(D_Type_Declaration_XX 20 (Derived_Type_Declaration_XX 21 ((*T1*) 4) Integer (Range_XX 1 10))) 
(D_Seq_Declaration_XX 22
(D_Type_Declaration_XX 23 (Derived_Type_Declaration_XX 24 ((*T2*) 5) (Integer_Type ((*T*) 1)) (Range_XX 2 5))) 
(D_Seq_Declaration_XX 25
(D_Type_Declaration_XX 26 (Subtype_Declaration_XX 27 ((*T3*) 6) Integer (Range_XX 1 10))) 
(D_Seq_Declaration_XX 28
(D_Type_Declaration_XX 29 (Subtype_Declaration_XX 30 ((*T4*) 7) Integer (Range_XX 5 10))) 
(D_Seq_Declaration_XX 31
(D_Type_Declaration_XX 32 (Record_Type_Declaration_XX 33 ((*RT*) 8) ((((*X*) 4), Integer) :: (((*Y*) 5), Integer) :: nil))) 
(D_Seq_Declaration_XX 35
(D_Procedure_Body_XX 36 
  (mkprocedure_body_xx 37
    (* = = = Procedure Name = = = *)
    ((*increase*) 2)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_xx 38 ((*X*) 6) Integer In) :: 
    (mkparameter_specification_xx 39 ((*Y*) 7) Integer Out) :: nil)
    (* = = = Object Declarations = = = *)
    (D_Null_Declaration_XX)
    (* = = = Procedure Body = = = *)
      (S_Assignment_XX 40 (E_Identifier_XX 41 ((*Y*) 7) (**(nil)**)) (E_Binary_Operation_XX 42 Plus (E_Name_XX 43 (E_Identifier_XX 44 ((*X*) 6) (**(nil)**)) (**(nil)**)) (E_Literal_XX 45 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))
  )
) 
(D_Seq_Declaration_XX 46
(D_Object_Declaration_XX 48 (mkobject_declaration_xx 49 ((*B*) 8) Boolean (Some ((E_Literal_XX 47 (Boolean_Literal true) (**(nil)**)))))) 
(D_Seq_Declaration_XX 50
(D_Procedure_Body_XX 51 
  (mkprocedure_body_xx 52
    (* = = = Procedure Name = = = *)
    ((*Search*) 3)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_xx 53 ((*A*) 9) (Array_Type ((*Ar*) 3)) In) :: 
    (mkparameter_specification_xx 54 ((*I*) 10) Integer In) :: 
    (mkparameter_specification_xx 55 ((*R*) 11) (Integer_Type ((*T*) 1)) Out) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 56
  (D_Object_Declaration_XX 57 (mkobject_declaration_xx 58 ((*Left*) 12) (Subtype ((*U*) 2)) None)) 
  (D_Seq_Declaration_XX 59
  (D_Object_Declaration_XX 60 (mkobject_declaration_xx 61 ((*Right*) 13) (Subtype ((*U*) 2)) None)) 
  (D_Object_Declaration_XX 62 (mkobject_declaration_xx 63 ((*Med*) 14) (Subtype ((*U*) 2)) None)))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 64
      (S_Assignment_XX 65 (E_Identifier_XX 66 ((*Left*) 12) (**(nil)**)) (E_Literal_XX 67 (Integer_Literal 0) (**(nil)**))) 
      (S_Sequence_XX 68
      (S_Assignment_XX 69 (E_Identifier_XX 70 ((*Right*) 13) (**(nil)**)) (E_Literal_XX 71 (Integer_Literal 10) (**(nil)**))) 
      (S_Sequence_XX 72
      (S_Assignment_XX 73 (E_Identifier_XX 74 ((*R*) 11) (**(nil)**)) (E_Literal_XX 75 (Integer_Literal 0) (**(nil)**))) 
      (S_Sequence_XX 76
      (S_If_XX 77 (E_Binary_Operation_XX 78 Or (E_Binary_Operation_XX 79 Greater_Than (E_Name_XX 80 (E_Indexed_Component_XX 81 82 ((*A*) 9) (E_Binary_Operation_XX 84 Plus (E_Name_XX 85 (E_Identifier_XX 86 ((*Left*) 12) (**(nil)**)) (**(nil)**)) (E_Literal_XX 87 (Integer_Literal 1) (**(nil)**)) (**(Do_Range_Check :: nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 88 (E_Identifier_XX 89 ((*I*) 10) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 90 Less_Than (E_Name_XX 91 (E_Indexed_Component_XX 92 93 ((*A*) 9) (E_Name_XX 95 (E_Identifier_XX 96 ((*Right*) 13) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 97 (E_Identifier_XX 98 ((*I*) 10) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**))
        (S_Assignment_XX 99 (E_Identifier_XX 100 ((*R*) 11) (**(nil)**)) (E_Literal_XX 101 (Integer_Literal 0) (**(nil)**)))
        S_Null_XX
      ) 
      (S_While_Loop_XX 102 (E_Binary_Operation_XX 103 Less_Than_Or_Equal (E_Name_XX 104 (E_Identifier_XX 105 ((*Left*) 12) (**(nil)**)) (**(nil)**)) (E_Name_XX 106 (E_Identifier_XX 107 ((*Right*) 13) (**(nil)**)) (**(nil)**)) (**(nil)**))
        (S_Sequence_XX 108
        (S_Assignment_XX 109 (E_Identifier_XX 110 ((*Med*) 14) (**(nil)**)) (E_Binary_Operation_XX 111 Plus (E_Name_XX 112 (E_Identifier_XX 113 ((*Left*) 12) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 114 Divide (E_Binary_Operation_XX 115 Minus (E_Name_XX 116 (E_Identifier_XX 117 ((*Right*) 13) (**(nil)**)) (**(nil)**)) (E_Name_XX 118 (E_Identifier_XX 119 ((*Left*) 12) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Literal_XX 120 (Integer_Literal 2) (**(nil)**)) (**(Do_Division_Check :: nil)**)) (**(Do_Range_Check :: nil)**))) 
        (S_If_XX 121 (E_Binary_Operation_XX 122 Less_Than (E_Name_XX 123 (E_Indexed_Component_XX 124 125 ((*A*) 9) (E_Name_XX 127 (E_Identifier_XX 128 ((*Med*) 14) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 129 (E_Identifier_XX 130 ((*I*) 10) (**(nil)**)) (**(nil)**)) (**(nil)**))
          (S_Assignment_XX 131 (E_Identifier_XX 132 ((*Left*) 12) (**(nil)**)) (E_Binary_Operation_XX 133 Plus (E_Name_XX 134 (E_Identifier_XX 135 ((*Med*) 14) (**(nil)**)) (**(nil)**)) (E_Literal_XX 136 (Integer_Literal 1) (**(nil)**)) (**(Do_Range_Check :: nil)**)))
          (S_If_XX 137 (E_Binary_Operation_XX 138 Greater_Than (E_Name_XX 139 (E_Indexed_Component_XX 140 141 ((*A*) 9) (E_Name_XX 143 (E_Identifier_XX 144 ((*Med*) 14) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 145 (E_Identifier_XX 146 ((*I*) 10) (**(nil)**)) (**(nil)**)) (**(nil)**))
            (S_Assignment_XX 147 (E_Identifier_XX 148 ((*Right*) 13) (**(nil)**)) (E_Binary_Operation_XX 149 Minus (E_Name_XX 150 (E_Identifier_XX 151 ((*Med*) 14) (**(nil)**)) (**(nil)**)) (E_Literal_XX 152 (Integer_Literal 1) (**(nil)**)) (**(Do_Range_Check :: nil)**)))
            (S_Assignment_XX 153 (E_Identifier_XX 154 ((*R*) 11) (**(nil)**)) (E_Name_XX 155 (E_Identifier_XX 156 ((*Med*) 14) (**(nil)**)) (**(nil)**)))
          )
        ))
      )))))
  )
) 
(D_Seq_Declaration_XX 157
(D_Object_Declaration_XX 159 (mkobject_declaration_xx 160 ((*X1*) 15) (Derived_Type ((*T1*) 4)) (Some ((E_Literal_XX 158 (Integer_Literal 2) (**(nil)**)))))) 
(D_Seq_Declaration_XX 161
(D_Object_Declaration_XX 163 (mkobject_declaration_xx 164 ((*X2*) 16) (Derived_Type ((*T2*) 5)) (Some ((E_Literal_XX 162 (Integer_Literal 3) (**(nil)**)))))) 
(D_Seq_Declaration_XX 165
(D_Object_Declaration_XX 167 (mkobject_declaration_xx 168 ((*X3*) 17) (Subtype ((*T3*) 6)) (Some ((E_Literal_XX 166 (Integer_Literal 4) (**(nil)**)))))) 
(D_Object_Declaration_XX 170 (mkobject_declaration_xx 171 ((*X4*) 18) (Subtype ((*T4*) 7)) (Some ((E_Literal_XX 169 (Integer_Literal 6) (**(nil)**)))))))))))))))))))))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 172
    (S_Procedure_Call_XX 173 174 ((*increase*) 2) 
      ((E_Literal_XX 175 (Integer_Literal 10) (**(nil)**)) :: (E_Name_XX 176 (E_Identifier_XX 177 ((*X4*) 18) (**(Do_Range_Check :: nil)**)) (**(nil)**)) :: nil)
    ) 
    (S_Sequence_XX 178
    (S_Assignment_XX 179 (E_Identifier_XX 180 ((*X1*) 15) (**(nil)**)) (E_Binary_Operation_XX 181 Plus (E_Name_XX 182 (E_Identifier_XX 183 ((*X1*) 15) (**(nil)**)) (**(nil)**)) (E_Literal_XX 184 (Integer_Literal 1) (**(nil)**)) (**(Do_Range_Check :: nil)**))) 
    (S_Sequence_XX 185
    (S_Assignment_XX 186 (E_Identifier_XX 187 ((*X2*) 16) (**(nil)**)) (E_Binary_Operation_XX 188 Plus (E_Name_XX 189 (E_Identifier_XX 190 ((*X2*) 16) (**(nil)**)) (**(nil)**)) (E_Literal_XX 191 (Integer_Literal 2) (**(nil)**)) (**(Do_Range_Check :: nil)**))) 
    (S_Sequence_XX 192
    (S_Assignment_XX 193 (E_Identifier_XX 194 ((*X4*) 18) (**(nil)**)) (E_Binary_Operation_XX 195 Plus (E_Name_XX 196 (E_Identifier_XX 197 ((*X3*) 17) (**(nil)**)) (**(nil)**)) (E_Name_XX 198 (E_Identifier_XX 199 ((*X4*) 18) (**(nil)**)) (**(nil)**)) (**(Do_Range_Check :: nil)**))) 
    (S_Sequence_XX 200
    (S_Assignment_XX 201 (E_Indexed_Component_XX 202 203 ((*A*) 2) (E_Literal_XX 205 (Integer_Literal 0) (**(nil)**)) (**(nil)**)) (E_Literal_XX 206 (Integer_Literal 0) (**(nil)**))) 
    (S_Sequence_XX 207
    (S_Assignment_XX 208 (E_Indexed_Component_XX 209 210 ((*A*) 2) (E_Literal_XX 212 (Integer_Literal 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 213 (Integer_Literal 10) (**(nil)**))) 
    (S_Procedure_Call_XX 214 215 ((*Search*) 3) 
      ((E_Name_XX 216 (E_Identifier_XX 217 ((*A*) 2) (**(nil)**)) (**(nil)**)) :: (E_Name_XX 218 (E_Identifier_XX 219 ((*I*) 1) (**(nil)**)) (**(nil)**)) :: (E_Name_XX 220 (E_Identifier_XX 221 ((*R*) 3) (**(nil)**)) (**(nil)**)) :: nil)
    )))))))
))) :: (((*increase*) 2), (1, (mkprocedure_body_xx 37
  (* = = = Procedure Name = = = *)
  ((*increase*) 2)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_xx 38 ((*X*) 6) Integer In) :: 
  (mkparameter_specification_xx 39 ((*Y*) 7) Integer Out) :: nil)
  (* = = = Object Declarations = = = *)
  (D_Null_Declaration_XX)
  (* = = = Procedure Body = = = *)
    (S_Assignment_XX 40 (E_Identifier_XX 41 ((*Y*) 7) (**(nil)**)) (E_Binary_Operation_XX 42 Plus (E_Name_XX 43 (E_Identifier_XX 44 ((*X*) 6) (**(nil)**)) (**(nil)**)) (E_Literal_XX 45 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))
))) :: (((*Search*) 3), (1, (mkprocedure_body_xx 52
  (* = = = Procedure Name = = = *)
  ((*Search*) 3)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_xx 53 ((*A*) 9) (Array_Type ((*Ar*) 3)) In) :: 
  (mkparameter_specification_xx 54 ((*I*) 10) Integer In) :: 
  (mkparameter_specification_xx 55 ((*R*) 11) (Integer_Type ((*T*) 1)) Out) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 56
(D_Object_Declaration_XX 57 (mkobject_declaration_xx 58 ((*Left*) 12) (Subtype ((*U*) 2)) None)) 
(D_Seq_Declaration_XX 59
(D_Object_Declaration_XX 60 (mkobject_declaration_xx 61 ((*Right*) 13) (Subtype ((*U*) 2)) None)) 
(D_Object_Declaration_XX 62 (mkobject_declaration_xx 63 ((*Med*) 14) (Subtype ((*U*) 2)) None)))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 64
    (S_Assignment_XX 65 (E_Identifier_XX 66 ((*Left*) 12) (**(nil)**)) (E_Literal_XX 67 (Integer_Literal 0) (**(nil)**))) 
    (S_Sequence_XX 68
    (S_Assignment_XX 69 (E_Identifier_XX 70 ((*Right*) 13) (**(nil)**)) (E_Literal_XX 71 (Integer_Literal 10) (**(nil)**))) 
    (S_Sequence_XX 72
    (S_Assignment_XX 73 (E_Identifier_XX 74 ((*R*) 11) (**(nil)**)) (E_Literal_XX 75 (Integer_Literal 0) (**(nil)**))) 
    (S_Sequence_XX 76
    (S_If_XX 77 (E_Binary_Operation_XX 78 Or (E_Binary_Operation_XX 79 Greater_Than (E_Name_XX 80 (E_Indexed_Component_XX 81 82 ((*A*) 9) (E_Binary_Operation_XX 84 Plus (E_Name_XX 85 (E_Identifier_XX 86 ((*Left*) 12) (**(nil)**)) (**(nil)**)) (E_Literal_XX 87 (Integer_Literal 1) (**(nil)**)) (**(Do_Range_Check :: nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 88 (E_Identifier_XX 89 ((*I*) 10) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 90 Less_Than (E_Name_XX 91 (E_Indexed_Component_XX 92 93 ((*A*) 9) (E_Name_XX 95 (E_Identifier_XX 96 ((*Right*) 13) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 97 (E_Identifier_XX 98 ((*I*) 10) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**))
      (S_Assignment_XX 99 (E_Identifier_XX 100 ((*R*) 11) (**(nil)**)) (E_Literal_XX 101 (Integer_Literal 0) (**(nil)**)))
      S_Null_XX
    ) 
    (S_While_Loop_XX 102 (E_Binary_Operation_XX 103 Less_Than_Or_Equal (E_Name_XX 104 (E_Identifier_XX 105 ((*Left*) 12) (**(nil)**)) (**(nil)**)) (E_Name_XX 106 (E_Identifier_XX 107 ((*Right*) 13) (**(nil)**)) (**(nil)**)) (**(nil)**))
      (S_Sequence_XX 108
      (S_Assignment_XX 109 (E_Identifier_XX 110 ((*Med*) 14) (**(nil)**)) (E_Binary_Operation_XX 111 Plus (E_Name_XX 112 (E_Identifier_XX 113 ((*Left*) 12) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 114 Divide (E_Binary_Operation_XX 115 Minus (E_Name_XX 116 (E_Identifier_XX 117 ((*Right*) 13) (**(nil)**)) (**(nil)**)) (E_Name_XX 118 (E_Identifier_XX 119 ((*Left*) 12) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Literal_XX 120 (Integer_Literal 2) (**(nil)**)) (**(Do_Division_Check :: nil)**)) (**(Do_Range_Check :: nil)**))) 
      (S_If_XX 121 (E_Binary_Operation_XX 122 Less_Than (E_Name_XX 123 (E_Indexed_Component_XX 124 125 ((*A*) 9) (E_Name_XX 127 (E_Identifier_XX 128 ((*Med*) 14) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 129 (E_Identifier_XX 130 ((*I*) 10) (**(nil)**)) (**(nil)**)) (**(nil)**))
        (S_Assignment_XX 131 (E_Identifier_XX 132 ((*Left*) 12) (**(nil)**)) (E_Binary_Operation_XX 133 Plus (E_Name_XX 134 (E_Identifier_XX 135 ((*Med*) 14) (**(nil)**)) (**(nil)**)) (E_Literal_XX 136 (Integer_Literal 1) (**(nil)**)) (**(Do_Range_Check :: nil)**)))
        (S_If_XX 137 (E_Binary_Operation_XX 138 Greater_Than (E_Name_XX 139 (E_Indexed_Component_XX 140 141 ((*A*) 9) (E_Name_XX 143 (E_Identifier_XX 144 ((*Med*) 14) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**)) (E_Name_XX 145 (E_Identifier_XX 146 ((*I*) 10) (**(nil)**)) (**(nil)**)) (**(nil)**))
          (S_Assignment_XX 147 (E_Identifier_XX 148 ((*Right*) 13) (**(nil)**)) (E_Binary_Operation_XX 149 Minus (E_Name_XX 150 (E_Identifier_XX 151 ((*Med*) 14) (**(nil)**)) (**(nil)**)) (E_Literal_XX 152 (Integer_Literal 1) (**(nil)**)) (**(Do_Range_Check :: nil)**)))
          (S_Assignment_XX 153 (E_Identifier_XX 154 ((*R*) 11) (**(nil)**)) (E_Name_XX 155 (E_Identifier_XX 156 ((*Med*) 14) (**(nil)**)) (**(nil)**)))
        )
      ))
    )))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  ((((*Ar*) 3), (Array_Type_Declaration_XX 12 ((*Ar*) 3) ((*index subtype mark*) Integer) ((*component type*) (Subtype ((*U*) 2))))) :: (((*T4*) 7), (Subtype_Declaration_XX 30 ((*T4*) 7) Integer (Range_XX 5 10))) :: (((*RT*) 8), (Record_Type_Declaration_XX 33 ((*RT*) 8) ((((*X*) 4), Integer) :: (((*Y*) 5), Integer) :: nil))) :: (((*U*) 2), (Subtype_Declaration_XX 9 ((*U*) 2) (Integer_Type ((*T*) 1)) (Range_XX 1 10))) :: (((*T3*) 6), (Subtype_Declaration_XX 27 ((*T3*) 6) Integer (Range_XX 1 10))) :: (((*T*) 1), (Integer_Type_Declaration_XX 6 ((*T*) 1) (Range_XX 0 10))) :: (((*T2*) 5), (Derived_Type_Declaration_XX 24 ((*T2*) 5) (Integer_Type ((*T*) 1)) (Range_XX 2 5))) :: (((*T1*) 4), (Derived_Type_Declaration_XX 21 ((*T1*) 4) Integer (Range_XX 1 10))) :: nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((146, Integer) :: (218, Integer) :: (92, Integer) :: (101, Integer) :: (209, Integer) :: (182, (Derived_Type ((*T1*) 4))) :: (191, Integer) :: (83, (Array_Type ((*Ar*) 3))) :: (155, (Subtype ((*U*) 2))) :: (110, (Subtype ((*U*) 2))) :: (119, (Subtype ((*U*) 2))) :: (128, (Subtype ((*U*) 2))) :: (104, (Subtype ((*U*) 2))) :: (95, (Subtype ((*U*) 2))) :: (122, Boolean) :: (176, (Subtype ((*T4*) 7))) :: (194, (Subtype ((*T4*) 7))) :: (86, (Subtype ((*U*) 2))) :: (158, Integer) :: (113, (Subtype ((*U*) 2))) :: (41, Integer) :: (140, Integer) :: (149, (Integer_Type ((*T*) 1))) :: (134, (Subtype ((*U*) 2))) :: (44, Integer) :: (80, Integer) :: (89, Integer) :: (116, (Subtype ((*U*) 2))) :: (98, Integer) :: (71, Integer) :: (107, (Subtype ((*U*) 2))) :: (74, (Integer_Type ((*T*) 1))) :: (47, Boolean) :: (184, Integer) :: (175, Integer) :: (211, (Array_Type ((*Ar*) 3))) :: (166, Integer) :: (220, (Integer_Type ((*T*) 1))) :: (202, Integer) :: (142, (Array_Type ((*Ar*) 3))) :: (151, (Subtype ((*U*) 2))) :: (124, Integer) :: (205, Integer) :: (106, (Subtype ((*U*) 2))) :: (133, (Integer_Type ((*T*) 1))) :: (169, Integer) :: (115, (Integer_Type ((*T*) 1))) :: (187, (Derived_Type ((*T2*) 5))) :: (196, (Subtype ((*T3*) 6))) :: (181, (Derived_Type ((*T1*) 4))) :: (118, (Subtype ((*U*) 2))) :: (127, (Subtype ((*U*) 2))) :: (199, (Subtype ((*T4*) 7))) :: (136, Integer) :: (217, (Array_Type ((*Ar*) 3))) :: (100, (Integer_Type ((*T*) 1))) :: (91, Integer) :: (190, (Derived_Type ((*T2*) 5))) :: (145, Integer) :: (154, (Integer_Type ((*T*) 1))) :: (94, (Array_Type ((*Ar*) 3))) :: (67, Integer) :: (85, (Subtype ((*U*) 2))) :: (139, Integer) :: (130, Integer) :: (148, (Subtype ((*U*) 2))) :: (103, Boolean) :: (112, (Subtype ((*U*) 2))) :: (97, Integer) :: (79, Boolean) :: (88, Integer) :: (70, (Subtype ((*U*) 2))) :: (43, Integer) :: (189, (Derived_Type ((*T2*) 5))) :: (180, (Derived_Type ((*T1*) 4))) :: (216, (Array_Type ((*Ar*) 3))) :: (198, (Subtype ((*T4*) 7))) :: (156, (Subtype ((*U*) 2))) :: (183, (Derived_Type ((*T1*) 4))) :: (129, Integer) :: (138, Boolean) :: (219, Integer) :: (120, Integer) :: (213, Integer) :: (87, Integer) :: (96, (Subtype ((*U*) 2))) :: (177, (Subtype ((*T4*) 7))) :: (132, (Subtype ((*U*) 2))) :: (150, (Subtype ((*U*) 2))) :: (105, (Subtype ((*U*) 2))) :: (114, (Integer_Type ((*T*) 1))) :: (123, Integer) :: (204, (Array_Type ((*Ar*) 3))) :: (195, Integer) :: (78, Boolean) :: (90, Boolean) :: (45, Integer) :: (81, Integer) :: (144, (Subtype ((*U*) 2))) :: (126, (Array_Type ((*Ar*) 3))) :: (162, Integer) :: (135, (Subtype ((*U*) 2))) :: (117, (Subtype ((*U*) 2))) :: (84, (Integer_Type ((*T*) 1))) :: (75, Integer) :: (111, (Integer_Type ((*T*) 1))) :: (66, (Subtype ((*U*) 2))) :: (42, Integer) :: (221, (Integer_Type ((*T*) 1))) :: (212, Integer) :: (152, Integer) :: (188, (Derived_Type ((*T2*) 5))) :: (143, (Subtype ((*U*) 2))) :: (197, (Subtype ((*T3*) 6))) :: (206, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((146, (sloc (*Line*)46 (*Col*)19 (*EndLine*)46 (*EndCol*)19)) :: (218, (sloc (*Line*)69 (*Col*)14 (*EndLine*)69 (*EndCol*)14)) :: (92, (sloc (*Line*)37 (*Col*)28 (*EndLine*)37 (*EndCol*)36)) :: (101, (sloc (*Line*)38 (*Col*)8 (*EndLine*)38 (*EndCol*)8)) :: (209, (sloc (*Line*)68 (*Col*)4 (*EndLine*)68 (*EndCol*)7)) :: (182, (sloc (*Line*)63 (*Col*)10 (*EndLine*)63 (*EndCol*)11)) :: (191, (sloc (*Line*)64 (*Col*)15 (*EndLine*)64 (*EndCol*)15)) :: (83, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)10)) :: (155, (sloc (*Line*)49 (*Col*)14 (*EndLine*)49 (*EndCol*)16)) :: (110, (sloc (*Line*)42 (*Col*)3 (*EndLine*)42 (*EndCol*)5)) :: (119, (sloc (*Line*)42 (*Col*)26 (*EndLine*)42 (*EndCol*)29)) :: (128, (sloc (*Line*)43 (*Col*)9 (*EndLine*)43 (*EndCol*)11)) :: (104, (sloc (*Line*)41 (*Col*)13 (*EndLine*)41 (*EndCol*)16)) :: (95, (sloc (*Line*)37 (*Col*)31 (*EndLine*)37 (*EndCol*)35)) :: (122, (sloc (*Line*)43 (*Col*)6 (*EndLine*)43 (*EndCol*)16)) :: (176, (sloc (*Line*)62 (*Col*)17 (*EndLine*)62 (*EndCol*)18)) :: (194, (sloc (*Line*)65 (*Col*)4 (*EndLine*)65 (*EndCol*)5)) :: (86, (sloc (*Line*)37 (*Col*)13 (*EndLine*)37 (*EndCol*)16)) :: (158, (sloc (*Line*)56 (*Col*)14 (*EndLine*)56 (*EndCol*)14)) :: (113, (sloc (*Line*)42 (*Col*)10 (*EndLine*)42 (*EndCol*)13)) :: (41, (sloc (*Line*)23 (*Col*)7 (*EndLine*)23 (*EndCol*)7)) :: (140, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)15)) :: (149, (sloc (*Line*)47 (*Col*)18 (*EndLine*)47 (*EndCol*)24)) :: (134, (sloc (*Line*)44 (*Col*)14 (*EndLine*)44 (*EndCol*)16)) :: (44, (sloc (*Line*)23 (*Col*)12 (*EndLine*)23 (*EndCol*)12)) :: (80, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)19)) :: (89, (sloc (*Line*)37 (*Col*)23 (*EndLine*)37 (*EndCol*)23)) :: (116, (sloc (*Line*)42 (*Col*)18 (*EndLine*)42 (*EndCol*)22)) :: (98, (sloc (*Line*)37 (*Col*)40 (*EndLine*)37 (*EndCol*)40)) :: (71, (sloc (*Line*)34 (*Col*)16 (*EndLine*)34 (*EndCol*)17)) :: (107, (sloc (*Line*)41 (*Col*)21 (*EndLine*)41 (*EndCol*)25)) :: (74, (sloc (*Line*)36 (*Col*)7 (*EndLine*)36 (*EndCol*)7)) :: (47, (sloc (*Line*)25 (*Col*)18 (*EndLine*)25 (*EndCol*)21)) :: (184, (sloc (*Line*)63 (*Col*)15 (*EndLine*)63 (*EndCol*)15)) :: (175, (sloc (*Line*)62 (*Col*)13 (*EndLine*)62 (*EndCol*)14)) :: (211, (sloc (*Line*)68 (*Col*)4 (*EndLine*)68 (*EndCol*)4)) :: (166, (sloc (*Line*)58 (*Col*)14 (*EndLine*)58 (*EndCol*)14)) :: (220, (sloc (*Line*)69 (*Col*)17 (*EndLine*)69 (*EndCol*)17)) :: (202, (sloc (*Line*)67 (*Col*)4 (*EndLine*)67 (*EndCol*)7)) :: (142, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)9)) :: (151, (sloc (*Line*)47 (*Col*)18 (*EndLine*)47 (*EndCol*)20)) :: (124, (sloc (*Line*)43 (*Col*)6 (*EndLine*)43 (*EndCol*)12)) :: (205, (sloc (*Line*)67 (*Col*)6 (*EndLine*)67 (*EndCol*)6)) :: (106, (sloc (*Line*)41 (*Col*)21 (*EndLine*)41 (*EndCol*)25)) :: (133, (sloc (*Line*)44 (*Col*)14 (*EndLine*)44 (*EndCol*)20)) :: (169, (sloc (*Line*)59 (*Col*)14 (*EndLine*)59 (*EndCol*)14)) :: (115, (sloc (*Line*)42 (*Col*)18 (*EndLine*)42 (*EndCol*)29)) :: (187, (sloc (*Line*)64 (*Col*)4 (*EndLine*)64 (*EndCol*)5)) :: (196, (sloc (*Line*)65 (*Col*)10 (*EndLine*)65 (*EndCol*)11)) :: (181, (sloc (*Line*)63 (*Col*)10 (*EndLine*)63 (*EndCol*)15)) :: (118, (sloc (*Line*)42 (*Col*)26 (*EndLine*)42 (*EndCol*)29)) :: (127, (sloc (*Line*)43 (*Col*)9 (*EndLine*)43 (*EndCol*)11)) :: (199, (sloc (*Line*)65 (*Col*)15 (*EndLine*)65 (*EndCol*)16)) :: (136, (sloc (*Line*)44 (*Col*)20 (*EndLine*)44 (*EndCol*)20)) :: (217, (sloc (*Line*)69 (*Col*)11 (*EndLine*)69 (*EndCol*)11)) :: (100, (sloc (*Line*)38 (*Col*)3 (*EndLine*)38 (*EndCol*)3)) :: (91, (sloc (*Line*)37 (*Col*)28 (*EndLine*)37 (*EndCol*)36)) :: (190, (sloc (*Line*)64 (*Col*)10 (*EndLine*)64 (*EndCol*)11)) :: (145, (sloc (*Line*)46 (*Col*)19 (*EndLine*)46 (*EndCol*)19)) :: (154, (sloc (*Line*)49 (*Col*)9 (*EndLine*)49 (*EndCol*)9)) :: (94, (sloc (*Line*)37 (*Col*)28 (*EndLine*)37 (*EndCol*)28)) :: (67, (sloc (*Line*)33 (*Col*)16 (*EndLine*)33 (*EndCol*)16)) :: (85, (sloc (*Line*)37 (*Col*)13 (*EndLine*)37 (*EndCol*)16)) :: (139, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)15)) :: (130, (sloc (*Line*)43 (*Col*)16 (*EndLine*)43 (*EndCol*)16)) :: (148, (sloc (*Line*)47 (*Col*)9 (*EndLine*)47 (*EndCol*)13)) :: (103, (sloc (*Line*)41 (*Col*)13 (*EndLine*)41 (*EndCol*)25)) :: (112, (sloc (*Line*)42 (*Col*)10 (*EndLine*)42 (*EndCol*)13)) :: (97, (sloc (*Line*)37 (*Col*)40 (*EndLine*)37 (*EndCol*)40)) :: (79, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)23)) :: (88, (sloc (*Line*)37 (*Col*)23 (*EndLine*)37 (*EndCol*)23)) :: (70, (sloc (*Line*)34 (*Col*)7 (*EndLine*)34 (*EndCol*)11)) :: (43, (sloc (*Line*)23 (*Col*)12 (*EndLine*)23 (*EndCol*)12)) :: (189, (sloc (*Line*)64 (*Col*)10 (*EndLine*)64 (*EndCol*)11)) :: (180, (sloc (*Line*)63 (*Col*)4 (*EndLine*)63 (*EndCol*)5)) :: (216, (sloc (*Line*)69 (*Col*)11 (*EndLine*)69 (*EndCol*)11)) :: (198, (sloc (*Line*)65 (*Col*)15 (*EndLine*)65 (*EndCol*)16)) :: (156, (sloc (*Line*)49 (*Col*)14 (*EndLine*)49 (*EndCol*)16)) :: (183, (sloc (*Line*)63 (*Col*)10 (*EndLine*)63 (*EndCol*)11)) :: (129, (sloc (*Line*)43 (*Col*)16 (*EndLine*)43 (*EndCol*)16)) :: (138, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)19)) :: (219, (sloc (*Line*)69 (*Col*)14 (*EndLine*)69 (*EndCol*)14)) :: (120, (sloc (*Line*)42 (*Col*)34 (*EndLine*)42 (*EndCol*)34)) :: (213, (sloc (*Line*)68 (*Col*)12 (*EndLine*)68 (*EndCol*)13)) :: (87, (sloc (*Line*)37 (*Col*)18 (*EndLine*)37 (*EndCol*)18)) :: (96, (sloc (*Line*)37 (*Col*)31 (*EndLine*)37 (*EndCol*)35)) :: (177, (sloc (*Line*)62 (*Col*)17 (*EndLine*)62 (*EndCol*)18)) :: (132, (sloc (*Line*)44 (*Col*)6 (*EndLine*)44 (*EndCol*)9)) :: (150, (sloc (*Line*)47 (*Col*)18 (*EndLine*)47 (*EndCol*)20)) :: (105, (sloc (*Line*)41 (*Col*)13 (*EndLine*)41 (*EndCol*)16)) :: (114, (sloc (*Line*)42 (*Col*)17 (*EndLine*)42 (*EndCol*)34)) :: (123, (sloc (*Line*)43 (*Col*)6 (*EndLine*)43 (*EndCol*)12)) :: (204, (sloc (*Line*)67 (*Col*)4 (*EndLine*)67 (*EndCol*)4)) :: (195, (sloc (*Line*)65 (*Col*)10 (*EndLine*)65 (*EndCol*)16)) :: (78, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)40)) :: (90, (sloc (*Line*)37 (*Col*)28 (*EndLine*)37 (*EndCol*)40)) :: (45, (sloc (*Line*)23 (*Col*)16 (*EndLine*)23 (*EndCol*)16)) :: (81, (sloc (*Line*)37 (*Col*)10 (*EndLine*)37 (*EndCol*)19)) :: (144, (sloc (*Line*)46 (*Col*)12 (*EndLine*)46 (*EndCol*)14)) :: (126, (sloc (*Line*)43 (*Col*)6 (*EndLine*)43 (*EndCol*)6)) :: (162, (sloc (*Line*)57 (*Col*)14 (*EndLine*)57 (*EndCol*)14)) :: (135, (sloc (*Line*)44 (*Col*)14 (*EndLine*)44 (*EndCol*)16)) :: (117, (sloc (*Line*)42 (*Col*)18 (*EndLine*)42 (*EndCol*)22)) :: (84, (sloc (*Line*)37 (*Col*)13 (*EndLine*)37 (*EndCol*)18)) :: (75, (sloc (*Line*)36 (*Col*)12 (*EndLine*)36 (*EndCol*)12)) :: (111, (sloc (*Line*)42 (*Col*)10 (*EndLine*)42 (*EndCol*)34)) :: (66, (sloc (*Line*)33 (*Col*)7 (*EndLine*)33 (*EndCol*)10)) :: (42, (sloc (*Line*)23 (*Col*)12 (*EndLine*)23 (*EndCol*)16)) :: (221, (sloc (*Line*)69 (*Col*)17 (*EndLine*)69 (*EndCol*)17)) :: (212, (sloc (*Line*)68 (*Col*)6 (*EndLine*)68 (*EndCol*)6)) :: (152, (sloc (*Line*)47 (*Col*)24 (*EndLine*)47 (*EndCol*)24)) :: (188, (sloc (*Line*)64 (*Col*)10 (*EndLine*)64 (*EndCol*)15)) :: (143, (sloc (*Line*)46 (*Col*)12 (*EndLine*)46 (*EndCol*)14)) :: (197, (sloc (*Line*)65 (*Col*)10 (*EndLine*)65 (*EndCol*)11)) :: (206, (sloc (*Line*)67 (*Col*)12 (*EndLine*)67 (*EndCol*)12)) :: nil)
  (* = = = (6) name id to a pair of (name string, unique name string) map = = = *)
  (*/////////////////////////////////////////////////*)
  ((mkNameTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable names map = = = *)
  (*///////////////////////////////////*)
  ((17, ("X3", "ada://variable/Binary_Search_Test+1:11/X3+58:4")) :: (8, ("B", "ada://variable/Binary_Search_Test+1:11/B+25:4")) :: (11, ("R", "ada://parameter/Binary_Search_Test+1:11/Search+28:14/R+28:43")) :: (2, ("A", "ada://variable/Binary_Search_Test+1:11/A+8:4")) :: (5, ("Y", "ada://component/Binary_Search_Test+1:11/RT+16:9/Y+18:7")) :: (14, ("Med", "ada://variable/Binary_Search_Test+1:11/Search+28:14/Med+31:7")) :: (4, ("X", "ada://component/Binary_Search_Test+1:11/RT+16:9/X+17:7")) :: (13, ("Right", "ada://variable/Binary_Search_Test+1:11/Search+28:14/Right+30:7")) :: (16, ("X2", "ada://variable/Binary_Search_Test+1:11/X2+57:4")) :: (7, ("Y", "ada://parameter/Binary_Search_Test+1:11/increase+21:14/Y+21:36")) :: (1, ("I", "ada://parameter/Binary_Search_Test+1:11/I+1:31")) :: (10, ("I", "ada://parameter/Binary_Search_Test+1:11/Search+28:14/I+28:30")) :: (18, ("X4", "ada://variable/Binary_Search_Test+1:11/X4+59:4")) :: (9, ("A", "ada://parameter/Binary_Search_Test+1:11/Search+28:14/A+28:22")) :: (3, ("R", "ada://variable/Binary_Search_Test+1:11/R+9:4")) :: (12, ("Left", "ada://variable/Binary_Search_Test+1:11/Search+28:14/Left+29:7")) :: (15, ("X1", "ada://variable/Binary_Search_Test+1:11/X1+56:4")) :: (6, ("X", "ada://parameter/Binary_Search_Test+1:11/increase+21:14/X+21:24")) :: nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram names map = = = *)
  (*////////////////////////////////////////////*)
  ((2, ("increase", "ada://procedure_body/Binary_Search_Test+1:11/increase+21:14")) :: (1, ("Binary_Search_Test", "ada://procedure_body/Binary_Search_Test+1:11")) :: (3, ("Search", "ada://procedure_body/Binary_Search_Test+1:11/Search+28:14")) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) package names map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) type names map = = = *)
  (*/////////////////////////////////////*)
  ((8, ("RT", "ada://ordinary_type/Binary_Search_Test+1:11/RT+16:9")) :: (2, ("U", "ada://subtype/Binary_Search_Test+1:11/U+4:12")) :: (5, ("T2", "ada://ordinary_type/Binary_Search_Test+1:11/T2+13:9")) :: (4, ("T1", "ada://ordinary_type/Binary_Search_Test+1:11/T1+12:9")) :: (7, ("T4", "ada://subtype/Binary_Search_Test+1:11/T4+15:12")) :: (1, ("T", "ada://ordinary_type/Binary_Search_Test+1:11/T+3:9")) :: (3, ("Ar", "ada://ordinary_type/Binary_Search_Test+1:11/Ar+6:9")) :: (6, ("T3", "ada://subtype/Binary_Search_Test+1:11/T3+14:12")) :: nil)
))
).

