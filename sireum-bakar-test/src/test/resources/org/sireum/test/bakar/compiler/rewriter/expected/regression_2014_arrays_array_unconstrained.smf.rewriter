package Array_Unconstrained;


procedure Boolean isSorted (
        Vector Z) {
  local
    Boolean B;
    Integer I;
    Integer _tcomp0;
    Integer _tcomp1;
    Integer _t0;
    universal_integer _t1;
    Integer _t2;
    Integer _t3;
    Integer _t4;
    universal_integer _t5;
    Integer _t6;
    Integer _t7;
    Integer _t8;
    Integer _t9;
    Integer _t10;
    universal_integer _t11;


  #l0.
    B := true;

  #l2.
    _tcomp0 := attribute__uif__first `Z;

  #rwl0.
    _t0 := attribute__uif__last `Z;

  #rwl1.
    _t1 := 1ii;

  #l3.
    _tcomp1 := _t0 - _t1;

  #rwl2.
    _t2 := _tcomp0;

  #rwl3.
    _t3 := _tcomp1;

  #l4.
    if _t2 > _t3 then goto l1;

  #l5.
    I := _tcomp0;

  #l6.
    // empty loc

  #rwl4.
    _t4 := I;

  #rwl5.
    _t5 := 1ii;

  #rwl6.
    _t6 := Z[I];

  #rwl7.
    _t7 := Z[_t4 + _t5];

  #l7.
    B := _t6 <= _t7;

  #l8.
    if !(B) then goto l1;

  #rwl8.
    _t8 := I;

  #rwl9.
    _t9 := _tcomp1;

  #l9.
    if _t8 == _t9 then goto l1;

  #rwl10.
    _t10 := I;

  #rwl11.
    _t11 := 1ii;

  #l10.
    I := _t10 + _t11;

  #l11.
    goto l6;

  #l1.
    // empty loc

  #l12.
    return B;
}

procedure Boolean indexIsValue (
        Vector Z,
        Integer Index,
        Integer V) {
  local
    Integer _t12;
    Integer _t13;


  #rwl12.
    _t12 := Z[Index];

  #rwl13.
    _t13 := V;

  #l13.
    return _t12 == _t13;
}package Array_Unconstrained;


typealias _UNCONSTRAINED_ARRAY_ Vector;

procedure Boolean isSorted (
        Vector Z) {

}

procedure Boolean indexIsValue (
        Vector Z,
        Integer Index,
        Integer V) {

}package Array_Unconstrained_T;


procedure Boolean isSorted (
        ConsVector CV) {
  local
    Boolean _tcomp2;


  #l14.
    call _tcomp2 := Array_Unconstrained::isSorted (CV);

  #l15.
    return _tcomp2;
}

procedure Boolean indexIsValue (
        ConsVector Z,
        Index I,
        Integer V) {
  local
    Boolean _tcomp3;


  #l16.
    call _tcomp3 := Array_Unconstrained::indexIsValue (Z, I, V);

  #l17.
    return _tcomp3;
}package Array_Unconstrained_T;


typealias Integer Index;

typealias Array_Unconstrained::Vector ConsVector;

procedure Boolean isSorted (
        ConsVector CV) {

}

procedure Boolean indexIsValue (
        ConsVector Z,
        Index I,
        Integer V) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;