package Case_Statement_Int;


procedure Activity isWorkDay (
        Integer d) {
  local
    Activity ret;
    Boolean _bert0;
    Boolean _bert1;
    Boolean _bert2;
    Boolean _bert3;
    Boolean _bert4;
    Boolean _bert5;


  #berl1.
    _bert0 := attribute__uif__first `IntType <= d;

  #berl2.
    if !(_bert0) then goto berl0;

  #berl3.
    _bert0 := d <= attribute__uif__last `IntType;

  #berl0.
    // empty loc

  #l2.
    if !(_bert0) then goto l1;

  #l3.
    ret := Work;

  #l4.
    goto l0;

  #l1.
    // empty loc

  #berl5.
    _bert1 := 4ii <= d;

  #berl6.
    if !(_bert1) then goto berl4;

  #berl7.
    _bert1 := d <= 5ii;

  #berl4.
    // empty loc

  #berl13.
    _bert3 := _bert1;

  #berl14.
    if _bert3 then goto berl12;

  #berl9.
    _bert2 := attribute__uif__first `SixType <= d;

  #berl10.
    if !(_bert2) then goto berl8;

  #berl11.
    _bert2 := d <= attribute__uif__last `SixType;

  #berl8.
    // empty loc

  #berl15.
    _bert3 := _bert2;

  #berl12.
    // empty loc

  #berl17.
    _bert4 := _bert3;

  #berl18.
    if _bert4 then goto berl16;

  #berl19.
    _bert4 := d == 7ii;

  #berl16.
    // empty loc

  #l6.
    if !(_bert4) then goto l5;

  #l7.
    ret := Party;

  #l8.
    goto l0;

  #l5.
    // empty loc

  #berl21.
    _bert5 := 8ii <= d;

  #berl22.
    if !(_bert5) then goto berl20;

  #berl23.
    _bert5 := d <= 9ii;

  #berl20.
    // empty loc

  #l10.
    if !(_bert5) then goto l9;

  #l11.
    ret := Party;

  #l12.
    goto l0;

  #l9.
    // empty loc

  #l14.
    if !(d == 10ii) then goto l13;

  #l15.
    ret := Work;

  #l16.
    goto l0;

  #l13.
    // empty loc

  #l18.
    ret := Drink;

  #l0.
    // empty loc

  #l19.
    return ret;
}package Case_Statement_Int;


enum Activity {
  Work, Party, Drink
}

typealias Integer IntType;

typealias Integer SixType;

procedure Activity isWorkDay (
        Integer d) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;