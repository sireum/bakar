dependence_test_suite_02.adb
package Dependence_Test_Suite_02;


typealias Boolean standard::boolean;

typealias Integer standard::integer;

typealias Integer standard::natural;

typealias Integer standard::positive;

typealias Float standard::float;

typealias Integer universal_integer;

procedure Success0 (
        Integer O) {

  #l1.
    O := 5ii;

  #l2.
    return;
}

procedure Success1 (
        Integer I,
        Integer O) {

  #l3.
    O := I;

  #l4.
    return;
}

procedure Success2 (
        Integer I,
        Integer O) {
  local
    Integer L;


  #l5.
    L := I;

  #l6.
    O := L;

  #l7.
    return;
}

procedure Success3 (
        Integer I,
        Integer O) {
  local
    Integer L1;
    Integer L2;
    Integer L3;


  #l8.
    L1 := I;

  #l9.
    L2 := L1;

  #l10.
    L3 := L2;

  #l11.
    O := L3;

  #l12.
    return;
}

procedure Success4 (
        Integer I1,
        Integer I2,
        Integer O) {
  local
    Integer L1;
    Integer L2;
    Integer L3;


  #l13.
    L1 := I1;

  #l14.
    L2 := I2;

  #l15.
    L3 := L1 + L2;

  #l16.
    O := L3;

  #l17.
    return;
}

procedure Success5 (
        Integer I1,
        Integer I2,
        Integer O1,
        Integer O2) {
  local
    Integer L1;
    Integer L2;
    Integer L3;


  #l18.
    O1 := I2;

  #l19.
    L1 := I1;

  #l20.
    L2 := L1;

  #l21.
    L3 := L1 + L2;

  #l22.
    O2 := O1;

  #l23.
    O1 := L3;

  #l24.
    return;
}

procedure Success6 (
        Integer I1,
        Integer I2,
        Integer O1,
        Integer O2) {

  #l25.
    O1 := I1;

  #l28.
    if !(I2 > 5ii) then goto l27;

  #l29.
    O2 := 5ii;

  #l30.
    goto l26;

  #l27.
    // empty loc

  #l31.
    O2 := 5ii;

  #l26.
    // empty loc

  #l32.
    return;
}

procedure Success7 (
        Integer I1,
        Integer I2,
        Integer O) {
  local
    Integer L1;


  #l33.
    L1 := I1;

  #l36.
    if !(L1 > I2) then goto l35;

  #l37.
    O := 6ii;

  #l38.
    goto l34;

  #l35.
    // empty loc

  #l39.
    O := 7ii;

  #l34.
    // empty loc

  #l40.
    return;
}

procedure Success8 (
        Integer I1,
        Integer I2,
        Integer O) {
  local
    Integer L1;
    Integer L2;


  #l41.
    L1 := I1;

  #l44.
    if !(L1 > 5ii) then goto l43;

  #l45.
    L2 := 6ii;

  #l46.
    goto l42;

  #l43.
    // empty loc

  #l47.
    L2 := I2;

  #l42.
    // empty loc

  #l48.
    O := L2;

  #l49.
    return;
}

procedure Success9 (
        Integer I1,
        Integer I2,
        Integer I3,
        Integer O) {
  local
    Integer L1;
    Integer L2;


  #l50.
    L1 := I1;

  #l53.
    if !(L1 > 5ii) then goto l52;

  #l54.
    L2 := 6ii;

  #l55.
    goto l51;

  #l52.
    // empty loc

  #l58.
    if !(I2 < 0ii) then goto l57;

  #l59.
    L2 := I3;

  #l60.
    goto l56;

  #l57.
    // empty loc

  #l61.
    L2 := 7ii;

  #l56.
    // empty loc

  #l51.
    // empty loc

  #l62.
    O := L2;

  #l63.
    return;
}

procedure Success10 (
        Integer I1,
        Integer I2,
        Integer I3,
        Integer O1,
        Integer O2) {
  local
    Integer L1;
    Integer L2;


  #l64.
    L2 := 5ii;

  #l65.
    L1 := I3;

  #l66.
    O2 := L1;

  #l67.
    L1 := I2;

  #l69.
    if !(L1 > 5ii) then goto l68;

  #l72.
    if !(I1 < 0ii) then goto l71;

  #l73.
    L2 := 8ii;

  #l74.
    goto l70;

  #l71.
    // empty loc

  #l75.
    L2 := 7ii;

  #l70.
    // empty loc

  #l68.
    // empty loc

  #l76.
    O1 := L2;

  #l77.
    return;
}

procedure Success11 (
        Integer I1,
        Integer O1) {
  local
    Integer Sum;
    Integer J;


  #l78.
    J := 1ii;

  #l79.
    Sum := 0ii;

  #l81.
    // empty loc

  #l82.
    if !(J <= I1) then goto l80;

  #l83.
    Sum := Sum + J;

  #l84.
    J := J + 1ii;

  #l85.
    goto l81;

  #l80.
    // empty loc

  #l86.
    O1 := Sum;

  #l87.
    return;
}

procedure Success12 (
        Integer I1,
        Integer I2,
        Integer O1) {
  local
    Integer Sum;
    Integer J;


  #l88.
    J := 1ii;

  #l89.
    Sum := 0ii;

  #l91.
    // empty loc

  #l92.
    if !(J <= I1) then goto l90;

  #l93.
    Sum := Sum + J;

  #l95.
    if !(Sum > I2) then goto l94;

  #l96.
    Sum := 0ii;

  #l94.
    // empty loc

  #l97.
    J := J + 1ii;

  #l98.
    goto l91;

  #l90.
    // empty loc

  #l99.
    O1 := Sum;

  #l100.
    return;
}

procedure Success13 (
        Integer I1,
        Integer I2,
        Integer O1) {
  local
    Integer Sum;
    Integer J1;
    Integer J2;


  #l101.
    J1 := 1ii;

  #l102.
    J2 := 1ii;

  #l103.
    Sum := 0ii;

  #l105.
    // empty loc

  #l106.
    if !(J1 <= I1) then goto l104;

  #l108.
    // empty loc

  #l109.
    if !(J2 <= I2) then goto l107;

  #l110.
    Sum := Sum + J1 * J2;

  #l111.
    J2 := J2 + 1ii;

  #l112.
    goto l108;

  #l107.
    // empty loc

  #l113.
    J1 := J1 + 1ii;

  #l114.
    goto l105;

  #l104.
    // empty loc

  #l115.
    O1 := Sum;

  #l116.
    return;
}

procedure Success14 (
        Integer I1,
        Integer O1) {
  local
    Integer Sum;
    Integer J;
    Integer L1;
    Integer L2;


  #l117.
    J := 1ii;

  #l118.
    Sum := 0ii;

  #l119.
    L2 := 0ii;

  #l121.
    // empty loc

  #l122.
    if !(J <= I1) then goto l120;

  #l123.
    Sum := Sum + J;

  #l124.
    L1 := Sum;

  #l125.
    L2 := L1;

  #l126.
    J := J + 1ii;

  #l127.
    goto l121;

  #l120.
    // empty loc

  #l128.
    O1 := Sum + L2;

  #l129.
    return;
}

procedure Success15 (
        Integer O1) {
  local
    Integer Sum;


  #l130.
    Sum := 0ii;

  #l131.
    Sum := Sum + J;

  #l132.
    O1 := Sum;

  #l133.
    return;
}

procedure Success16 (
        Integer I1,
        Integer O1) {
  local
    Integer Sum;


  #l134.
    Sum := 0ii;

  #l135.
    Sum := Sum + J;

  #l136.
    O1 := Sum;

  #l137.
    return;
}

procedure Success17 (
        Integer I1,
        Integer I2,
        Integer O1) {
  local
    Integer Sum;


  #l138.
    Sum := 0ii;

  #l139.
    Sum := Sum + J;

  #l141.
    if !(Sum > I2) then goto l140;

  #l142.
    Sum := 0ii;

  #l140.
    // empty loc

  #l143.
    O1 := Sum;

  #l144.
    return;
}

procedure Success18 (
        Integer I1,
        Integer I2,
        Integer O1) {
  local
    Integer Sum;


  #l145.
    Sum := 0ii;

  #l146.
    Sum := Sum + J1 * J2;

  #l147.
    O1 := Sum;

  #l148.
    return;
}

procedure Success19 (
        Integer I1,
        Integer I2,
        Integer O1) {
  local
    Integer Sum;


  #l149.
    Sum := 0ii;

  #l150.
    Sum := Sum + J1;

  #l151.
    O1 := Sum;

  #l152.
    return;
}

procedure Success20 (
        Integer I1,
        Integer O1) {
  local
    Integer Sum;
    Integer J;


  #l153.
    J := 1ii;

  #l154.
    Sum := 0ii;

  #l155.
    Sum := Sum + J;

  #l156.
    J := J + 1ii;

  #l157.
    O1 := Sum;

  #l158.
    return;
}

procedure Success21 (
        Integer I1,
        Integer O1) {
  local
    Integer Sum;
    Integer J;


  #l159.
    J := 1ii;

  #l160.
    Sum := 0ii;

  #l161.
    Sum := Sum + J;

  #l162.
    J := J + 1ii;

  #l164.
    if !(J >= I1) then goto l163;

  #l163.
    // empty loc

  #l165.
    O1 := Sum;

  #l166.
    return;
}

procedure Success22 (
        Integer I1,
        Integer I2,
        Integer O1) {
  local
    Integer Sum;
    Integer J;


  #l167.
    J := 1ii;

  #l168.
    Sum := 0ii;

  #l169.
    Sum := Sum + J;

  #l171.
    if !(Sum > I2) then goto l170;

  #l172.
    Sum := 0ii;

  #l170.
    // empty loc

  #l173.
    J := J + 1ii;

  #l174.
    O1 := Sum;

  #l175.
    return;
}

procedure Success23 (
        Integer I1,
        Integer I2,
        Integer O1) {
  local
    Integer Sum;
    Integer J1;
    Integer J2;


  #l176.
    J1 := 1ii;

  #l177.
    J2 := 1ii;

  #l178.
    Sum := 0ii;

  #l179.
    Sum := Sum + J1 * J2;

  #l180.
    J2 := J2 + 1ii;

  #l181.
    J1 := J1 + 1ii;

  #l182.
    O1 := Sum;

  #l183.
    return;
}

procedure Success24 (
        Integer I1,
        Integer O1) {
  local
    Integer Sum;
    Integer J;


  #l184.
    J := 1ii;

  #l185.
    Sum := 0ii;

  #l186.
    Sum := Sum + J;

  #l187.
    J := J + 1ii;

  #l188.
    O1 := Sum;

  #l189.
    return;
}

procedure Success25 (
        Integer I1,
        Integer O1) {
  local
    Integer Sum;
    Integer J;


  #l190.
    J := 1ii;

  #l191.
    Sum := 0ii;

  #l192.
    Sum := Sum + J;

  #l193.
    J := J + 1ii;

  #l194.
    O1 := Sum;

  #l195.
    return;
}

procedure Success26 (
        Integer I1,
        Integer I2,
        Integer O1) {
  local
    Integer Sum;
    Integer J;


  #l196.
    J := 1ii;

  #l197.
    Sum := 0ii;

  #l199.
    // empty loc

  #l200.
    if !(J <= I1) then goto l198;

  #l201.
    Sum := Sum + J;

  #l202.
    J := J + 1ii;

  #l203.
    goto l199;

  #l198.
    // empty loc

  #l204.
    O1 := Sum;

  #l205.
    return;
}

procedure Success27 (
        Integer I1,
        Integer I2,
        Integer O1) {
  local
    Integer Sum;


  #l206.
    Sum := 0ii;

  #l207.
    Sum := Sum + J;

  #l208.
    O1 := Sum;

  #l209.
    return;
}