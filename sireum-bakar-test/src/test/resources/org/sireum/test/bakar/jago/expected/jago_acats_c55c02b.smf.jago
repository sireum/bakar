Definition Coq_AST_Tree_XX := 
(D_Seq_Declaration_XX 1
(D_Seq_Declaration_XX 2
(D_Type_Declaration_XX 3 (Subtype_Declaration_XX 4 ((*FILE_NUM*) 1) Integer (Range_XX 1 5))) 
(D_Seq_Declaration_XX 5
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 6
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 7
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 8
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 9
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 10
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 11
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 12
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 13
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 14
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 15
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 16
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 17
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 18
D_Null_Declaration_XX (* Undefined Declarations ! *) 
D_Null_Declaration_XX (* Undefined Declarations ! *)))))))))))))))) 
(D_Procedure_Body_XX 19 
  (mkprocedure_body_xx 20
    (* = = = Procedure Name = = = *)
    ((*C55C02B*) 16)
    (* = = = Formal Parameters = = = *)
    (nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 21
  D_Null_Declaration_XX (* Undefined Declarations ! *) 
  (D_Seq_Declaration_XX 22
  (D_Object_Declaration_XX 24 (mkobject_declaration_xx 25 ((*I*) 1) Integer (Some ((E_Literal_XX 23 (Integer_Literal 0) (**(nil)**)))))) 
  (D_Seq_Declaration_XX 26
  (D_Type_Declaration_XX 27 (Integer_Type_Declaration_XX 28 ((*Index*) 3) (Range_XX 0 1))) 
  (D_Seq_Declaration_XX 29
  (D_Type_Declaration_XX 30 (Array_Type_Declaration_XX 31 ((*ArrayT*) 4) ((*index subtype mark*) Boolean) ((*component type*) (Integer_Type ((*Index*) 3))))) 
  (D_Seq_Declaration_XX 32
  (D_Object_Declaration_XX 33 (mkobject_declaration_xx 34 ((*FT*) 2) (Array_Type ((*ArrayT*) 4)) None)) 
  (D_Object_Declaration_XX 35 (mkobject_declaration_xx 36 ((*X*) 3) (Integer_Type ((*Index*) 3)) None))))))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 37
      (S_Assignment_XX 38 (E_Indexed_Component_XX 39 40 ((*FT*) 2) (E_Literal_XX 42 (Integer_Literal 0) (**(nil)**)) (**(nil)**)) (E_Literal_XX 43 (Boolean_Literal false) (**(nil)**))) 
      (S_Sequence_XX 44
      (S_Assignment_XX 45 (E_Indexed_Component_XX 46 47 ((*FT*) 2) (E_Literal_XX 49 (Integer_Literal 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 50 (Boolean_Literal true) (**(nil)**))) 
      (S_Sequence_XX 51
      S_Null_XX (* call a procedure with no procedure body ! *) 
      (S_Sequence_XX 54
      (S_While_Loop_XX 55 (E_Binary_Operation_XX 56 Not_Equal (E_Name_XX 57 (E_Identifier_XX 58 ((*I*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 59 (Integer_Literal 10) (**(nil)**)) (**(nil)**))
        (S_Assignment_XX 60 (E_Identifier_XX 61 ((*I*) 1) (**(nil)**)) (E_Binary_Operation_XX 62 Plus (E_Name_XX 63 (E_Identifier_XX 64 ((*I*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 65 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))
      ) 
      (S_Sequence_XX 66
      (S_If_XX 67 (E_Binary_Operation_XX 68 Not_Equal (E_Name_XX 69 (E_Identifier_XX 70 ((*I*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 71 (Integer_Literal 10) (**(nil)**)) (**(nil)**))
        S_Null_XX (* call a procedure with no procedure body ! *)
        S_Null_XX
      ) 
      (S_Sequence_XX 74
      (S_Assignment_XX 75 (E_Identifier_XX 76 ((*I*) 1) (**(nil)**)) (E_Literal_XX 77 (Integer_Literal 10) (**(nil)**))) 
      (S_Sequence_XX 78
      (S_If_XX 79 (E_Binary_Operation_XX 80 Not_Equal (E_Name_XX 81 (E_Identifier_XX 82 ((*I*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 83 (Integer_Literal 14) (**(nil)**)) (**(nil)**))
        (S_Assignment_XX 84 (E_Identifier_XX 85 ((*X*) 3) (**(nil)**)) (E_Literal_XX 86 (Integer_Literal 1) (**(nil)**)))
        (S_Assignment_XX 87 (E_Identifier_XX 88 ((*X*) 3) (**(nil)**)) (E_Literal_XX 89 (Integer_Literal 0) (**(nil)**)))
      ) 
      (S_Sequence_XX 90
      (S_While_Loop_XX 91 (E_Name_XX 92 (E_Indexed_Component_XX 93 94 ((*FT*) 2) (E_Name_XX 96 (E_Identifier_XX 97 ((*X*) 3) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**))
        (S_Assignment_XX 98 (E_Identifier_XX 99 ((*I*) 1) (**(nil)**)) (E_Binary_Operation_XX 100 Plus (E_Name_XX 101 (E_Identifier_XX 102 ((*I*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 103 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))
      ) 
      (S_Sequence_XX 104
      (S_If_XX 105 (E_Binary_Operation_XX 106 Not_Equal (E_Name_XX 107 (E_Identifier_XX 108 ((*I*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 109 (Integer_Literal 14) (**(nil)**)) (**(nil)**))
        S_Null_XX (* call a procedure with no procedure body ! *)
        S_Null_XX
      ) 
      S_Null_XX (* call a procedure with no procedure body ! *))))))))))
  )
)).

Definition Symbol_Table_XX := 
(mkSymbolTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*C55C02B*) 16), (0, (mkprocedure_body_xx 20
  (* = = = Procedure Name = = = *)
  ((*C55C02B*) 16)
  (* = = = Formal Parameters = = = *)
  (nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 21
D_Null_Declaration_XX (* Undefined Declarations ! *) 
(D_Seq_Declaration_XX 22
(D_Object_Declaration_XX 24 (mkobject_declaration_xx 25 ((*I*) 1) Integer (Some ((E_Literal_XX 23 (Integer_Literal 0) (**(nil)**)))))) 
(D_Seq_Declaration_XX 26
(D_Type_Declaration_XX 27 (Integer_Type_Declaration_XX 28 ((*Index*) 3) (Range_XX 0 1))) 
(D_Seq_Declaration_XX 29
(D_Type_Declaration_XX 30 (Array_Type_Declaration_XX 31 ((*ArrayT*) 4) ((*index subtype mark*) Boolean) ((*component type*) (Integer_Type ((*Index*) 3))))) 
(D_Seq_Declaration_XX 32
(D_Object_Declaration_XX 33 (mkobject_declaration_xx 34 ((*FT*) 2) (Array_Type ((*ArrayT*) 4)) None)) 
(D_Object_Declaration_XX 35 (mkobject_declaration_xx 36 ((*X*) 3) (Integer_Type ((*Index*) 3)) None))))))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 37
    (S_Assignment_XX 38 (E_Indexed_Component_XX 39 40 ((*FT*) 2) (E_Literal_XX 42 (Integer_Literal 0) (**(nil)**)) (**(nil)**)) (E_Literal_XX 43 (Boolean_Literal false) (**(nil)**))) 
    (S_Sequence_XX 44
    (S_Assignment_XX 45 (E_Indexed_Component_XX 46 47 ((*FT*) 2) (E_Literal_XX 49 (Integer_Literal 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 50 (Boolean_Literal true) (**(nil)**))) 
    (S_Sequence_XX 51
    S_Null_XX (* call a procedure with no procedure body ! *) 
    (S_Sequence_XX 54
    (S_While_Loop_XX 55 (E_Binary_Operation_XX 56 Not_Equal (E_Name_XX 57 (E_Identifier_XX 58 ((*I*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 59 (Integer_Literal 10) (**(nil)**)) (**(nil)**))
      (S_Assignment_XX 60 (E_Identifier_XX 61 ((*I*) 1) (**(nil)**)) (E_Binary_Operation_XX 62 Plus (E_Name_XX 63 (E_Identifier_XX 64 ((*I*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 65 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))
    ) 
    (S_Sequence_XX 66
    (S_If_XX 67 (E_Binary_Operation_XX 68 Not_Equal (E_Name_XX 69 (E_Identifier_XX 70 ((*I*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 71 (Integer_Literal 10) (**(nil)**)) (**(nil)**))
      S_Null_XX (* call a procedure with no procedure body ! *)
      S_Null_XX
    ) 
    (S_Sequence_XX 74
    (S_Assignment_XX 75 (E_Identifier_XX 76 ((*I*) 1) (**(nil)**)) (E_Literal_XX 77 (Integer_Literal 10) (**(nil)**))) 
    (S_Sequence_XX 78
    (S_If_XX 79 (E_Binary_Operation_XX 80 Not_Equal (E_Name_XX 81 (E_Identifier_XX 82 ((*I*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 83 (Integer_Literal 14) (**(nil)**)) (**(nil)**))
      (S_Assignment_XX 84 (E_Identifier_XX 85 ((*X*) 3) (**(nil)**)) (E_Literal_XX 86 (Integer_Literal 1) (**(nil)**)))
      (S_Assignment_XX 87 (E_Identifier_XX 88 ((*X*) 3) (**(nil)**)) (E_Literal_XX 89 (Integer_Literal 0) (**(nil)**)))
    ) 
    (S_Sequence_XX 90
    (S_While_Loop_XX 91 (E_Name_XX 92 (E_Indexed_Component_XX 93 94 ((*FT*) 2) (E_Name_XX 96 (E_Identifier_XX 97 ((*X*) 3) (**(nil)**)) (**(nil)**)) (**(nil)**)) (**(nil)**))
      (S_Assignment_XX 98 (E_Identifier_XX 99 ((*I*) 1) (**(nil)**)) (E_Binary_Operation_XX 100 Plus (E_Name_XX 101 (E_Identifier_XX 102 ((*I*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 103 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))
    ) 
    (S_Sequence_XX 104
    (S_If_XX 105 (E_Binary_Operation_XX 106 Not_Equal (E_Name_XX 107 (E_Identifier_XX 108 ((*I*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 109 (Integer_Literal 14) (**(nil)**)) (**(nil)**))
      S_Null_XX (* call a procedure with no procedure body ! *)
      S_Null_XX
    ) 
    S_Null_XX (* call a procedure with no procedure body ! *))))))))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  ((((*FILE_NUM*) 1), (Subtype_Declaration_XX 4 ((*FILE_NUM*) 1) Integer (Range_XX 1 5))) :: (((*Index*) 3), (Integer_Type_Declaration_XX 28 ((*Index*) 3) (Range_XX 0 1))) :: (((*ArrayT*) 4), (Array_Type_Declaration_XX 31 ((*ArrayT*) 4) ((*index subtype mark*) Boolean) ((*component type*) (Integer_Type ((*Index*) 3))))) :: nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((92, Boolean) :: (101, Integer) :: (83, Integer) :: (95, (Array_Type ((*ArrayT*) 4))) :: (23, Integer) :: (86, Integer) :: (77, Integer) :: (59, Integer) :: (50, Boolean) :: (41, (Array_Type ((*ArrayT*) 4))) :: (68, Boolean) :: (62, Integer) :: (89, Integer) :: (80, Boolean) :: (107, Integer) :: (71, Integer) :: (56, Boolean) :: (65, Integer) :: (106, Boolean) :: (46, Boolean) :: (109, Integer) :: (100, Integer) :: (82, Integer) :: (64, Integer) :: (85, (Integer_Type ((*Index*) 3))) :: (58, Integer) :: (49, Integer) :: (103, Integer) :: (76, Integer) :: (97, (Integer_Type ((*Index*) 3))) :: (88, (Integer_Type ((*Index*) 3))) :: (43, Boolean) :: (70, Integer) :: (61, Integer) :: (96, (Integer_Type ((*Index*) 3))) :: (69, Integer) :: (99, Integer) :: (63, Integer) :: (81, Integer) :: (108, Integer) :: (57, Integer) :: (48, (Array_Type ((*ArrayT*) 4))) :: (102, Integer) :: (93, Boolean) :: (39, Boolean) :: (42, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((92, (sloc (*Line*)66 (*Col*)12 (*EndLine*)66 (*EndCol*)17)) :: (101, (sloc (*Line*)67 (*Col*)16 (*EndLine*)67 (*EndCol*)16)) :: (83, (sloc (*Line*)59 (*Col*)15 (*EndLine*)59 (*EndCol*)16)) :: (95, (sloc (*Line*)66 (*Col*)12 (*EndLine*)66 (*EndCol*)13)) :: (23, (sloc (*Line*)35 (*Col*)21 (*EndLine*)35 (*EndCol*)21)) :: (86, (sloc (*Line*)60 (*Col*)13 (*EndLine*)60 (*EndCol*)13)) :: (77, (sloc (*Line*)57 (*Col*)11 (*EndLine*)57 (*EndCol*)12)) :: (59, (sloc (*Line*)50 (*Col*)17 (*EndLine*)50 (*EndCol*)18)) :: (50, (sloc (*Line*)46 (*Col*)15 (*EndLine*)46 (*EndCol*)18)) :: (41, (sloc (*Line*)45 (*Col*)6 (*EndLine*)45 (*EndCol*)7)) :: (68, (sloc (*Line*)53 (*Col*)9 (*EndLine*)53 (*EndCol*)15)) :: (62, (sloc (*Line*)51 (*Col*)16 (*EndLine*)51 (*EndCol*)20)) :: (89, (sloc (*Line*)62 (*Col*)13 (*EndLine*)62 (*EndCol*)13)) :: (80, (sloc (*Line*)59 (*Col*)10 (*EndLine*)59 (*EndCol*)16)) :: (107, (sloc (*Line*)69 (*Col*)9 (*EndLine*)69 (*EndCol*)9)) :: (71, (sloc (*Line*)53 (*Col*)14 (*EndLine*)53 (*EndCol*)15)) :: (56, (sloc (*Line*)50 (*Col*)12 (*EndLine*)50 (*EndCol*)18)) :: (65, (sloc (*Line*)51 (*Col*)20 (*EndLine*)51 (*EndCol*)20)) :: (106, (sloc (*Line*)69 (*Col*)9 (*EndLine*)69 (*EndCol*)15)) :: (46, (sloc (*Line*)46 (*Col*)6 (*EndLine*)46 (*EndCol*)10)) :: (109, (sloc (*Line*)69 (*Col*)14 (*EndLine*)69 (*EndCol*)15)) :: (100, (sloc (*Line*)67 (*Col*)16 (*EndLine*)67 (*EndCol*)20)) :: (82, (sloc (*Line*)59 (*Col*)10 (*EndLine*)59 (*EndCol*)10)) :: (64, (sloc (*Line*)51 (*Col*)16 (*EndLine*)51 (*EndCol*)16)) :: (85, (sloc (*Line*)60 (*Col*)8 (*EndLine*)60 (*EndCol*)8)) :: (58, (sloc (*Line*)50 (*Col*)12 (*EndLine*)50 (*EndCol*)12)) :: (49, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)9)) :: (103, (sloc (*Line*)67 (*Col*)20 (*EndLine*)67 (*EndCol*)20)) :: (76, (sloc (*Line*)57 (*Col*)6 (*EndLine*)57 (*EndCol*)6)) :: (97, (sloc (*Line*)66 (*Col*)16 (*EndLine*)66 (*EndCol*)16)) :: (88, (sloc (*Line*)62 (*Col*)8 (*EndLine*)62 (*EndCol*)8)) :: (43, (sloc (*Line*)45 (*Col*)15 (*EndLine*)45 (*EndCol*)19)) :: (70, (sloc (*Line*)53 (*Col*)9 (*EndLine*)53 (*EndCol*)9)) :: (61, (sloc (*Line*)51 (*Col*)11 (*EndLine*)51 (*EndCol*)11)) :: (96, (sloc (*Line*)66 (*Col*)16 (*EndLine*)66 (*EndCol*)16)) :: (69, (sloc (*Line*)53 (*Col*)9 (*EndLine*)53 (*EndCol*)9)) :: (99, (sloc (*Line*)67 (*Col*)11 (*EndLine*)67 (*EndCol*)11)) :: (63, (sloc (*Line*)51 (*Col*)16 (*EndLine*)51 (*EndCol*)16)) :: (81, (sloc (*Line*)59 (*Col*)10 (*EndLine*)59 (*EndCol*)10)) :: (108, (sloc (*Line*)69 (*Col*)9 (*EndLine*)69 (*EndCol*)9)) :: (57, (sloc (*Line*)50 (*Col*)12 (*EndLine*)50 (*EndCol*)12)) :: (48, (sloc (*Line*)46 (*Col*)6 (*EndLine*)46 (*EndCol*)7)) :: (102, (sloc (*Line*)67 (*Col*)16 (*EndLine*)67 (*EndCol*)16)) :: (93, (sloc (*Line*)66 (*Col*)12 (*EndLine*)66 (*EndCol*)17)) :: (39, (sloc (*Line*)45 (*Col*)6 (*EndLine*)45 (*EndCol*)10)) :: (42, (sloc (*Line*)45 (*Col*)9 (*EndLine*)45 (*EndCol*)9)) :: nil)
  (* = = = (6) name id to a pair of (name string, unique name string) map = = = *)
  (*/////////////////////////////////////////////////*)
  ((mkNameTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable names map = = = *)
  (*///////////////////////////////////*)
  ((2, ("FT", "ada://variable/C55C02B+31:11/FT+41:6")) :: (1, ("I", "ada://variable/C55C02B+31:11/I+35:6")) :: (3, ("X", "ada://variable/C55C02B+31:11/X+42:6")) :: nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram names map = = = *)
  (*////////////////////////////////////////////*)
  ((8, ("IDENT_CHAR", "ada://expression_function/ACATS_REPORT-47:9/IDENT_CHAR-117:15")) :: (11, ("IDENT_STR", "ada://expression_function/ACATS_REPORT-47:9/IDENT_STR-134:15")) :: (2, ("FAILED", "ada://procedure/ACATS_REPORT-47:9/FAILED-65:16")) :: (5, ("COMMENT", "ada://procedure/ACATS_REPORT-47:9/COMMENT-94:16")) :: (14, ("LEGAL_FILE_NAME", "ada://function/ACATS_REPORT-47:9/LEGAL_FILE_NAME-152:15")) :: (4, ("SPECIAL_ACTION", "ada://procedure/ACATS_REPORT-47:9/SPECIAL_ACTION-85:16")) :: (13, ("EQUAL", "ada://expression_function/ACATS_REPORT-47:9/EQUAL-144:15")) :: (16, ("C55C02B", "ada://procedure_body/C55C02B+31:11")) :: (7, ("IDENT_INT", "ada://expression_function/ACATS_REPORT-47:9/IDENT_INT-112:15")) :: (1, ("TEST", "ada://procedure/ACATS_REPORT-47:9/TEST-53:16")) :: (10, ("IDENT_BOOL", "ada://expression_function/ACATS_REPORT-47:9/IDENT_BOOL-129:15")) :: (9, ("IDENT_WIDE_CHAR", "ada://expression_function/ACATS_REPORT-47:9/IDENT_WIDE_CHAR-123:15")) :: (3, ("NOT_APPLICABLE", "ada://procedure/ACATS_REPORT-47:9/NOT_APPLICABLE-75:16")) :: (12, ("IDENT_WIDE_STR", "ada://expression_function/ACATS_REPORT-47:9/IDENT_WIDE_STR-139:15")) :: (15, ("TIME_STAMP", "ada://function/ACATS_REPORT-47:9/TIME_STAMP-159:15")) :: (6, ("RESULT", "ada://procedure/ACATS_REPORT-47:9/RESULT-99:16")) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) package names map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) type names map = = = *)
  (*/////////////////////////////////////*)
  ((4, ("ArrayT", "ada://ordinary_type/C55C02B+31:11/ArrayT+40:11")) :: (1, ("FILE_NUM", "ada://subtype/ACATS_REPORT-47:9/FILE_NUM-49:14")) :: (3, ("Index", "ada://ordinary_type/C55C02B+31:11/Index+39:11")) :: nil)
))
).

