Definition Coq_AST_Tree := 
(D_Seq_Declaration 1
(D_Seq_Declaration 2
(D_Type_Declaration 3 (Subtype_Declaration 4 ((*FILE_NUM*) 1) Integer (Range 1 5))) 
(D_Seq_Declaration 5
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 6
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 7
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 8
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 9
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 10
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 11
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 12
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 13
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 14
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 15
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 16
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 17
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 18
D_Null_Declaration (* Undefined Declarations ! *) 
D_Null_Declaration (* Undefined Declarations ! *)))))))))))))))) 
(D_Procedure_Body 19 
  (mkprocedure_body 20
    (* = = = Procedure Name = = = *)
    ((*C55C02B*) 16)
    (* = = = Formal Parameters = = = *)
    (nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration 21
  D_Null_Declaration (* Undefined Declarations ! *) 
  (D_Seq_Declaration 22
  (D_Object_Declaration 24 (mkobject_declaration 25 ((*I*) 1) Integer (Some ((E_Literal 23 (Integer_Literal 0) ))))) 
  (D_Seq_Declaration 26
  (D_Type_Declaration 27 (Integer_Type_Declaration 28 ((*Index*) 3) (Range 0 1))) 
  (D_Seq_Declaration 29
  (D_Type_Declaration 30 (Array_Type_Declaration 31 ((*ArrayT*) 4) ((*index subtype mark*) Boolean) ((*component type*) (Integer_Type ((*Index*) 3))))) 
  (D_Seq_Declaration 32
  (D_Object_Declaration 33 (mkobject_declaration 34 ((*FT*) 2) (Array_Type ((*ArrayT*) 4)) None)) 
  (D_Object_Declaration 35 (mkobject_declaration 36 ((*X*) 3) (Integer_Type ((*Index*) 3)) None))))))))
    (* = = = Procedure Body = = = *)
      (S_Sequence 37
      (S_Assignment 38 (E_Indexed_Component 39 40 ((*FT*) 2) (E_Literal 42 (Integer_Literal 0) ) ) (E_Literal 43 (Boolean_Literal false) )) 
      (S_Sequence 44
      (S_Assignment 45 (E_Indexed_Component 46 47 ((*FT*) 2) (E_Literal 49 (Integer_Literal 1) ) ) (E_Literal 50 (Boolean_Literal true) )) 
      (S_Sequence 51
      S_Null (* call a procedure with no procedure body ! *) 
      (S_Sequence 54
      (S_While_Loop 55 (E_Binary_Operation 56 Not_Equal (E_Name 57 (E_Identifier 58 ((*I*) 1) ) ) (E_Literal 59 (Integer_Literal 10) ) )
        (S_Assignment 60 (E_Identifier 61 ((*I*) 1) ) (E_Binary_Operation 62 Plus (E_Name 63 (E_Identifier 64 ((*I*) 1) ) ) (E_Literal 65 (Integer_Literal 1) ) ))
      ) 
      (S_Sequence 66
      (S_If 67 (E_Binary_Operation 68 Not_Equal (E_Name 69 (E_Identifier 70 ((*I*) 1) ) ) (E_Literal 71 (Integer_Literal 10) ) )
        S_Null (* call a procedure with no procedure body ! *)
        S_Null
      ) 
      (S_Sequence 74
      (S_Assignment 75 (E_Identifier 76 ((*I*) 1) ) (E_Literal 77 (Integer_Literal 10) )) 
      (S_Sequence 78
      (S_If 79 (E_Binary_Operation 80 Not_Equal (E_Name 81 (E_Identifier 82 ((*I*) 1) ) ) (E_Literal 83 (Integer_Literal 14) ) )
        (S_Assignment 84 (E_Identifier 85 ((*X*) 3) ) (E_Literal 86 (Integer_Literal 1) ))
        (S_Assignment 87 (E_Identifier 88 ((*X*) 3) ) (E_Literal 89 (Integer_Literal 0) ))
      ) 
      (S_Sequence 90
      (S_While_Loop 91 (E_Name 92 (E_Indexed_Component 93 94 ((*FT*) 2) (E_Name 96 (E_Identifier 97 ((*X*) 3) ) ) ) )
        (S_Assignment 98 (E_Identifier 99 ((*I*) 1) ) (E_Binary_Operation 100 Plus (E_Name 101 (E_Identifier 102 ((*I*) 1) ) ) (E_Literal 103 (Integer_Literal 1) ) ))
      ) 
      (S_Sequence 104
      (S_If 105 (E_Binary_Operation 106 Not_Equal (E_Name 107 (E_Identifier 108 ((*I*) 1) ) ) (E_Literal 109 (Integer_Literal 14) ) )
        S_Null (* call a procedure with no procedure body ! *)
        S_Null
      ) 
      S_Null (* call a procedure with no procedure body ! *))))))))))
  )
)).

Definition Symbol_Table := 
(mkSymbolTable
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*C55C02B*) 16), (0, (mkprocedure_body 20
  (* = = = Procedure Name = = = *)
  ((*C55C02B*) 16)
  (* = = = Formal Parameters = = = *)
  (nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration 21
D_Null_Declaration (* Undefined Declarations ! *) 
(D_Seq_Declaration 22
(D_Object_Declaration 24 (mkobject_declaration 25 ((*I*) 1) Integer (Some ((E_Literal 23 (Integer_Literal 0) ))))) 
(D_Seq_Declaration 26
(D_Type_Declaration 27 (Integer_Type_Declaration 28 ((*Index*) 3) (Range 0 1))) 
(D_Seq_Declaration 29
(D_Type_Declaration 30 (Array_Type_Declaration 31 ((*ArrayT*) 4) ((*index subtype mark*) Boolean) ((*component type*) (Integer_Type ((*Index*) 3))))) 
(D_Seq_Declaration 32
(D_Object_Declaration 33 (mkobject_declaration 34 ((*FT*) 2) (Array_Type ((*ArrayT*) 4)) None)) 
(D_Object_Declaration 35 (mkobject_declaration 36 ((*X*) 3) (Integer_Type ((*Index*) 3)) None))))))))
  (* = = = Procedure Body = = = *)
    (S_Sequence 37
    (S_Assignment 38 (E_Indexed_Component 39 40 ((*FT*) 2) (E_Literal 42 (Integer_Literal 0) ) ) (E_Literal 43 (Boolean_Literal false) )) 
    (S_Sequence 44
    (S_Assignment 45 (E_Indexed_Component 46 47 ((*FT*) 2) (E_Literal 49 (Integer_Literal 1) ) ) (E_Literal 50 (Boolean_Literal true) )) 
    (S_Sequence 51
    S_Null (* call a procedure with no procedure body ! *) 
    (S_Sequence 54
    (S_While_Loop 55 (E_Binary_Operation 56 Not_Equal (E_Name 57 (E_Identifier 58 ((*I*) 1) ) ) (E_Literal 59 (Integer_Literal 10) ) )
      (S_Assignment 60 (E_Identifier 61 ((*I*) 1) ) (E_Binary_Operation 62 Plus (E_Name 63 (E_Identifier 64 ((*I*) 1) ) ) (E_Literal 65 (Integer_Literal 1) ) ))
    ) 
    (S_Sequence 66
    (S_If 67 (E_Binary_Operation 68 Not_Equal (E_Name 69 (E_Identifier 70 ((*I*) 1) ) ) (E_Literal 71 (Integer_Literal 10) ) )
      S_Null (* call a procedure with no procedure body ! *)
      S_Null
    ) 
    (S_Sequence 74
    (S_Assignment 75 (E_Identifier 76 ((*I*) 1) ) (E_Literal 77 (Integer_Literal 10) )) 
    (S_Sequence 78
    (S_If 79 (E_Binary_Operation 80 Not_Equal (E_Name 81 (E_Identifier 82 ((*I*) 1) ) ) (E_Literal 83 (Integer_Literal 14) ) )
      (S_Assignment 84 (E_Identifier 85 ((*X*) 3) ) (E_Literal 86 (Integer_Literal 1) ))
      (S_Assignment 87 (E_Identifier 88 ((*X*) 3) ) (E_Literal 89 (Integer_Literal 0) ))
    ) 
    (S_Sequence 90
    (S_While_Loop 91 (E_Name 92 (E_Indexed_Component 93 94 ((*FT*) 2) (E_Name 96 (E_Identifier 97 ((*X*) 3) ) ) ) )
      (S_Assignment 98 (E_Identifier 99 ((*I*) 1) ) (E_Binary_Operation 100 Plus (E_Name 101 (E_Identifier 102 ((*I*) 1) ) ) (E_Literal 103 (Integer_Literal 1) ) ))
    ) 
    (S_Sequence 104
    (S_If 105 (E_Binary_Operation 106 Not_Equal (E_Name 107 (E_Identifier 108 ((*I*) 1) ) ) (E_Literal 109 (Integer_Literal 14) ) )
      S_Null (* call a procedure with no procedure body ! *)
      S_Null
    ) 
    S_Null (* call a procedure with no procedure body ! *))))))))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  ((((*FILE_NUM*) 1), (Subtype_Declaration 4 ((*FILE_NUM*) 1) Integer (Range 1 5))) :: (((*Index*) 3), (Integer_Type_Declaration 28 ((*Index*) 3) (Range 0 1))) :: (((*ArrayT*) 4), (Array_Type_Declaration 31 ((*ArrayT*) 4) ((*index subtype mark*) Boolean) ((*component type*) (Integer_Type ((*Index*) 3))))) :: nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((92, Boolean) :: (101, Integer) :: (83, Integer) :: (95, (Array_Type ((*ArrayT*) 4))) :: (23, Integer) :: (86, Integer) :: (77, Integer) :: (59, Integer) :: (50, Boolean) :: (41, (Array_Type ((*ArrayT*) 4))) :: (68, Boolean) :: (62, Integer) :: (89, Integer) :: (80, Boolean) :: (107, Integer) :: (71, Integer) :: (56, Boolean) :: (65, Integer) :: (106, Boolean) :: (46, Boolean) :: (109, Integer) :: (100, Integer) :: (82, Integer) :: (64, Integer) :: (85, (Integer_Type ((*Index*) 3))) :: (58, Integer) :: (49, Integer) :: (103, Integer) :: (76, Integer) :: (97, (Integer_Type ((*Index*) 3))) :: (88, (Integer_Type ((*Index*) 3))) :: (43, Boolean) :: (70, Integer) :: (61, Integer) :: (96, (Integer_Type ((*Index*) 3))) :: (69, Integer) :: (99, Integer) :: (63, Integer) :: (81, Integer) :: (108, Integer) :: (57, Integer) :: (48, (Array_Type ((*ArrayT*) 4))) :: (102, Integer) :: (93, Boolean) :: (39, Boolean) :: (42, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((92, (sloc (*Line*)66 (*Col*)12 (*EndLine*)66 (*EndCol*)17)) :: (101, (sloc (*Line*)67 (*Col*)16 (*EndLine*)67 (*EndCol*)16)) :: (83, (sloc (*Line*)59 (*Col*)15 (*EndLine*)59 (*EndCol*)16)) :: (95, (sloc (*Line*)66 (*Col*)12 (*EndLine*)66 (*EndCol*)13)) :: (23, (sloc (*Line*)35 (*Col*)21 (*EndLine*)35 (*EndCol*)21)) :: (86, (sloc (*Line*)60 (*Col*)13 (*EndLine*)60 (*EndCol*)13)) :: (77, (sloc (*Line*)57 (*Col*)11 (*EndLine*)57 (*EndCol*)12)) :: (59, (sloc (*Line*)50 (*Col*)17 (*EndLine*)50 (*EndCol*)18)) :: (50, (sloc (*Line*)46 (*Col*)15 (*EndLine*)46 (*EndCol*)18)) :: (41, (sloc (*Line*)45 (*Col*)6 (*EndLine*)45 (*EndCol*)7)) :: (68, (sloc (*Line*)53 (*Col*)9 (*EndLine*)53 (*EndCol*)15)) :: (62, (sloc (*Line*)51 (*Col*)16 (*EndLine*)51 (*EndCol*)20)) :: (89, (sloc (*Line*)62 (*Col*)13 (*EndLine*)62 (*EndCol*)13)) :: (80, (sloc (*Line*)59 (*Col*)10 (*EndLine*)59 (*EndCol*)16)) :: (107, (sloc (*Line*)69 (*Col*)9 (*EndLine*)69 (*EndCol*)9)) :: (71, (sloc (*Line*)53 (*Col*)14 (*EndLine*)53 (*EndCol*)15)) :: (56, (sloc (*Line*)50 (*Col*)12 (*EndLine*)50 (*EndCol*)18)) :: (65, (sloc (*Line*)51 (*Col*)20 (*EndLine*)51 (*EndCol*)20)) :: (106, (sloc (*Line*)69 (*Col*)9 (*EndLine*)69 (*EndCol*)15)) :: (46, (sloc (*Line*)46 (*Col*)6 (*EndLine*)46 (*EndCol*)10)) :: (109, (sloc (*Line*)69 (*Col*)14 (*EndLine*)69 (*EndCol*)15)) :: (100, (sloc (*Line*)67 (*Col*)16 (*EndLine*)67 (*EndCol*)20)) :: (82, (sloc (*Line*)59 (*Col*)10 (*EndLine*)59 (*EndCol*)10)) :: (64, (sloc (*Line*)51 (*Col*)16 (*EndLine*)51 (*EndCol*)16)) :: (85, (sloc (*Line*)60 (*Col*)8 (*EndLine*)60 (*EndCol*)8)) :: (58, (sloc (*Line*)50 (*Col*)12 (*EndLine*)50 (*EndCol*)12)) :: (49, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)9)) :: (103, (sloc (*Line*)67 (*Col*)20 (*EndLine*)67 (*EndCol*)20)) :: (76, (sloc (*Line*)57 (*Col*)6 (*EndLine*)57 (*EndCol*)6)) :: (97, (sloc (*Line*)66 (*Col*)16 (*EndLine*)66 (*EndCol*)16)) :: (88, (sloc (*Line*)62 (*Col*)8 (*EndLine*)62 (*EndCol*)8)) :: (43, (sloc (*Line*)45 (*Col*)15 (*EndLine*)45 (*EndCol*)19)) :: (70, (sloc (*Line*)53 (*Col*)9 (*EndLine*)53 (*EndCol*)9)) :: (61, (sloc (*Line*)51 (*Col*)11 (*EndLine*)51 (*EndCol*)11)) :: (96, (sloc (*Line*)66 (*Col*)16 (*EndLine*)66 (*EndCol*)16)) :: (69, (sloc (*Line*)53 (*Col*)9 (*EndLine*)53 (*EndCol*)9)) :: (99, (sloc (*Line*)67 (*Col*)11 (*EndLine*)67 (*EndCol*)11)) :: (63, (sloc (*Line*)51 (*Col*)16 (*EndLine*)51 (*EndCol*)16)) :: (81, (sloc (*Line*)59 (*Col*)10 (*EndLine*)59 (*EndCol*)10)) :: (108, (sloc (*Line*)69 (*Col*)9 (*EndLine*)69 (*EndCol*)9)) :: (57, (sloc (*Line*)50 (*Col*)12 (*EndLine*)50 (*EndCol*)12)) :: (48, (sloc (*Line*)46 (*Col*)6 (*EndLine*)46 (*EndCol*)7)) :: (102, (sloc (*Line*)67 (*Col*)16 (*EndLine*)67 (*EndCol*)16)) :: (93, (sloc (*Line*)66 (*Col*)12 (*EndLine*)66 (*EndCol*)17)) :: (39, (sloc (*Line*)45 (*Col*)6 (*EndLine*)45 (*EndCol*)10)) :: (42, (sloc (*Line*)45 (*Col*)9 (*EndLine*)45 (*EndCol*)9)) :: nil)
  (* = = = (6) name id to a pair of (name string, unique name string) map = = = *)
  (*/////////////////////////////////////////////////*)
  ((mkNameTable
  (*///////////////////////////////////*)
  (* = = = (1) variable names map = = = *)
  (*///////////////////////////////////*)
  ((2, ("FT", "ada://variable/C55C02B+31:11/FT+41:6")) :: (1, ("I", "ada://variable/C55C02B+31:11/I+35:6")) :: (3, ("X", "ada://variable/C55C02B+31:11/X+42:6")) :: nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram names map = = = *)
  (*////////////////////////////////////////////*)
  ((8, ("IDENT_CHAR", "ada://expression_function/ACATS_REPORT-47:9/IDENT_CHAR-117:15")) :: (11, ("IDENT_STR", "ada://expression_function/ACATS_REPORT-47:9/IDENT_STR-134:15")) :: (2, ("FAILED", "ada://procedure/ACATS_REPORT-47:9/FAILED-65:16")) :: (5, ("COMMENT", "ada://procedure/ACATS_REPORT-47:9/COMMENT-94:16")) :: (14, ("LEGAL_FILE_NAME", "ada://function/ACATS_REPORT-47:9/LEGAL_FILE_NAME-152:15")) :: (4, ("SPECIAL_ACTION", "ada://procedure/ACATS_REPORT-47:9/SPECIAL_ACTION-85:16")) :: (13, ("EQUAL", "ada://expression_function/ACATS_REPORT-47:9/EQUAL-144:15")) :: (16, ("C55C02B", "ada://procedure_body/C55C02B+31:11")) :: (7, ("IDENT_INT", "ada://expression_function/ACATS_REPORT-47:9/IDENT_INT-112:15")) :: (1, ("TEST", "ada://procedure/ACATS_REPORT-47:9/TEST-53:16")) :: (10, ("IDENT_BOOL", "ada://expression_function/ACATS_REPORT-47:9/IDENT_BOOL-129:15")) :: (9, ("IDENT_WIDE_CHAR", "ada://expression_function/ACATS_REPORT-47:9/IDENT_WIDE_CHAR-123:15")) :: (3, ("NOT_APPLICABLE", "ada://procedure/ACATS_REPORT-47:9/NOT_APPLICABLE-75:16")) :: (12, ("IDENT_WIDE_STR", "ada://expression_function/ACATS_REPORT-47:9/IDENT_WIDE_STR-139:15")) :: (15, ("TIME_STAMP", "ada://function/ACATS_REPORT-47:9/TIME_STAMP-159:15")) :: (6, ("RESULT", "ada://procedure/ACATS_REPORT-47:9/RESULT-99:16")) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) package names map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) type names map = = = *)
  (*/////////////////////////////////////*)
  ((4, ("ArrayT", "ada://ordinary_type/C55C02B+31:11/ArrayT+40:11")) :: (1, ("FILE_NUM", "ada://subtype/ACATS_REPORT-47:9/FILE_NUM-49:14")) :: (3, ("Index", "ada://ordinary_type/C55C02B+31:11/Index+39:11")) :: nil)
))
).

Definition Coq_AST_Tree_X := 
(D_Seq_Declaration_X 1
(D_Seq_Declaration_X 2
(D_Type_Declaration_X 3 (Subtype_Declaration_X 4 ((*FILE_NUM*) 1) Integer (Range_X 1 5))) 
(D_Seq_Declaration_X 5
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 6
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 7
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 8
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 9
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 10
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 11
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 12
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 13
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 14
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 15
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 16
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 17
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 18
D_Null_Declaration_X (* Undefined Declarations ! *) 
D_Null_Declaration_X (* Undefined Declarations ! *)))))))))))))))) 
(D_Procedure_Body_X 19 
  (mkprocedure_body_x 20
    (* = = = Procedure Name = = = *)
    ((*C55C02B*) 16)
    (* = = = Formal Parameters = = = *)
    (nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_X 21
  D_Null_Declaration_X (* Undefined Declarations ! *) 
  (D_Seq_Declaration_X 22
  (D_Object_Declaration_X 24 (mkobject_declaration_x 25 ((*I*) 1) Integer (Some ((E_Literal_X 23 (Integer_Literal 0) (nil)))))) 
  (D_Seq_Declaration_X 26
  (D_Type_Declaration_X 27 (Integer_Type_Declaration_X 28 ((*Index*) 3) (Range_X 0 1))) 
  (D_Seq_Declaration_X 29
  (D_Type_Declaration_X 30 (Array_Type_Declaration_X 31 ((*ArrayT*) 4) ((*index subtype mark*) Boolean) ((*component type*) (Integer_Type ((*Index*) 3))))) 
  (D_Seq_Declaration_X 32
  (D_Object_Declaration_X 33 (mkobject_declaration_x 34 ((*FT*) 2) (Array_Type ((*ArrayT*) 4)) None)) 
  (D_Object_Declaration_X 35 (mkobject_declaration_x 36 ((*X*) 3) (Integer_Type ((*Index*) 3)) None))))))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_X 37
      (S_Assignment_X 38 (E_Indexed_Component_X 39 40 ((*FT*) 2) (E_Literal_X 42 (Integer_Literal 0) (nil)) (nil)) (E_Literal_X 43 (Boolean_Literal false) (nil))) 
      (S_Sequence_X 44
      (S_Assignment_X 45 (E_Indexed_Component_X 46 47 ((*FT*) 2) (E_Literal_X 49 (Integer_Literal 1) (nil)) (nil)) (E_Literal_X 50 (Boolean_Literal true) (nil))) 
      (S_Sequence_X 51
      S_Null_X (* call a procedure with no procedure body ! *) 
      (S_Sequence_X 54
      (S_While_Loop_X 55 (E_Binary_Operation_X 56 Not_Equal (E_Name_X 57 (E_Identifier_X 58 ((*I*) 1) (nil)) (nil)) (E_Literal_X 59 (Integer_Literal 10) (nil)) (nil))
        (S_Assignment_X 60 (E_Identifier_X 61 ((*I*) 1) (nil)) (E_Binary_Operation_X 62 Plus (E_Name_X 63 (E_Identifier_X 64 ((*I*) 1) (nil)) (nil)) (E_Literal_X 65 (Integer_Literal 1) (nil)) (Do_Overflow_Check :: nil)))
      ) 
      (S_Sequence_X 66
      (S_If_X 67 (E_Binary_Operation_X 68 Not_Equal (E_Name_X 69 (E_Identifier_X 70 ((*I*) 1) (nil)) (nil)) (E_Literal_X 71 (Integer_Literal 10) (nil)) (nil))
        S_Null_X (* call a procedure with no procedure body ! *)
        S_Null_X
      ) 
      (S_Sequence_X 74
      (S_Assignment_X 75 (E_Identifier_X 76 ((*I*) 1) (nil)) (E_Literal_X 77 (Integer_Literal 10) (nil))) 
      (S_Sequence_X 78
      (S_If_X 79 (E_Binary_Operation_X 80 Not_Equal (E_Name_X 81 (E_Identifier_X 82 ((*I*) 1) (nil)) (nil)) (E_Literal_X 83 (Integer_Literal 14) (nil)) (nil))
        (S_Assignment_X 84 (E_Identifier_X 85 ((*X*) 3) (nil)) (E_Literal_X 86 (Integer_Literal 1) (nil)))
        (S_Assignment_X 87 (E_Identifier_X 88 ((*X*) 3) (nil)) (E_Literal_X 89 (Integer_Literal 0) (nil)))
      ) 
      (S_Sequence_X 90
      (S_While_Loop_X 91 (E_Name_X 92 (E_Indexed_Component_X 93 94 ((*FT*) 2) (E_Name_X 96 (E_Identifier_X 97 ((*X*) 3) (nil)) (nil)) (nil)) (nil))
        (S_Assignment_X 98 (E_Identifier_X 99 ((*I*) 1) (nil)) (E_Binary_Operation_X 100 Plus (E_Name_X 101 (E_Identifier_X 102 ((*I*) 1) (nil)) (nil)) (E_Literal_X 103 (Integer_Literal 1) (nil)) (Do_Overflow_Check :: nil)))
      ) 
      (S_Sequence_X 104
      (S_If_X 105 (E_Binary_Operation_X 106 Not_Equal (E_Name_X 107 (E_Identifier_X 108 ((*I*) 1) (nil)) (nil)) (E_Literal_X 109 (Integer_Literal 14) (nil)) (nil))
        S_Null_X (* call a procedure with no procedure body ! *)
        S_Null_X
      ) 
      S_Null_X (* call a procedure with no procedure body ! *))))))))))
  )
)).

Definition Symbol_Table_X := 
(mkSymbolTable_x
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*C55C02B*) 16), (0, (mkprocedure_body_x 20
  (* = = = Procedure Name = = = *)
  ((*C55C02B*) 16)
  (* = = = Formal Parameters = = = *)
  (nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_X 21
D_Null_Declaration_X (* Undefined Declarations ! *) 
(D_Seq_Declaration_X 22
(D_Object_Declaration_X 24 (mkobject_declaration_x 25 ((*I*) 1) Integer (Some ((E_Literal_X 23 (Integer_Literal 0) (nil)))))) 
(D_Seq_Declaration_X 26
(D_Type_Declaration_X 27 (Integer_Type_Declaration_X 28 ((*Index*) 3) (Range_X 0 1))) 
(D_Seq_Declaration_X 29
(D_Type_Declaration_X 30 (Array_Type_Declaration_X 31 ((*ArrayT*) 4) ((*index subtype mark*) Boolean) ((*component type*) (Integer_Type ((*Index*) 3))))) 
(D_Seq_Declaration_X 32
(D_Object_Declaration_X 33 (mkobject_declaration_x 34 ((*FT*) 2) (Array_Type ((*ArrayT*) 4)) None)) 
(D_Object_Declaration_X 35 (mkobject_declaration_x 36 ((*X*) 3) (Integer_Type ((*Index*) 3)) None))))))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_X 37
    (S_Assignment_X 38 (E_Indexed_Component_X 39 40 ((*FT*) 2) (E_Literal_X 42 (Integer_Literal 0) (nil)) (nil)) (E_Literal_X 43 (Boolean_Literal false) (nil))) 
    (S_Sequence_X 44
    (S_Assignment_X 45 (E_Indexed_Component_X 46 47 ((*FT*) 2) (E_Literal_X 49 (Integer_Literal 1) (nil)) (nil)) (E_Literal_X 50 (Boolean_Literal true) (nil))) 
    (S_Sequence_X 51
    S_Null_X (* call a procedure with no procedure body ! *) 
    (S_Sequence_X 54
    (S_While_Loop_X 55 (E_Binary_Operation_X 56 Not_Equal (E_Name_X 57 (E_Identifier_X 58 ((*I*) 1) (nil)) (nil)) (E_Literal_X 59 (Integer_Literal 10) (nil)) (nil))
      (S_Assignment_X 60 (E_Identifier_X 61 ((*I*) 1) (nil)) (E_Binary_Operation_X 62 Plus (E_Name_X 63 (E_Identifier_X 64 ((*I*) 1) (nil)) (nil)) (E_Literal_X 65 (Integer_Literal 1) (nil)) (Do_Overflow_Check :: nil)))
    ) 
    (S_Sequence_X 66
    (S_If_X 67 (E_Binary_Operation_X 68 Not_Equal (E_Name_X 69 (E_Identifier_X 70 ((*I*) 1) (nil)) (nil)) (E_Literal_X 71 (Integer_Literal 10) (nil)) (nil))
      S_Null_X (* call a procedure with no procedure body ! *)
      S_Null_X
    ) 
    (S_Sequence_X 74
    (S_Assignment_X 75 (E_Identifier_X 76 ((*I*) 1) (nil)) (E_Literal_X 77 (Integer_Literal 10) (nil))) 
    (S_Sequence_X 78
    (S_If_X 79 (E_Binary_Operation_X 80 Not_Equal (E_Name_X 81 (E_Identifier_X 82 ((*I*) 1) (nil)) (nil)) (E_Literal_X 83 (Integer_Literal 14) (nil)) (nil))
      (S_Assignment_X 84 (E_Identifier_X 85 ((*X*) 3) (nil)) (E_Literal_X 86 (Integer_Literal 1) (nil)))
      (S_Assignment_X 87 (E_Identifier_X 88 ((*X*) 3) (nil)) (E_Literal_X 89 (Integer_Literal 0) (nil)))
    ) 
    (S_Sequence_X 90
    (S_While_Loop_X 91 (E_Name_X 92 (E_Indexed_Component_X 93 94 ((*FT*) 2) (E_Name_X 96 (E_Identifier_X 97 ((*X*) 3) (nil)) (nil)) (nil)) (nil))
      (S_Assignment_X 98 (E_Identifier_X 99 ((*I*) 1) (nil)) (E_Binary_Operation_X 100 Plus (E_Name_X 101 (E_Identifier_X 102 ((*I*) 1) (nil)) (nil)) (E_Literal_X 103 (Integer_Literal 1) (nil)) (Do_Overflow_Check :: nil)))
    ) 
    (S_Sequence_X 104
    (S_If_X 105 (E_Binary_Operation_X 106 Not_Equal (E_Name_X 107 (E_Identifier_X 108 ((*I*) 1) (nil)) (nil)) (E_Literal_X 109 (Integer_Literal 14) (nil)) (nil))
      S_Null_X (* call a procedure with no procedure body ! *)
      S_Null_X
    ) 
    S_Null_X (* call a procedure with no procedure body ! *))))))))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  ((((*FILE_NUM*) 1), (Subtype_Declaration_X 4 ((*FILE_NUM*) 1) Integer (Range_X 1 5))) :: (((*Index*) 3), (Integer_Type_Declaration_X 28 ((*Index*) 3) (Range_X 0 1))) :: (((*ArrayT*) 4), (Array_Type_Declaration_X 31 ((*ArrayT*) 4) ((*index subtype mark*) Boolean) ((*component type*) (Integer_Type ((*Index*) 3))))) :: nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((92, Boolean) :: (101, Integer) :: (83, Integer) :: (95, (Array_Type ((*ArrayT*) 4))) :: (23, Integer) :: (86, Integer) :: (77, Integer) :: (59, Integer) :: (50, Boolean) :: (41, (Array_Type ((*ArrayT*) 4))) :: (68, Boolean) :: (62, Integer) :: (89, Integer) :: (80, Boolean) :: (107, Integer) :: (71, Integer) :: (56, Boolean) :: (65, Integer) :: (106, Boolean) :: (46, Boolean) :: (109, Integer) :: (100, Integer) :: (82, Integer) :: (64, Integer) :: (85, (Integer_Type ((*Index*) 3))) :: (58, Integer) :: (49, Integer) :: (103, Integer) :: (76, Integer) :: (97, (Integer_Type ((*Index*) 3))) :: (88, (Integer_Type ((*Index*) 3))) :: (43, Boolean) :: (70, Integer) :: (61, Integer) :: (96, (Integer_Type ((*Index*) 3))) :: (69, Integer) :: (99, Integer) :: (63, Integer) :: (81, Integer) :: (108, Integer) :: (57, Integer) :: (48, (Array_Type ((*ArrayT*) 4))) :: (102, Integer) :: (93, Boolean) :: (39, Boolean) :: (42, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((92, (sloc (*Line*)66 (*Col*)12 (*EndLine*)66 (*EndCol*)17)) :: (101, (sloc (*Line*)67 (*Col*)16 (*EndLine*)67 (*EndCol*)16)) :: (83, (sloc (*Line*)59 (*Col*)15 (*EndLine*)59 (*EndCol*)16)) :: (95, (sloc (*Line*)66 (*Col*)12 (*EndLine*)66 (*EndCol*)13)) :: (23, (sloc (*Line*)35 (*Col*)21 (*EndLine*)35 (*EndCol*)21)) :: (86, (sloc (*Line*)60 (*Col*)13 (*EndLine*)60 (*EndCol*)13)) :: (77, (sloc (*Line*)57 (*Col*)11 (*EndLine*)57 (*EndCol*)12)) :: (59, (sloc (*Line*)50 (*Col*)17 (*EndLine*)50 (*EndCol*)18)) :: (50, (sloc (*Line*)46 (*Col*)15 (*EndLine*)46 (*EndCol*)18)) :: (41, (sloc (*Line*)45 (*Col*)6 (*EndLine*)45 (*EndCol*)7)) :: (68, (sloc (*Line*)53 (*Col*)9 (*EndLine*)53 (*EndCol*)15)) :: (62, (sloc (*Line*)51 (*Col*)16 (*EndLine*)51 (*EndCol*)20)) :: (89, (sloc (*Line*)62 (*Col*)13 (*EndLine*)62 (*EndCol*)13)) :: (80, (sloc (*Line*)59 (*Col*)10 (*EndLine*)59 (*EndCol*)16)) :: (107, (sloc (*Line*)69 (*Col*)9 (*EndLine*)69 (*EndCol*)9)) :: (71, (sloc (*Line*)53 (*Col*)14 (*EndLine*)53 (*EndCol*)15)) :: (56, (sloc (*Line*)50 (*Col*)12 (*EndLine*)50 (*EndCol*)18)) :: (65, (sloc (*Line*)51 (*Col*)20 (*EndLine*)51 (*EndCol*)20)) :: (106, (sloc (*Line*)69 (*Col*)9 (*EndLine*)69 (*EndCol*)15)) :: (46, (sloc (*Line*)46 (*Col*)6 (*EndLine*)46 (*EndCol*)10)) :: (109, (sloc (*Line*)69 (*Col*)14 (*EndLine*)69 (*EndCol*)15)) :: (100, (sloc (*Line*)67 (*Col*)16 (*EndLine*)67 (*EndCol*)20)) :: (82, (sloc (*Line*)59 (*Col*)10 (*EndLine*)59 (*EndCol*)10)) :: (64, (sloc (*Line*)51 (*Col*)16 (*EndLine*)51 (*EndCol*)16)) :: (85, (sloc (*Line*)60 (*Col*)8 (*EndLine*)60 (*EndCol*)8)) :: (58, (sloc (*Line*)50 (*Col*)12 (*EndLine*)50 (*EndCol*)12)) :: (49, (sloc (*Line*)46 (*Col*)9 (*EndLine*)46 (*EndCol*)9)) :: (103, (sloc (*Line*)67 (*Col*)20 (*EndLine*)67 (*EndCol*)20)) :: (76, (sloc (*Line*)57 (*Col*)6 (*EndLine*)57 (*EndCol*)6)) :: (97, (sloc (*Line*)66 (*Col*)16 (*EndLine*)66 (*EndCol*)16)) :: (88, (sloc (*Line*)62 (*Col*)8 (*EndLine*)62 (*EndCol*)8)) :: (43, (sloc (*Line*)45 (*Col*)15 (*EndLine*)45 (*EndCol*)19)) :: (70, (sloc (*Line*)53 (*Col*)9 (*EndLine*)53 (*EndCol*)9)) :: (61, (sloc (*Line*)51 (*Col*)11 (*EndLine*)51 (*EndCol*)11)) :: (96, (sloc (*Line*)66 (*Col*)16 (*EndLine*)66 (*EndCol*)16)) :: (69, (sloc (*Line*)53 (*Col*)9 (*EndLine*)53 (*EndCol*)9)) :: (99, (sloc (*Line*)67 (*Col*)11 (*EndLine*)67 (*EndCol*)11)) :: (63, (sloc (*Line*)51 (*Col*)16 (*EndLine*)51 (*EndCol*)16)) :: (81, (sloc (*Line*)59 (*Col*)10 (*EndLine*)59 (*EndCol*)10)) :: (108, (sloc (*Line*)69 (*Col*)9 (*EndLine*)69 (*EndCol*)9)) :: (57, (sloc (*Line*)50 (*Col*)12 (*EndLine*)50 (*EndCol*)12)) :: (48, (sloc (*Line*)46 (*Col*)6 (*EndLine*)46 (*EndCol*)7)) :: (102, (sloc (*Line*)67 (*Col*)16 (*EndLine*)67 (*EndCol*)16)) :: (93, (sloc (*Line*)66 (*Col*)12 (*EndLine*)66 (*EndCol*)17)) :: (39, (sloc (*Line*)45 (*Col*)6 (*EndLine*)45 (*EndCol*)10)) :: (42, (sloc (*Line*)45 (*Col*)9 (*EndLine*)45 (*EndCol*)9)) :: nil)
  (* = = = (6) name id to a pair of (name string, unique name string) map = = = *)
  (*/////////////////////////////////////////////////*)
  ((mkNameTable_x
  (*///////////////////////////////////*)
  (* = = = (1) variable names map = = = *)
  (*///////////////////////////////////*)
  ((2, ("FT", "ada://variable/C55C02B+31:11/FT+41:6")) :: (1, ("I", "ada://variable/C55C02B+31:11/I+35:6")) :: (3, ("X", "ada://variable/C55C02B+31:11/X+42:6")) :: nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram names map = = = *)
  (*////////////////////////////////////////////*)
  ((8, ("IDENT_CHAR", "ada://expression_function/ACATS_REPORT-47:9/IDENT_CHAR-117:15")) :: (11, ("IDENT_STR", "ada://expression_function/ACATS_REPORT-47:9/IDENT_STR-134:15")) :: (2, ("FAILED", "ada://procedure/ACATS_REPORT-47:9/FAILED-65:16")) :: (5, ("COMMENT", "ada://procedure/ACATS_REPORT-47:9/COMMENT-94:16")) :: (14, ("LEGAL_FILE_NAME", "ada://function/ACATS_REPORT-47:9/LEGAL_FILE_NAME-152:15")) :: (4, ("SPECIAL_ACTION", "ada://procedure/ACATS_REPORT-47:9/SPECIAL_ACTION-85:16")) :: (13, ("EQUAL", "ada://expression_function/ACATS_REPORT-47:9/EQUAL-144:15")) :: (16, ("C55C02B", "ada://procedure_body/C55C02B+31:11")) :: (7, ("IDENT_INT", "ada://expression_function/ACATS_REPORT-47:9/IDENT_INT-112:15")) :: (1, ("TEST", "ada://procedure/ACATS_REPORT-47:9/TEST-53:16")) :: (10, ("IDENT_BOOL", "ada://expression_function/ACATS_REPORT-47:9/IDENT_BOOL-129:15")) :: (9, ("IDENT_WIDE_CHAR", "ada://expression_function/ACATS_REPORT-47:9/IDENT_WIDE_CHAR-123:15")) :: (3, ("NOT_APPLICABLE", "ada://procedure/ACATS_REPORT-47:9/NOT_APPLICABLE-75:16")) :: (12, ("IDENT_WIDE_STR", "ada://expression_function/ACATS_REPORT-47:9/IDENT_WIDE_STR-139:15")) :: (15, ("TIME_STAMP", "ada://function/ACATS_REPORT-47:9/TIME_STAMP-159:15")) :: (6, ("RESULT", "ada://procedure/ACATS_REPORT-47:9/RESULT-99:16")) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) package names map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) type names map = = = *)
  (*/////////////////////////////////////*)
  ((4, ("ArrayT", "ada://ordinary_type/C55C02B+31:11/ArrayT+40:11")) :: (1, ("FILE_NUM", "ada://subtype/ACATS_REPORT-47:9/FILE_NUM-49:14")) :: (3, ("Index", "ada://ordinary_type/C55C02B+31:11/Index+39:11")) :: nil)
))
).

