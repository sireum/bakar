(* Compilation Unit *)
Library_Unit ( 1,
  (* Compilation Unit - Unit Declaration *)
  Library_Subprogram( 2,
    (* Procedure Body Declaration *)
    Procedure( 3,
      { 
        procedure_astnum = 
          (* Procedure Body - AST Number *)
          4;
        procedure_name = 
          (* Procedure Body - Name *)
           (*Test_for_Coq*) 1;
        procedure_contracts =
          (* Procedure Body - Specification *)
          [];
        procedure_parameter_profile = 
          (* Procedure Body - Parameters *)
          [];
        procedure_declarative_part = 
          (* Procedure Body - Variable Declarations *)
          [
          { declaration_astnum = 5; object_name =  (*N*) 1; object_nominal_subtype = 2; initialization_expression = (Some (E_Literal (6, Integer_Literal 25))) }; 
          { declaration_astnum = 7; object_name =  (*Result*) 2; object_nominal_subtype = 3; initialization_expression = None }; 
          { declaration_astnum = 8; object_name =  (*I*) 3; object_nominal_subtype = 2; initialization_expression = None }; 
          { declaration_astnum = 9; object_name =  (*X*) 4; object_nominal_subtype = 2; initialization_expression = None }];
        procedure_statements =
          (* Procedure Body - Statements *)
          S_Sequence (10,
            S_Assignment (11,  (*Result*) 2, E_Literal (12, Boolean_Literal true)),
            S_Sequence (13,
              S_If (14, E_Binary_Operation (15, Less_Than_Or_Equal, E_Identifier (16,  (*N*) 1), E_Literal (17, Integer_Literal 1)),
                S_Assignment (18,  (*Result*) 2, E_Literal (19, Boolean_Literal false))
              ),
              S_Sequence (20,
                S_Assignment (21,  (*I*) 3, E_Literal (22, Integer_Literal 2)),
                S_While_Loop (23, E_Binary_Operation (24, Less_Than_Or_Equal, E_Binary_Operation (25, Multiply, E_Identifier (26,  (*I*) 3), E_Identifier (27,  (*I*) 3)), E_Identifier (28,  (*N*) 1)),
                  S_Sequence (29,
                    S_Assignment (30,  (*X*) 4, E_Binary_Operation (31, Divide, E_Identifier (32,  (*N*) 1), E_Identifier (33,  (*I*) 3))),
                    S_Sequence (34,
                      S_If (35, E_Binary_Operation (36, Equal, E_Identifier (37,  (*N*) 1), E_Binary_Operation (38, Multiply, E_Identifier (39,  (*X*) 4), E_Identifier (40,  (*I*) 3))),
                        S_Assignment (41,  (*Result*) 2, E_Literal (42, Boolean_Literal false))
                      ),
                      S_Assignment (43,  (*I*) 3, E_Binary_Operation (44, Plus, E_Identifier (45,  (*I*) 3), E_Literal (46, Integer_Literal 1))) ) )
                ) ) ) )
      }
    )
  ),  
  (* Compilation Unit - Type Table *)
  {
    tt_exptype_table = 
      (* Expression AstNum --> TypeNum *) 
      [
        (6, 1) ;
        (12, 3) ;
        (15, 3) ;
        (16, 2) ;
        (17, 1) ;
        (19, 3) ;
        (22, 1) ;
        (24, 3) ;
        (25, 2) ;
        (26, 2) ;
        (27, 2) ;
        (28, 2) ;
        (31, 2) ;
        (32, 2) ;
        (33, 2) ;
        (36, 3) ;
        (37, 2) ;
        (38, 2) ;
        (39, 2) ;
        (40, 2) ;
        (42, 3) ;
        (44, 2) ;
        (45, 2) ;
        (46, 1)
      ];
    tt_typename_table = 
      (* TypeNum --> (Type URI * (Type Declaration AST Num) Option) *) 
      [
        (1, ("universal_integer", None)) ;
        (2, ("ada://ordinary_type/Standard-1:1/Integer-1:1", None)) ;
        (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1", None))
      ]
  }
)