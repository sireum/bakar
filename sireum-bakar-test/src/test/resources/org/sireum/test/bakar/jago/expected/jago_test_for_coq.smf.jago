Definition Coq_AST_Tree_XX := 
(D_Procedure_Body_XX 1 
  (mkprocedure_body_xx 3
    (* = = = Procedure Name = = = *)
    ((*Test_for_Coq*) 1)
    (* = = = Formal Parameters = = = *)
    (nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 4
  (D_Object_Declaration_XX 5 (mkobject_declaration_xx 6 ((*N*) 1) Integer (Some ((E_Literal_XX 7 (Integer_Literal 25) (**(nil)**)))))) 
  (D_Seq_Declaration_XX 8
  (D_Object_Declaration_XX 9 (mkobject_declaration_xx 10 ((*Result*) 2) Boolean None)) 
  (D_Seq_Declaration_XX 11
  (D_Object_Declaration_XX 12 (mkobject_declaration_xx 13 ((*I*) 3) Integer None)) 
  (D_Object_Declaration_XX 14 (mkobject_declaration_xx 15 ((*X*) 4) Integer None))))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 16
      (S_Assignment_XX 17 (E_Identifier_XX 18 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 19 (Boolean_Literal true) (**(nil)**))) 
      (S_Sequence_XX 20
      (S_If_XX 21 (E_Binary_Operation_XX 22 Less_Than_Or_Equal (E_Name_XX 23 (E_Identifier_XX 24 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 25 (Integer_Literal 1) (**(nil)**)) (**(nil)**))
        (S_Assignment_XX 26 (E_Identifier_XX 27 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 28 (Boolean_Literal false) (**(nil)**)))
        S_Null_XX
      ) 
      (S_Sequence_XX 29
      (S_Assignment_XX 30 (E_Identifier_XX 31 ((*I*) 3) (**(nil)**)) (E_Literal_XX 32 (Integer_Literal 2) (**(nil)**))) 
      (S_While_Loop_XX 33 (E_Binary_Operation_XX 34 Less_Than_Or_Equal (E_Binary_Operation_XX 35 Multiply (E_Name_XX 36 (E_Identifier_XX 37 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Name_XX 38 (E_Identifier_XX 39 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (E_Name_XX 40 (E_Identifier_XX 41 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(nil)**))
        (S_Sequence_XX 42
        (S_Assignment_XX 43 (E_Identifier_XX 44 ((*X*) 4) (**(nil)**)) (E_Binary_Operation_XX 45 Divide (E_Name_XX 46 (E_Identifier_XX 47 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 48 (E_Identifier_XX 49 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
        (S_Sequence_XX 50
        (S_If_XX 51 (E_Binary_Operation_XX 52 Equal (E_Name_XX 53 (E_Identifier_XX 54 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 55 Multiply (E_Name_XX 56 (E_Identifier_XX 57 ((*X*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 58 (E_Identifier_XX 59 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
          (S_Assignment_XX 60 (E_Identifier_XX 61 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 62 (Boolean_Literal false) (**(nil)**)))
          S_Null_XX
        ) 
        (S_Assignment_XX 63 (E_Identifier_XX 64 ((*I*) 3) (**(nil)**)) (E_Binary_Operation_XX 65 Plus (E_Name_XX 66 (E_Identifier_XX 67 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Literal_XX 68 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))))
      ))))
  )
).

Definition Symbol_Table_XX := 
(mkSymbolTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Test_for_Coq*) 1), (0, (mkprocedure_body_xx 3
  (* = = = Procedure Name = = = *)
  ((*Test_for_Coq*) 1)
  (* = = = Formal Parameters = = = *)
  (nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 4
(D_Object_Declaration_XX 5 (mkobject_declaration_xx 6 ((*N*) 1) Integer (Some ((E_Literal_XX 7 (Integer_Literal 25) (**(nil)**)))))) 
(D_Seq_Declaration_XX 8
(D_Object_Declaration_XX 9 (mkobject_declaration_xx 10 ((*Result*) 2) Boolean None)) 
(D_Seq_Declaration_XX 11
(D_Object_Declaration_XX 12 (mkobject_declaration_xx 13 ((*I*) 3) Integer None)) 
(D_Object_Declaration_XX 14 (mkobject_declaration_xx 15 ((*X*) 4) Integer None))))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 16
    (S_Assignment_XX 17 (E_Identifier_XX 18 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 19 (Boolean_Literal true) (**(nil)**))) 
    (S_Sequence_XX 20
    (S_If_XX 21 (E_Binary_Operation_XX 22 Less_Than_Or_Equal (E_Name_XX 23 (E_Identifier_XX 24 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 25 (Integer_Literal 1) (**(nil)**)) (**(nil)**))
      (S_Assignment_XX 26 (E_Identifier_XX 27 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 28 (Boolean_Literal false) (**(nil)**)))
      S_Null_XX
    ) 
    (S_Sequence_XX 29
    (S_Assignment_XX 30 (E_Identifier_XX 31 ((*I*) 3) (**(nil)**)) (E_Literal_XX 32 (Integer_Literal 2) (**(nil)**))) 
    (S_While_Loop_XX 33 (E_Binary_Operation_XX 34 Less_Than_Or_Equal (E_Binary_Operation_XX 35 Multiply (E_Name_XX 36 (E_Identifier_XX 37 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Name_XX 38 (E_Identifier_XX 39 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (E_Name_XX 40 (E_Identifier_XX 41 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(nil)**))
      (S_Sequence_XX 42
      (S_Assignment_XX 43 (E_Identifier_XX 44 ((*X*) 4) (**(nil)**)) (E_Binary_Operation_XX 45 Divide (E_Name_XX 46 (E_Identifier_XX 47 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 48 (E_Identifier_XX 49 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
      (S_Sequence_XX 50
      (S_If_XX 51 (E_Binary_Operation_XX 52 Equal (E_Name_XX 53 (E_Identifier_XX 54 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 55 Multiply (E_Name_XX 56 (E_Identifier_XX 57 ((*X*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 58 (E_Identifier_XX 59 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
        (S_Assignment_XX 60 (E_Identifier_XX 61 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 62 (Boolean_Literal false) (**(nil)**)))
        S_Null_XX
      ) 
      (S_Assignment_XX 63 (E_Identifier_XX 64 ((*I*) 3) (**(nil)**)) (E_Binary_Operation_XX 65 Plus (E_Name_XX 66 (E_Identifier_XX 67 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Literal_XX 68 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))))
    ))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((23, Integer) :: (68, Integer) :: (59, Integer) :: (32, Integer) :: (41, Integer) :: (62, Boolean) :: (53, Integer) :: (35, Integer) :: (44, Integer) :: (56, Integer) :: (38, Integer) :: (47, Integer) :: (65, Integer) :: (46, Integer) :: (64, Integer) :: (55, Integer) :: (67, Integer) :: (58, Integer) :: (40, Integer) :: (49, Integer) :: (31, Integer) :: (22, Boolean) :: (7, Integer) :: (52, Boolean) :: (34, Boolean) :: (25, Integer) :: (61, Boolean) :: (37, Integer) :: (28, Boolean) :: (19, Boolean) :: (54, Integer) :: (45, Integer) :: (27, Boolean) :: (18, Boolean) :: (36, Integer) :: (57, Integer) :: (48, Integer) :: (39, Integer) :: (66, Integer) :: (24, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((23, (sloc (*Line*)15 (*Col*)7 (*EndLine*)15 (*EndCol*)7)) :: (68, (sloc (*Line*)24 (*Col*)16 (*EndLine*)24 (*EndCol*)16)) :: (59, (sloc (*Line*)21 (*Col*)18 (*EndLine*)21 (*EndCol*)18)) :: (32, (sloc (*Line*)18 (*Col*)9 (*EndLine*)18 (*EndCol*)9)) :: (41, (sloc (*Line*)19 (*Col*)17 (*EndLine*)19 (*EndCol*)17)) :: (62, (sloc (*Line*)22 (*Col*)20 (*EndLine*)22 (*EndCol*)24)) :: (53, (sloc (*Line*)21 (*Col*)10 (*EndLine*)21 (*EndCol*)10)) :: (35, (sloc (*Line*)19 (*Col*)10 (*EndLine*)19 (*EndCol*)12)) :: (44, (sloc (*Line*)20 (*Col*)7 (*EndLine*)20 (*EndCol*)7)) :: (56, (sloc (*Line*)21 (*Col*)14 (*EndLine*)21 (*EndCol*)14)) :: (38, (sloc (*Line*)19 (*Col*)12 (*EndLine*)19 (*EndCol*)12)) :: (47, (sloc (*Line*)20 (*Col*)12 (*EndLine*)20 (*EndCol*)12)) :: (65, (sloc (*Line*)24 (*Col*)12 (*EndLine*)24 (*EndCol*)16)) :: (46, (sloc (*Line*)20 (*Col*)12 (*EndLine*)20 (*EndCol*)12)) :: (64, (sloc (*Line*)24 (*Col*)7 (*EndLine*)24 (*EndCol*)7)) :: (55, (sloc (*Line*)21 (*Col*)14 (*EndLine*)21 (*EndCol*)18)) :: (67, (sloc (*Line*)24 (*Col*)12 (*EndLine*)24 (*EndCol*)12)) :: (58, (sloc (*Line*)21 (*Col*)18 (*EndLine*)21 (*EndCol*)18)) :: (40, (sloc (*Line*)19 (*Col*)17 (*EndLine*)19 (*EndCol*)17)) :: (49, (sloc (*Line*)20 (*Col*)16 (*EndLine*)20 (*EndCol*)16)) :: (31, (sloc (*Line*)18 (*Col*)4 (*EndLine*)18 (*EndCol*)4)) :: (22, (sloc (*Line*)15 (*Col*)7 (*EndLine*)15 (*EndCol*)12)) :: (7, (sloc (*Line*)6 (*Col*)18 (*EndLine*)6 (*EndCol*)19)) :: (52, (sloc (*Line*)21 (*Col*)10 (*EndLine*)21 (*EndCol*)18)) :: (34, (sloc (*Line*)19 (*Col*)10 (*EndLine*)19 (*EndCol*)17)) :: (25, (sloc (*Line*)15 (*Col*)12 (*EndLine*)15 (*EndCol*)12)) :: (61, (sloc (*Line*)22 (*Col*)10 (*EndLine*)22 (*EndCol*)15)) :: (37, (sloc (*Line*)19 (*Col*)10 (*EndLine*)19 (*EndCol*)10)) :: (28, (sloc (*Line*)16 (*Col*)17 (*EndLine*)16 (*EndCol*)21)) :: (19, (sloc (*Line*)12 (*Col*)14 (*EndLine*)12 (*EndCol*)17)) :: (54, (sloc (*Line*)21 (*Col*)10 (*EndLine*)21 (*EndCol*)10)) :: (45, (sloc (*Line*)20 (*Col*)12 (*EndLine*)20 (*EndCol*)16)) :: (27, (sloc (*Line*)16 (*Col*)7 (*EndLine*)16 (*EndCol*)12)) :: (18, (sloc (*Line*)12 (*Col*)4 (*EndLine*)12 (*EndCol*)9)) :: (36, (sloc (*Line*)19 (*Col*)10 (*EndLine*)19 (*EndCol*)10)) :: (57, (sloc (*Line*)21 (*Col*)14 (*EndLine*)21 (*EndCol*)14)) :: (48, (sloc (*Line*)20 (*Col*)16 (*EndLine*)20 (*EndCol*)16)) :: (39, (sloc (*Line*)19 (*Col*)12 (*EndLine*)19 (*EndCol*)12)) :: (66, (sloc (*Line*)24 (*Col*)12 (*EndLine*)24 (*EndCol*)12)) :: (24, (sloc (*Line*)15 (*Col*)7 (*EndLine*)15 (*EndCol*)7)) :: nil)
).

