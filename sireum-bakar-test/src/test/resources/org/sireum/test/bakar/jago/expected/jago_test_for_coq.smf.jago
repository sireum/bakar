(* Compilation Unit *)
Library_Unit 1
  (* Compilation Unit - Unit Declaration *) (
    Library_Subprogram 2 (
      (* Procedure Body Declaration *)
      Procedure 3 (
        mkprocedure_body 4
          (* Procedure Body - Name *)
          (*Test_for_Coq*) 1
          (* Procedure Body - Specification *)
          (nil)
          (* Procedure Body - Parameters *)
          (nil) 
          (* Procedure Body - Variable Declarations *)
          (
          mkobject_declaration 5 (*N*) 1 2 (Some (E_Literal 6 (Integer_Literal 25))) :: 
          mkobject_declaration 7 (*Result*) 2 3 None :: 
          mkobject_declaration 8 (*I*) 3 2 None :: 
          mkobject_declaration 9 (*X*) 4 2 None :: nil)
          (* Procedure Body - Statements *) (
            S_Sequence 10 (
              S_Assignment 11 ((*Result*) 2) (E_Literal 12 (Boolean_Literal true)) ) ( 
              S_Sequence 13 (
                S_If 14 (E_Binary_Operation 15 Less_Than_Or_Equal (E_Identifier 16 (*N*) 1) (E_Literal 17 (Integer_Literal 1))) (
                    S_Assignment 18 ((*Result*) 2) (E_Literal 19 (Boolean_Literal false))
                  ) ) ( 
                S_Sequence 20 (
                  S_Assignment 21 ((*I*) 3) (E_Literal 22 (Integer_Literal 2)) ) ( 
                  S_While_Loop 23 (E_Binary_Operation 24 Less_Than_Or_Equal (E_Binary_Operation 25 Multiply (E_Identifier 26 (*I*) 3) (E_Identifier 27 (*I*) 3)) (E_Identifier 28 (*N*) 1)) (
                      S_Sequence 29 (
                        S_Assignment 30 ((*X*) 4) (E_Binary_Operation 31 Divide (E_Identifier 32 (*N*) 1) (E_Identifier 33 (*I*) 3)) ) ( 
                        S_Sequence 34 (
                          S_If 35 (E_Binary_Operation 36 Equal (E_Identifier 37 (*N*) 1) (E_Binary_Operation 38 Multiply (E_Identifier 39 (*X*) 4) (E_Identifier 40 (*I*) 3))) (
                              S_Assignment 41 ((*Result*) 2) (E_Literal 42 (Boolean_Literal false))
                            ) ) ( 
                          S_Assignment 43 ((*I*) 3) (E_Binary_Operation 44 Plus (E_Identifier 45 (*I*) 3) (E_Literal 46 (Integer_Literal 1))) ) )
                    ) ) ) )
          )
      )
    )
  )
  (* Compilation Unit - Type Table *) (
    mktype_table (
      (* Expression Type Table: Expression AstNum --> TypeNum *)
      (6, 1) ::
      (12, 3) ::
      (15, 3) ::
      (16, 2) ::
      (17, 1) ::
      (19, 3) ::
      (22, 1) ::
      (24, 3) ::
      (25, 2) ::
      (26, 2) ::
      (27, 2) ::
      (28, 2) ::
      (31, 2) ::
      (32, 2) ::
      (33, 2) ::
      (36, 3) ::
      (37, 2) ::
      (38, 2) ::
      (39, 2) ::
      (40, 2) ::
      (42, 3) ::
      (44, 2) ::
      (45, 2) ::
      (46, 1) :: nil
    ) (
      (* Type Name Table: TypeNum --> (Type URI * Option(Type Declaration AST Num)) *)
      (1, ("universal_integer"%string, None)) ::
      (2, ("ada://ordinary_type/Standard-1:1/Integer-1:1"%string, None)) ::
      (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1"%string, None)) :: nil
    )
  )