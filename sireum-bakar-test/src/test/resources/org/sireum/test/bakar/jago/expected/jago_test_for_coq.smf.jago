Definition Coq_AST_Tree_XX := 
(D_Procedure_Body_XX 2 
  (mkprocedure_body_xx 4
    (* = = = Procedure Name = = = *)
    ((*Test_for_Coq*) 1)
    (* = = = Formal Parameters = = = *)
    (nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 5
  (D_Object_Declaration_XX 6 (mkobject_declaration_xx 7 ((*N*) 1) Integer (Some ((E_Literal_XX 8 (Integer_Literal 25) (**(nil)**)))))) 
  (D_Seq_Declaration_XX 9
  (D_Object_Declaration_XX 10 (mkobject_declaration_xx 11 ((*Result*) 2) Boolean None)) 
  (D_Seq_Declaration_XX 12
  (D_Object_Declaration_XX 13 (mkobject_declaration_xx 14 ((*I*) 3) Integer None)) 
  (D_Object_Declaration_XX 15 (mkobject_declaration_xx 16 ((*X*) 4) Integer None))))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 17
      (S_Assignment_XX 18 (E_Identifier_XX 19 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 20 (Boolean_Literal true) (**(nil)**))) 
      (S_Sequence_XX 21
      (S_If_XX 22 (E_Binary_Operation_XX 23 Less_Than_Or_Equal (E_Name_XX 24 (E_Identifier_XX 25 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 26 (Integer_Literal 1) (**(nil)**)) (**(nil)**))
        (S_Assignment_XX 27 (E_Identifier_XX 28 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 29 (Boolean_Literal false) (**(nil)**)))
        S_Null_XX
      ) 
      (S_Sequence_XX 30
      (S_Assignment_XX 31 (E_Identifier_XX 32 ((*I*) 3) (**(nil)**)) (E_Literal_XX 33 (Integer_Literal 2) (**(nil)**))) 
      (S_While_Loop_XX 34 (E_Binary_Operation_XX 35 Less_Than_Or_Equal (E_Binary_Operation_XX 36 Multiply (E_Name_XX 37 (E_Identifier_XX 38 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Name_XX 39 (E_Identifier_XX 40 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (E_Name_XX 41 (E_Identifier_XX 42 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(nil)**))
        (S_Sequence_XX 43
        (S_Assignment_XX 44 (E_Identifier_XX 45 ((*X*) 4) (**(nil)**)) (E_Binary_Operation_XX 46 Divide (E_Name_XX 47 (E_Identifier_XX 48 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 49 (E_Identifier_XX 50 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
        (S_Sequence_XX 51
        (S_If_XX 52 (E_Binary_Operation_XX 53 Equal (E_Name_XX 54 (E_Identifier_XX 55 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 56 Multiply (E_Name_XX 57 (E_Identifier_XX 58 ((*X*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 59 (E_Identifier_XX 60 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
          (S_Assignment_XX 61 (E_Identifier_XX 62 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 63 (Boolean_Literal false) (**(nil)**)))
          S_Null_XX
        ) 
        (S_Assignment_XX 64 (E_Identifier_XX 65 ((*I*) 3) (**(nil)**)) (E_Binary_Operation_XX 66 Plus (E_Name_XX 67 (E_Identifier_XX 68 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Literal_XX 69 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))))
      ))))
  )
).

Definition Symbol_Table_XX := 
(mkSymbolTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Test_for_Coq*) 1), (0, (mkprocedure_body_xx 4
  (* = = = Procedure Name = = = *)
  ((*Test_for_Coq*) 1)
  (* = = = Formal Parameters = = = *)
  (nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 5
(D_Object_Declaration_XX 6 (mkobject_declaration_xx 7 ((*N*) 1) Integer (Some ((E_Literal_XX 8 (Integer_Literal 25) (**(nil)**)))))) 
(D_Seq_Declaration_XX 9
(D_Object_Declaration_XX 10 (mkobject_declaration_xx 11 ((*Result*) 2) Boolean None)) 
(D_Seq_Declaration_XX 12
(D_Object_Declaration_XX 13 (mkobject_declaration_xx 14 ((*I*) 3) Integer None)) 
(D_Object_Declaration_XX 15 (mkobject_declaration_xx 16 ((*X*) 4) Integer None))))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 17
    (S_Assignment_XX 18 (E_Identifier_XX 19 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 20 (Boolean_Literal true) (**(nil)**))) 
    (S_Sequence_XX 21
    (S_If_XX 22 (E_Binary_Operation_XX 23 Less_Than_Or_Equal (E_Name_XX 24 (E_Identifier_XX 25 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 26 (Integer_Literal 1) (**(nil)**)) (**(nil)**))
      (S_Assignment_XX 27 (E_Identifier_XX 28 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 29 (Boolean_Literal false) (**(nil)**)))
      S_Null_XX
    ) 
    (S_Sequence_XX 30
    (S_Assignment_XX 31 (E_Identifier_XX 32 ((*I*) 3) (**(nil)**)) (E_Literal_XX 33 (Integer_Literal 2) (**(nil)**))) 
    (S_While_Loop_XX 34 (E_Binary_Operation_XX 35 Less_Than_Or_Equal (E_Binary_Operation_XX 36 Multiply (E_Name_XX 37 (E_Identifier_XX 38 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Name_XX 39 (E_Identifier_XX 40 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (E_Name_XX 41 (E_Identifier_XX 42 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(nil)**))
      (S_Sequence_XX 43
      (S_Assignment_XX 44 (E_Identifier_XX 45 ((*X*) 4) (**(nil)**)) (E_Binary_Operation_XX 46 Divide (E_Name_XX 47 (E_Identifier_XX 48 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 49 (E_Identifier_XX 50 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
      (S_Sequence_XX 51
      (S_If_XX 52 (E_Binary_Operation_XX 53 Equal (E_Name_XX 54 (E_Identifier_XX 55 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 56 Multiply (E_Name_XX 57 (E_Identifier_XX 58 ((*X*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 59 (E_Identifier_XX 60 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
        (S_Assignment_XX 61 (E_Identifier_XX 62 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 63 (Boolean_Literal false) (**(nil)**)))
        S_Null_XX
      ) 
      (S_Assignment_XX 64 (E_Identifier_XX 65 ((*I*) 3) (**(nil)**)) (E_Binary_Operation_XX 66 Plus (E_Name_XX 67 (E_Identifier_XX 68 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Literal_XX 69 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))))
    ))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((23, Boolean) :: (68, Integer) :: (59, Integer) :: (32, Integer) :: (41, Integer) :: (50, Integer) :: (62, Boolean) :: (53, Boolean) :: (35, Boolean) :: (8, Integer) :: (26, Integer) :: (56, Integer) :: (29, Boolean) :: (38, Integer) :: (47, Integer) :: (20, Boolean) :: (65, Integer) :: (46, Integer) :: (55, Integer) :: (67, Integer) :: (58, Integer) :: (40, Integer) :: (49, Integer) :: (25, Integer) :: (37, Integer) :: (28, Boolean) :: (19, Boolean) :: (60, Integer) :: (69, Integer) :: (63, Boolean) :: (54, Integer) :: (45, Integer) :: (36, Integer) :: (57, Integer) :: (48, Integer) :: (39, Integer) :: (66, Integer) :: (42, Integer) :: (33, Integer) :: (24, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((23, (sloc (*Line*)15 (*Col*)7 (*EndLine*)15 (*EndCol*)12)) :: (68, (sloc (*Line*)24 (*Col*)12 (*EndLine*)24 (*EndCol*)12)) :: (59, (sloc (*Line*)21 (*Col*)18 (*EndLine*)21 (*EndCol*)18)) :: (32, (sloc (*Line*)18 (*Col*)4 (*EndLine*)18 (*EndCol*)4)) :: (41, (sloc (*Line*)19 (*Col*)17 (*EndLine*)19 (*EndCol*)17)) :: (50, (sloc (*Line*)20 (*Col*)16 (*EndLine*)20 (*EndCol*)16)) :: (62, (sloc (*Line*)22 (*Col*)10 (*EndLine*)22 (*EndCol*)15)) :: (53, (sloc (*Line*)21 (*Col*)10 (*EndLine*)21 (*EndCol*)18)) :: (35, (sloc (*Line*)19 (*Col*)10 (*EndLine*)19 (*EndCol*)17)) :: (8, (sloc (*Line*)6 (*Col*)18 (*EndLine*)6 (*EndCol*)19)) :: (26, (sloc (*Line*)15 (*Col*)12 (*EndLine*)15 (*EndCol*)12)) :: (56, (sloc (*Line*)21 (*Col*)14 (*EndLine*)21 (*EndCol*)18)) :: (29, (sloc (*Line*)16 (*Col*)17 (*EndLine*)16 (*EndCol*)21)) :: (38, (sloc (*Line*)19 (*Col*)10 (*EndLine*)19 (*EndCol*)10)) :: (47, (sloc (*Line*)20 (*Col*)12 (*EndLine*)20 (*EndCol*)12)) :: (20, (sloc (*Line*)12 (*Col*)14 (*EndLine*)12 (*EndCol*)17)) :: (65, (sloc (*Line*)24 (*Col*)7 (*EndLine*)24 (*EndCol*)7)) :: (46, (sloc (*Line*)20 (*Col*)12 (*EndLine*)20 (*EndCol*)16)) :: (55, (sloc (*Line*)21 (*Col*)10 (*EndLine*)21 (*EndCol*)10)) :: (67, (sloc (*Line*)24 (*Col*)12 (*EndLine*)24 (*EndCol*)12)) :: (58, (sloc (*Line*)21 (*Col*)14 (*EndLine*)21 (*EndCol*)14)) :: (40, (sloc (*Line*)19 (*Col*)12 (*EndLine*)19 (*EndCol*)12)) :: (49, (sloc (*Line*)20 (*Col*)16 (*EndLine*)20 (*EndCol*)16)) :: (25, (sloc (*Line*)15 (*Col*)7 (*EndLine*)15 (*EndCol*)7)) :: (37, (sloc (*Line*)19 (*Col*)10 (*EndLine*)19 (*EndCol*)10)) :: (28, (sloc (*Line*)16 (*Col*)7 (*EndLine*)16 (*EndCol*)12)) :: (19, (sloc (*Line*)12 (*Col*)4 (*EndLine*)12 (*EndCol*)9)) :: (60, (sloc (*Line*)21 (*Col*)18 (*EndLine*)21 (*EndCol*)18)) :: (69, (sloc (*Line*)24 (*Col*)16 (*EndLine*)24 (*EndCol*)16)) :: (63, (sloc (*Line*)22 (*Col*)20 (*EndLine*)22 (*EndCol*)24)) :: (54, (sloc (*Line*)21 (*Col*)10 (*EndLine*)21 (*EndCol*)10)) :: (45, (sloc (*Line*)20 (*Col*)7 (*EndLine*)20 (*EndCol*)7)) :: (36, (sloc (*Line*)19 (*Col*)10 (*EndLine*)19 (*EndCol*)12)) :: (57, (sloc (*Line*)21 (*Col*)14 (*EndLine*)21 (*EndCol*)14)) :: (48, (sloc (*Line*)20 (*Col*)12 (*EndLine*)20 (*EndCol*)12)) :: (39, (sloc (*Line*)19 (*Col*)12 (*EndLine*)19 (*EndCol*)12)) :: (66, (sloc (*Line*)24 (*Col*)12 (*EndLine*)24 (*EndCol*)16)) :: (42, (sloc (*Line*)19 (*Col*)17 (*EndLine*)19 (*EndCol*)17)) :: (33, (sloc (*Line*)18 (*Col*)9 (*EndLine*)18 (*EndCol*)9)) :: (24, (sloc (*Line*)15 (*Col*)7 (*EndLine*)15 (*EndCol*)7)) :: nil)
).

