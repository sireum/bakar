package Case_Statement_Enum;


procedure Activity isWorkDay (
        Week d) {
  local
    Activity ret;


  #l2.
    if !(Mon <= d && d <= Tue) then goto l1;

  #l3.
    ret := Work;

  #l4.
    goto l0;

  #l1.
    // empty loc

  #l6.
    if !(attribute__uif__first `HumpDay <= d && d <= attribute__uif__last `HumpDay) then goto l5;

  #l7.
    ret := Sleep;

  #l8.
    goto l0;

  #l5.
    // empty loc

  #l10.
    if !(d == Thur) then goto l9;

  #l11.
    ret := Sleep;

  #l12.
    goto l0;

  #l9.
    // empty loc

  #l14.
    if !(d == Fri || d == FriPart2) then goto l13;

  #l15.
    ret := Party;

  #l16.
    goto l0;

  #l13.
    // empty loc

  #l18.
    if !(attribute__uif__first `WeekEnd <= d && d <= attribute__uif__last `WeekEnd) then goto l0;

  #l19.
    ret := Drink;

  #l0.
    // empty loc

  #l20.
    return ret;
}package Case_Statement_Enum;


enum Week {
  Mon, Tue, Wed, Thur, Fri, FriPart2, Sat, Sun
}

typealias Week WeekDay;

typealias WeekDay HumpDay;

typealias Week WeekEnd;

enum Activity {
  Work, Sleep, Party, Drink
}

procedure Activity isWorkDay (
        Week d) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;