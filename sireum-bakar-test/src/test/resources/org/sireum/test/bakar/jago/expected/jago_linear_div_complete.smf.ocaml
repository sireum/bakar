(* Compilation Unit *)
Library_Unit ( 1,
  (* Compilation Unit - Unit Declaration *)
  Library_Subprogram( 2,
    (* Procedure Body Declaration *)
    Procedure( 3,
      { 
        procedure_astnum = 
          (* Procedure Body - AST Number *)
          4;
        procedure_name = 
          (* Procedure Body - Name *)
           (*Linear_Div_Complete*) 1;
        procedure_contracts =
          (* Procedure Body - Specification *)
          [];
        procedure_parameter_profile = 
          (* Procedure Body - Parameters *)
          [
          { parameter_astnum = 5; parameter_name =  (*Dividend*) 1; parameter_subtype_mark = 1; parameter_mode = In; parameter_default_expression = None }; 
          { parameter_astnum = 6; parameter_name =  (*Divisor*) 2; parameter_subtype_mark = 1; parameter_mode = In; parameter_default_expression = None }; 
          { parameter_astnum = 7; parameter_name =  (*Quotient*) 3; parameter_subtype_mark = 1; parameter_mode = Out; parameter_default_expression = None }; 
          { parameter_astnum = 8; parameter_name =  (*Remainder*) 4; parameter_subtype_mark = 1; parameter_mode = Out; parameter_default_expression = None }];
        procedure_declarative_part = 
          (* Procedure Body - Variable Declarations *)
          [];
        procedure_statements =
          (* Procedure Body - Statements *)
          S_Sequence (9,
            S_Assignment (10,  (*Quotient*) 3, E_Literal (11, Integer_Literal 0)),
            S_Sequence (12,
              S_Assignment (13,  (*Remainder*) 4, E_Identifier (14,  (*Dividend*) 1)),
              S_While_Loop (15, E_Binary_Operation (16, Greater_Than_Or_Equal, E_Identifier (17,  (*Remainder*) 4), E_Identifier (18,  (*Divisor*) 2)),
                S_Sequence (19,
                  S_Loop_Invariant (20, E_Binary_Operation (21, And, E_Binary_Operation (22, And, E_Binary_Operation (23, Greater_Than_Or_Equal, E_Identifier (24,  (*Remainder*) 4), E_Literal (25, Integer_Literal 0)), E_Binary_Operation (26, Greater_Than_Or_Equal, E_Identifier (27,  (*Quotient*) 3), E_Literal (28, Integer_Literal 0))), E_Binary_Operation (29, Equal, E_Binary_Operation (30, Plus, E_Binary_Operation (31, Multiply, E_Identifier (32,  (*Divisor*) 2), E_Identifier (33,  (*Quotient*) 3)), E_Identifier (34,  (*Remainder*) 4)), E_Identifier (35,  (*Dividend*) 1)))),
                  S_Sequence (36,
                    S_Assignment (37,  (*Quotient*) 3, E_Binary_Operation (38, Plus, E_Identifier (39,  (*Quotient*) 3), E_Literal (40, Integer_Literal 1))),
                    S_Sequence (41,
                      S_Assignment (42,  (*Quotient*) 3, E_Binary_Operation (43, Plus, E_Identifier (44,  (*Quotient*) 3), E_Literal (45, Integer_Literal 1))),
                      S_Assignment (46,  (*Remainder*) 4, E_Binary_Operation (47, Minus, E_Identifier (48,  (*Remainder*) 4), E_Identifier (49,  (*Divisor*) 2))) ) ) )
              ) ) )
      }
    )
  ),  
  (* Compilation Unit - Type Table *)
  {
    tt_exptype_table = 
      (* Expression AstNum --> TypeNum *) 
      [
        (11, 2) ;
        (14, 1) ;
        (16, 3) ;
        (17, 1) ;
        (18, 1) ;
        (21, 3) ;
        (22, 3) ;
        (23, 3) ;
        (24, 1) ;
        (25, 2) ;
        (26, 3) ;
        (27, 1) ;
        (28, 2) ;
        (29, 3) ;
        (30, 1) ;
        (31, 1) ;
        (32, 1) ;
        (33, 1) ;
        (34, 1) ;
        (35, 1) ;
        (38, 1) ;
        (39, 1) ;
        (40, 2) ;
        (43, 1) ;
        (44, 1) ;
        (45, 2) ;
        (47, 1) ;
        (48, 1) ;
        (49, 1)
      ];
    tt_typename_table = 
      (* TypeNum --> (Type URI * (Type Declaration AST Num) Option) *) 
      [
        (1, ("ada://ordinary_type/Standard-1:1/Integer-1:1", None)) ;
        (2, ("universal_integer", None)) ;
        (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1", None))
      ]
  }
)