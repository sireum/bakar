(* Compilation Unit *)
Library_Unit 1
  (* Compilation Unit - Unit Declaration *) (
    Library_Subprogram 2 (
      (* Function Body Declaration *)
      Function 3 (
        mkfunction_body 4
          (* Function Body - Name *)
          (*Factorial*) 1
          (* Function Body - Return Type *) 
          (Integer) 
          (* Function Body - Specification *)
          (nil)
          (* Function Body - Parameters *)
          (
          mkparameter_specification 5 (*N*) 1 (1) (In) None :: nil)
          (* Function Body - Local Defined Variables *)
          (
          mkobject_declaration 6 (*Result*) 2 1 (Some (E_Literal 7 (Integer_Literal 1))) :: 
          mkobject_declaration 8 (*T*) 3 1 None :: nil)
          (* Function Body - Statements *) (
            S_Sequence 9 (
              S_Assignment 10 ((*T*) 3) (E_Identifier 11 (*N*) 1) ) ( 
              S_Sequence 12 (
                S_While_Loop 13 (E_Binary_Operation 14 Greater_Than (E_Identifier 15 (*T*) 3) (E_Literal 16 (Integer_Literal 0))) (
                    S_Sequence 17 (
                      S_Assignment 18 ((*Result*) 2) (E_Binary_Operation 19 Multiply (E_Identifier 20 (*Result*) 2) (E_Identifier 21 (*T*) 3)) ) ( 
                      S_Assignment 22 ((*T*) 3) (E_Binary_Operation 23 Minus (E_Identifier 24 (*T*) 3) (E_Literal 25 (Integer_Literal 1))) )
                  ) ) ( 
                S_Return 26 (Some (E_Identifier 27 (*Result*) 2)) ) )
          )
      )
    )
  )
  (* Compilation Unit - Type Table *) (
    mktype_table (
      (* Expression Type Table: Expression AstNum --> TypeNum *)
      (7, 2) ::
      (11, 1) ::
      (14, 3) ::
      (15, 1) ::
      (16, 2) ::
      (19, 1) ::
      (20, 1) ::
      (21, 1) ::
      (23, 1) ::
      (24, 1) ::
      (25, 2) ::
      (27, 1) :: nil
    ) (
      (* Type Name Table: TypeNum --> (Type URI * Option(Type Declaration AST Num)) *)
      (1, ("ada://ordinary_type/Standard-1:1/Integer-1:1"%string, None)) ::
      (2, ("universal_integer"%string, None)) ::
      (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1"%string, None)) :: nil
    )
  )