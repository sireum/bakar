Definition Coq_AST_Tree_XX := 
(D_Procedure_Body_XX 2 
  (mkprocedure_body_xx 4
    (* = = = Procedure Name = = = *)
    ((*Factorial*) 1)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_xx 5 ((*N*) 1) Integer In) :: 
    (mkparameter_specification_xx 6 ((*M*) 2) Integer Out) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 7
  (D_Object_Declaration_XX 8 (mkobject_declaration_xx 9 ((*Result*) 3) Integer (Some ((E_Literal_XX 10 (Integer_Literal 1) (**(nil)**)))))) 
  (D_Object_Declaration_XX 11 (mkobject_declaration_xx 12 ((*T*) 4) Integer None))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 13
      (S_Assignment_XX 14 (E_Identifier_XX 15 ((*T*) 4) (**(nil)**)) (E_Name_XX 16 (E_Identifier_XX 17 ((*N*) 1) (**(nil)**)) (**(nil)**))) 
      (S_Sequence_XX 18
      (S_While_Loop_XX 19 (E_Binary_Operation_XX 20 Greater_Than (E_Name_XX 21 (E_Identifier_XX 22 ((*T*) 4) (**(nil)**)) (**(nil)**)) (E_Literal_XX 23 (Integer_Literal 0) (**(nil)**)) (**(nil)**))
        (S_Sequence_XX 24
        (S_Assignment_XX 25 (E_Identifier_XX 26 ((*Result*) 3) (**(nil)**)) (E_Binary_Operation_XX 27 Multiply (E_Name_XX 28 (E_Identifier_XX 29 ((*Result*) 3) (**(nil)**)) (**(nil)**)) (E_Name_XX 30 (E_Identifier_XX 31 ((*T*) 4) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**))) 
        (S_Assignment_XX 32 (E_Identifier_XX 33 ((*T*) 4) (**(nil)**)) (E_Binary_Operation_XX 34 Minus (E_Name_XX 35 (E_Identifier_XX 36 ((*T*) 4) (**(nil)**)) (**(nil)**)) (E_Literal_XX 37 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**))))
      ) 
      (S_Assignment_XX 38 (E_Identifier_XX 39 ((*M*) 2) (**(nil)**)) (E_Name_XX 40 (E_Identifier_XX 41 ((*Result*) 3) (**(nil)**)) (**(nil)**)))))
  )
).

Definition Symbol_Table_XX := 
(mkSymbolTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Factorial*) 1), (0, (mkprocedure_body_xx 4
  (* = = = Procedure Name = = = *)
  ((*Factorial*) 1)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_xx 5 ((*N*) 1) Integer In) :: 
  (mkparameter_specification_xx 6 ((*M*) 2) Integer Out) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 7
(D_Object_Declaration_XX 8 (mkobject_declaration_xx 9 ((*Result*) 3) Integer (Some ((E_Literal_XX 10 (Integer_Literal 1) (**(nil)**)))))) 
(D_Object_Declaration_XX 11 (mkobject_declaration_xx 12 ((*T*) 4) Integer None))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 13
    (S_Assignment_XX 14 (E_Identifier_XX 15 ((*T*) 4) (**(nil)**)) (E_Name_XX 16 (E_Identifier_XX 17 ((*N*) 1) (**(nil)**)) (**(nil)**))) 
    (S_Sequence_XX 18
    (S_While_Loop_XX 19 (E_Binary_Operation_XX 20 Greater_Than (E_Name_XX 21 (E_Identifier_XX 22 ((*T*) 4) (**(nil)**)) (**(nil)**)) (E_Literal_XX 23 (Integer_Literal 0) (**(nil)**)) (**(nil)**))
      (S_Sequence_XX 24
      (S_Assignment_XX 25 (E_Identifier_XX 26 ((*Result*) 3) (**(nil)**)) (E_Binary_Operation_XX 27 Multiply (E_Name_XX 28 (E_Identifier_XX 29 ((*Result*) 3) (**(nil)**)) (**(nil)**)) (E_Name_XX 30 (E_Identifier_XX 31 ((*T*) 4) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**))) 
      (S_Assignment_XX 32 (E_Identifier_XX 33 ((*T*) 4) (**(nil)**)) (E_Binary_Operation_XX 34 Minus (E_Name_XX 35 (E_Identifier_XX 36 ((*T*) 4) (**(nil)**)) (**(nil)**)) (E_Literal_XX 37 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**))))
    ) 
    (S_Assignment_XX 38 (E_Identifier_XX 39 ((*M*) 2) (**(nil)**)) (E_Name_XX 40 (E_Identifier_XX 41 ((*Result*) 3) (**(nil)**)) (**(nil)**)))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((23, Integer) :: (41, Integer) :: (35, Integer) :: (17, Integer) :: (26, Integer) :: (29, Integer) :: (20, Boolean) :: (40, Integer) :: (31, Integer) :: (22, Integer) :: (16, Integer) :: (34, Integer) :: (37, Integer) :: (10, Integer) :: (28, Integer) :: (36, Integer) :: (27, Integer) :: (21, Integer) :: (39, Integer) :: (30, Integer) :: (33, Integer) :: (15, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((23, (sloc (*Line*)8 (*Col*)14 (*EndLine*)8 (*EndCol*)14)) :: (41, (sloc (*Line*)12 (*Col*)9 (*EndLine*)12 (*EndCol*)14)) :: (35, (sloc (*Line*)10 (*Col*)12 (*EndLine*)10 (*EndCol*)12)) :: (17, (sloc (*Line*)7 (*Col*)9 (*EndLine*)7 (*EndCol*)9)) :: (26, (sloc (*Line*)9 (*Col*)7 (*EndLine*)9 (*EndCol*)12)) :: (29, (sloc (*Line*)9 (*Col*)17 (*EndLine*)9 (*EndCol*)22)) :: (20, (sloc (*Line*)8 (*Col*)10 (*EndLine*)8 (*EndCol*)14)) :: (40, (sloc (*Line*)12 (*Col*)9 (*EndLine*)12 (*EndCol*)14)) :: (31, (sloc (*Line*)9 (*Col*)26 (*EndLine*)9 (*EndCol*)26)) :: (22, (sloc (*Line*)8 (*Col*)10 (*EndLine*)8 (*EndCol*)10)) :: (16, (sloc (*Line*)7 (*Col*)9 (*EndLine*)7 (*EndCol*)9)) :: (34, (sloc (*Line*)10 (*Col*)12 (*EndLine*)10 (*EndCol*)16)) :: (37, (sloc (*Line*)10 (*Col*)16 (*EndLine*)10 (*EndCol*)16)) :: (10, (sloc (*Line*)3 (*Col*)23 (*EndLine*)3 (*EndCol*)23)) :: (28, (sloc (*Line*)9 (*Col*)17 (*EndLine*)9 (*EndCol*)22)) :: (36, (sloc (*Line*)10 (*Col*)12 (*EndLine*)10 (*EndCol*)12)) :: (27, (sloc (*Line*)9 (*Col*)17 (*EndLine*)9 (*EndCol*)26)) :: (21, (sloc (*Line*)8 (*Col*)10 (*EndLine*)8 (*EndCol*)10)) :: (39, (sloc (*Line*)12 (*Col*)4 (*EndLine*)12 (*EndCol*)4)) :: (30, (sloc (*Line*)9 (*Col*)26 (*EndLine*)9 (*EndCol*)26)) :: (33, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)7)) :: (15, (sloc (*Line*)7 (*Col*)4 (*EndLine*)7 (*EndCol*)4)) :: nil)
).

