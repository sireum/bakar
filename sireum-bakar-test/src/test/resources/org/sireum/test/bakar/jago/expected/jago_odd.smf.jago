(* Compilation Unit *)
Library_Unit 1
  (* Compilation Unit - Unit Declaration *) (
    Library_Subprogram 2 (
      (* Function Body Declaration *)
      Function 3 (
        mkfunction_body 4
          (* Function Body - Name *)
          (*Odd*) 1
          (* Function Body - Return Type *) 
          (Integer) 
          (* Function Body - Specification *)
          (nil)
          (* Function Body - Parameters *)
          (
          mkparameter_specification 5 (*X*) 1 (1) (In) None :: nil)
          (* Function Body - Local Defined Variables *)
          (
          mkobject_declaration 6 (*Result*) 2 1 None :: 
          mkobject_declaration 7 (*T*) 3 1 None :: nil)
          (* Function Body - Statements *) (
            S_Sequence 8 (
              S_Assignment 9 ((*Result*) 2) (E_Literal 10 (Integer_Literal 1)) ) ( 
              S_Sequence 11 (
                S_Assignment 12 ((*T*) 3) (E_Binary_Operation 13 Divide (E_Identifier 14 (*X*) 1) (E_Literal 15 (Integer_Literal 2))) ) ( 
                S_Sequence 16 (
                  S_If 17 (E_Binary_Operation 18 Equal (E_Identifier 19 (*X*) 1) (E_Binary_Operation 20 Multiply (E_Identifier 21 (*T*) 3) (E_Literal 22 (Integer_Literal 2)))) (
                      S_Assignment 23 ((*Result*) 2) (E_Literal 24 (Integer_Literal 0))
                    ) ) ( 
                  S_Return 25 (Some (E_Identifier 26 (*Result*) 2)) ) ) )
          )
      )
    )
  )
  (* Compilation Unit - Type Table *) (
    mktype_table (
      (* Expression Type Table: Expression AstNum --> TypeNum *)
      (10, 2) ::
      (13, 1) ::
      (14, 1) ::
      (15, 2) ::
      (18, 3) ::
      (19, 1) ::
      (20, 1) ::
      (21, 1) ::
      (22, 2) ::
      (24, 2) ::
      (26, 1) :: nil
    ) (
      (* Type Name Table: TypeNum --> (Type URI * Option(Type Declaration AST Num)) *)
      (1, ("ada://ordinary_type/Standard-1:1/Integer-1:1"%string, None)) ::
      (2, ("universal_integer"%string, None)) ::
      (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1"%string, None)) :: nil
    )
  )