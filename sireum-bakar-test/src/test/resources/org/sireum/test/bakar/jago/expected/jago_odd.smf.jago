(* Compilation Unit *)
Library_Unit_XX 1
  (* Compilation Unit - Unit Declaration *)
  (Library_Subprogram_XX 2
    (* Procedure Body Declaration *)
    (Global_Procedure_XX 3
      (mkprocedure_declaration_xx 4
        (* Procedure Name *)
        ((*Odd*) 1)
        (* Formal Parameters *)
        (
        (mkparameter_specification_xx 5 ((*X*) 1) Integer In) :: 
        (mkparameter_specification_xx 6 ((*R*) 2) Integer Out) :: nil) 
        (* Procedure Contract *)
        (nil)  
        (* Object Declarations *)
        ((D_Seq_Declaration_XX 7 
      (D_Object_Declaration_XX 8 (mkobject_declaration_xx 9 ((*Result*) 3) Integer None)) 
      (D_Object_Declaration_XX 10 (mkobject_declaration_xx 11 ((*T*) 4) Integer None))))
        (* Procedure Body *)
          (S_Sequence_XX 12
          (S_Assignment_XX 13 (E_Identifier_XX 14 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 15 (Integer_Literal 1) (**(nil)**))) 
          (S_Sequence_XX 16
          (S_Assignment_XX 17 (E_Identifier_XX 18 ((*T*) 4) (**(nil)**)) (E_Binary_Operation_XX 19 Divide (E_Name_XX 20 (E_Identifier_XX 21 ((*X*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 22 (Integer_Literal 2) (**(nil)**)) (**(Do_Division_Check :: nil)**))) 
          (S_Sequence_XX 23
          (S_If_XX 24 (E_Binary_Operation_XX 25 Equal (E_Name_XX 26 (E_Identifier_XX 27 ((*X*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 28 Multiply (E_Name_XX 29 (E_Identifier_XX 30 ((*T*) 4) (**(nil)**)) (**(nil)**)) (E_Literal_XX 31 (Integer_Literal 2) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
            (S_Assignment_XX 32 (E_Identifier_XX 33 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 34 (Integer_Literal 0) (**(nil)**)))
            S_Null_XX
          ) 
          (S_Assignment_XX 35 (E_Identifier_XX 36 ((*R*) 2) (**(nil)**)) (E_Name_XX 37 (E_Identifier_XX 38 ((*Result*) 3) (**(nil)**)) (**(nil)**))))))
      )
    )
  )