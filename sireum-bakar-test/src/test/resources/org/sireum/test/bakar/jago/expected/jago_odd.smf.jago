Definition Coq_AST_Tree_XX := 
(D_Procedure_Body_XX 1 
  (mkprocedure_body_xx 2
    (* = = = Procedure Name = = = *)
    ((*Odd*) 1)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_xx 3 ((*X*) 1) Integer In) :: 
    (mkparameter_specification_xx 4 ((*R*) 2) Integer Out) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 5
  (D_Object_Declaration_XX 6 (mkobject_declaration_xx 7 ((*Result*) 3) Integer None)) 
  (D_Object_Declaration_XX 8 (mkobject_declaration_xx 9 ((*T*) 4) Integer None))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 10
      (S_Assignment_XX 11 (E_Identifier_XX 12 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 13 (Integer_Literal 1) (**(nil)**))) 
      (S_Sequence_XX 14
      (S_Assignment_XX 15 (E_Identifier_XX 16 ((*T*) 4) (**(nil)**)) (E_Binary_Operation_XX 17 Divide (E_Name_XX 18 (E_Identifier_XX 19 ((*X*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 20 (Integer_Literal 2) (**(nil)**)) (**(Do_Division_Check :: nil)**))) 
      (S_Sequence_XX 21
      (S_If_XX 22 (E_Binary_Operation_XX 23 Equal (E_Name_XX 24 (E_Identifier_XX 25 ((*X*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 26 Multiply (E_Name_XX 27 (E_Identifier_XX 28 ((*T*) 4) (**(nil)**)) (**(nil)**)) (E_Literal_XX 29 (Integer_Literal 2) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
        (S_Assignment_XX 30 (E_Identifier_XX 31 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 32 (Integer_Literal 0) (**(nil)**)))
        S_Null_XX
      ) 
      (S_Assignment_XX 33 (E_Identifier_XX 34 ((*R*) 2) (**(nil)**)) (E_Name_XX 35 (E_Identifier_XX 36 ((*Result*) 3) (**(nil)**)) (**(nil)**))))))
  )
).

Definition Symbol_Table_XX := 
(mkSymbolTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Odd*) 1), (0, (mkprocedure_body_xx 2
  (* = = = Procedure Name = = = *)
  ((*Odd*) 1)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_xx 3 ((*X*) 1) Integer In) :: 
  (mkparameter_specification_xx 4 ((*R*) 2) Integer Out) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 5
(D_Object_Declaration_XX 6 (mkobject_declaration_xx 7 ((*Result*) 3) Integer None)) 
(D_Object_Declaration_XX 8 (mkobject_declaration_xx 9 ((*T*) 4) Integer None))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 10
    (S_Assignment_XX 11 (E_Identifier_XX 12 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 13 (Integer_Literal 1) (**(nil)**))) 
    (S_Sequence_XX 14
    (S_Assignment_XX 15 (E_Identifier_XX 16 ((*T*) 4) (**(nil)**)) (E_Binary_Operation_XX 17 Divide (E_Name_XX 18 (E_Identifier_XX 19 ((*X*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 20 (Integer_Literal 2) (**(nil)**)) (**(Do_Division_Check :: nil)**))) 
    (S_Sequence_XX 21
    (S_If_XX 22 (E_Binary_Operation_XX 23 Equal (E_Name_XX 24 (E_Identifier_XX 25 ((*X*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 26 Multiply (E_Name_XX 27 (E_Identifier_XX 28 ((*T*) 4) (**(nil)**)) (**(nil)**)) (E_Literal_XX 29 (Integer_Literal 2) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
      (S_Assignment_XX 30 (E_Identifier_XX 31 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 32 (Integer_Literal 0) (**(nil)**)))
      S_Null_XX
    ) 
    (S_Assignment_XX 33 (E_Identifier_XX 34 ((*R*) 2) (**(nil)**)) (E_Name_XX 35 (E_Identifier_XX 36 ((*Result*) 3) (**(nil)**)) (**(nil)**))))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((23, Boolean) :: (32, Integer) :: (35, Integer) :: (17, Integer) :: (26, Integer) :: (29, Integer) :: (20, Integer) :: (13, Integer) :: (31, Integer) :: (16, Integer) :: (34, Integer) :: (25, Integer) :: (19, Integer) :: (28, Integer) :: (36, Integer) :: (18, Integer) :: (27, Integer) :: (12, Integer) :: (24, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((23, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)15)) :: (32, (sloc (*Line*)11 (*Col*)17 (*EndLine*)11 (*EndCol*)17)) :: (35, (sloc (*Line*)13 (*Col*)9 (*EndLine*)13 (*EndCol*)14)) :: (17, (sloc (*Line*)9 (*Col*)9 (*EndLine*)9 (*EndCol*)13)) :: (26, (sloc (*Line*)10 (*Col*)11 (*EndLine*)10 (*EndCol*)15)) :: (29, (sloc (*Line*)10 (*Col*)15 (*EndLine*)10 (*EndCol*)15)) :: (20, (sloc (*Line*)9 (*Col*)13 (*EndLine*)9 (*EndCol*)13)) :: (13, (sloc (*Line*)8 (*Col*)14 (*EndLine*)8 (*EndCol*)14)) :: (31, (sloc (*Line*)11 (*Col*)7 (*EndLine*)11 (*EndCol*)12)) :: (16, (sloc (*Line*)9 (*Col*)4 (*EndLine*)9 (*EndCol*)4)) :: (34, (sloc (*Line*)13 (*Col*)4 (*EndLine*)13 (*EndCol*)4)) :: (25, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)7)) :: (19, (sloc (*Line*)9 (*Col*)9 (*EndLine*)9 (*EndCol*)9)) :: (28, (sloc (*Line*)10 (*Col*)11 (*EndLine*)10 (*EndCol*)11)) :: (36, (sloc (*Line*)13 (*Col*)9 (*EndLine*)13 (*EndCol*)14)) :: (18, (sloc (*Line*)9 (*Col*)9 (*EndLine*)9 (*EndCol*)9)) :: (27, (sloc (*Line*)10 (*Col*)11 (*EndLine*)10 (*EndCol*)11)) :: (12, (sloc (*Line*)8 (*Col*)4 (*EndLine*)8 (*EndCol*)9)) :: (24, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)7)) :: nil)
  (* = = = (6) name id to a pair of (name string, unique name string) map = = = *)
  (*/////////////////////////////////////////////////*)
  ((mkNameTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable names map = = = *)
  (*///////////////////////////////////*)
  ((2, ("R", "ada://parameter/Odd+1:11/R+1:32")) :: (4, ("T", "ada://variable/Odd+1:11/T+4:4")) :: (1, ("X", "ada://parameter/Odd+1:11/X+1:16")) :: (3, ("Result", "ada://variable/Odd+1:11/Result+3:4")) :: nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram names map = = = *)
  (*////////////////////////////////////////////*)
  ((1, ("Odd", "ada://procedure_body/Odd+1:11")) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) package names map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) type names map = = = *)
  (*/////////////////////////////////////*)
  (nil)
))
).

