Definition Coq_AST_Tree_XX := 
(D_Procedure_Body_XX 2 
  (mkprocedure_body_xx 4
    (* = = = Procedure Name = = = *)
    ((*Odd*) 1)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_xx 5 ((*X*) 1) Integer In) :: 
    (mkparameter_specification_xx 6 ((*R*) 2) Integer Out) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 7
  (D_Object_Declaration_XX 8 (mkobject_declaration_xx 9 ((*Result*) 3) Integer None)) 
  (D_Object_Declaration_XX 10 (mkobject_declaration_xx 11 ((*T*) 4) Integer None))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 12
      (S_Assignment_XX 13 (E_Identifier_XX 14 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 15 (Integer_Literal 1) (**(nil)**))) 
      (S_Sequence_XX 16
      (S_Assignment_XX 17 (E_Identifier_XX 18 ((*T*) 4) (**(nil)**)) (E_Binary_Operation_XX 19 Divide (E_Name_XX 20 (E_Identifier_XX 21 ((*X*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 22 (Integer_Literal 2) (**(nil)**)) (**(Do_Division_Check :: nil)**))) 
      (S_Sequence_XX 23
      (S_If_XX 24 (E_Binary_Operation_XX 25 Equal (E_Name_XX 26 (E_Identifier_XX 27 ((*X*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 28 Multiply (E_Name_XX 29 (E_Identifier_XX 30 ((*T*) 4) (**(nil)**)) (**(nil)**)) (E_Literal_XX 31 (Integer_Literal 2) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
        (S_Assignment_XX 32 (E_Identifier_XX 33 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 34 (Integer_Literal 0) (**(nil)**)))
        S_Null_XX
      ) 
      (S_Assignment_XX 35 (E_Identifier_XX 36 ((*R*) 2) (**(nil)**)) (E_Name_XX 37 (E_Identifier_XX 38 ((*Result*) 3) (**(nil)**)) (**(nil)**))))))
  )
).

Definition Symbol_Table_XX := 
(mkSymbolTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Odd*) 1), (0, (mkprocedure_body_xx 4
  (* = = = Procedure Name = = = *)
  ((*Odd*) 1)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_xx 5 ((*X*) 1) Integer In) :: 
  (mkparameter_specification_xx 6 ((*R*) 2) Integer Out) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 7
(D_Object_Declaration_XX 8 (mkobject_declaration_xx 9 ((*Result*) 3) Integer None)) 
(D_Object_Declaration_XX 10 (mkobject_declaration_xx 11 ((*T*) 4) Integer None))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 12
    (S_Assignment_XX 13 (E_Identifier_XX 14 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 15 (Integer_Literal 1) (**(nil)**))) 
    (S_Sequence_XX 16
    (S_Assignment_XX 17 (E_Identifier_XX 18 ((*T*) 4) (**(nil)**)) (E_Binary_Operation_XX 19 Divide (E_Name_XX 20 (E_Identifier_XX 21 ((*X*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 22 (Integer_Literal 2) (**(nil)**)) (**(Do_Division_Check :: nil)**))) 
    (S_Sequence_XX 23
    (S_If_XX 24 (E_Binary_Operation_XX 25 Equal (E_Name_XX 26 (E_Identifier_XX 27 ((*X*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 28 Multiply (E_Name_XX 29 (E_Identifier_XX 30 ((*T*) 4) (**(nil)**)) (**(nil)**)) (E_Literal_XX 31 (Integer_Literal 2) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
      (S_Assignment_XX 32 (E_Identifier_XX 33 ((*Result*) 3) (**(nil)**)) (E_Literal_XX 34 (Integer_Literal 0) (**(nil)**)))
      S_Null_XX
    ) 
    (S_Assignment_XX 35 (E_Identifier_XX 36 ((*R*) 2) (**(nil)**)) (E_Name_XX 37 (E_Identifier_XX 38 ((*Result*) 3) (**(nil)**)) (**(nil)**))))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((26, Integer) :: (38, Integer) :: (29, Integer) :: (20, Integer) :: (14, Integer) :: (31, Integer) :: (22, Integer) :: (34, Integer) :: (25, Boolean) :: (37, Integer) :: (19, Integer) :: (28, Integer) :: (36, Integer) :: (18, Integer) :: (27, Integer) :: (21, Integer) :: (30, Integer) :: (33, Integer) :: (15, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((26, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)7)) :: (38, (sloc (*Line*)13 (*Col*)9 (*EndLine*)13 (*EndCol*)14)) :: (29, (sloc (*Line*)10 (*Col*)11 (*EndLine*)10 (*EndCol*)11)) :: (20, (sloc (*Line*)9 (*Col*)9 (*EndLine*)9 (*EndCol*)9)) :: (14, (sloc (*Line*)8 (*Col*)4 (*EndLine*)8 (*EndCol*)9)) :: (31, (sloc (*Line*)10 (*Col*)15 (*EndLine*)10 (*EndCol*)15)) :: (22, (sloc (*Line*)9 (*Col*)13 (*EndLine*)9 (*EndCol*)13)) :: (34, (sloc (*Line*)11 (*Col*)17 (*EndLine*)11 (*EndCol*)17)) :: (25, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)15)) :: (37, (sloc (*Line*)13 (*Col*)9 (*EndLine*)13 (*EndCol*)14)) :: (19, (sloc (*Line*)9 (*Col*)9 (*EndLine*)9 (*EndCol*)13)) :: (28, (sloc (*Line*)10 (*Col*)11 (*EndLine*)10 (*EndCol*)15)) :: (36, (sloc (*Line*)13 (*Col*)4 (*EndLine*)13 (*EndCol*)4)) :: (18, (sloc (*Line*)9 (*Col*)4 (*EndLine*)9 (*EndCol*)4)) :: (27, (sloc (*Line*)10 (*Col*)7 (*EndLine*)10 (*EndCol*)7)) :: (21, (sloc (*Line*)9 (*Col*)9 (*EndLine*)9 (*EndCol*)9)) :: (30, (sloc (*Line*)10 (*Col*)11 (*EndLine*)10 (*EndCol*)11)) :: (33, (sloc (*Line*)11 (*Col*)7 (*EndLine*)11 (*EndCol*)12)) :: (15, (sloc (*Line*)8 (*Col*)14 (*EndLine*)8 (*EndCol*)14)) :: nil)
).

