package Sort;


procedure Integer Num_Repetition (
        Array_Type A,
        Contents_Type E,
        Index_Type L,
        Index_Type U) {
  local
    Integer Result;
    Index_Type I;
    Index_Type _tcomp0;
    Index_Type _tcomp1;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;


  #l1.
    Result := 0ii;

  #l3.
    _tcomp0 := L;

  #l4.
    _tcomp1 := U;

  #rwl0.
    _t0 := _tcomp0;

  #rwl1.
    _t1 := _tcomp1;

  #l5.
    if _t0 > _t1 then goto l2;

  #l6.
    I := _tcomp0;

  #l7.
    // empty loc

  #rwl2.
    _t2 := A[I];

  #rwl3.
    _t3 := E;

  #l9.
    if !(_t2 == _t3) then goto l8;

  #rwl4.
    _t4 := Result;

  #rwl5.
    _t5 := 1ii;

  #l10.
    Result := _t4 + _t5;

  #l8.
    // empty loc

  #rwl6.
    _t6 := I;

  #rwl7.
    _t7 := _tcomp1;

  #l11.
    if _t6 == _t7 then goto l2;

  #rwl8.
    _t8 := I;

  #rwl9.
    _t9 := 1ii;

  #l12.
    I := _t8 + _t9;

  #l13.
    goto l7;

  #l2.
    // empty loc

  #l14.
    return Result;
}

procedure Boolean Perm (
        Array_Type A,
        Array_Type B,
        Index_Type L,
        Index_Type U) {
  local
    Boolean Result;
    Index_Type I;
    Index_Type _tcomp2;
    Index_Type _tcomp3;
    Integer _tcomp4;
    Integer _tcomp5;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;
    FIXME _t16;
    FIXME _t17;


  #l15.
    Result := true;

  #l17.
    _tcomp2 := L;

  #l18.
    _tcomp3 := U;

  #rwl10.
    _t10 := _tcomp2;

  #rwl11.
    _t11 := _tcomp3;

  #l19.
    if _t10 > _t11 then goto l16;

  #l20.
    I := _tcomp2;

  #l21.
    // empty loc

  #l23.
    call _tcomp4 := Num_Repetition (A, A[I], L, U);

  #l24.
    call _tcomp5 := Num_Repetition (B, A[I], L, U);

  #rwl12.
    _t12 := _tcomp4;

  #rwl13.
    _t13 := _tcomp5;

  #l25.
    if !(_t12 != _t13) then goto l22;

  #l26.
    Result := false;

  #l22.
    // empty loc

  #rwl14.
    _t14 := I;

  #rwl15.
    _t15 := _tcomp3;

  #l27.
    if _t14 == _t15 then goto l16;

  #rwl16.
    _t16 := I;

  #rwl17.
    _t17 := 1ii;

  #l28.
    I := _t16 + _t17;

  #l29.
    goto l21;

  #l16.
    // empty loc

  #l30.
    return Result;
}

procedure Boolean Ordered (
        Array_Type A,
        Index_Type L,
        Index_Type U) {
  local
    Boolean Result;
    Index_Type I;
    Index_Type _tcomp6;
    Index_Type _tcomp7;
    FIXME _t18;
    FIXME _t19;
    FIXME _t20;
    FIXME _t21;
    FIXME _t22;
    FIXME _t23;
    FIXME _t24;
    FIXME _t25;
    FIXME _t26;
    FIXME _t27;
    FIXME _t28;
    FIXME _t29;


  #l31.
    Result := true;

  #l33.
    _tcomp6 := L;

  #rwl18.
    _t18 := U;

  #rwl19.
    _t19 := 1ii;

  #l34.
    _tcomp7 := _t18 - _t19;

  #rwl20.
    _t20 := _tcomp6;

  #rwl21.
    _t21 := _tcomp7;

  #l35.
    if _t20 > _t21 then goto l32;

  #l36.
    I := _tcomp6;

  #l37.
    // empty loc

  #rwl22.
    _t22 := I;

  #rwl23.
    _t23 := 1ii;

  #rwl24.
    _t24 := A[I];

  #rwl25.
    _t25 := A[_t22 + _t23];

  #l39.
    if !(_t24 > _t25) then goto l38;

  #l40.
    Result := false;

  #l38.
    // empty loc

  #rwl26.
    _t26 := I;

  #rwl27.
    _t27 := _tcomp7;

  #l41.
    if _t26 == _t27 then goto l32;

  #rwl28.
    _t28 := I;

  #rwl29.
    _t29 := 1ii;

  #l42.
    I := _t28 + _t29;

  #l43.
    goto l37;

  #l32.
    // empty loc

  #l44.
    return Result;
}

procedure Boolean Partitioned (
        Array_Type A,
        Index_Type L,
        Index_Type M,
        Index_Type U) {
  local
    Boolean Result;
    Index_Type I;
    Index_Type _tcomp8;
    Index_Type _tcomp9;
    Index_Type J;
    Index_Type _tcomp10;
    Index_Type _tcomp11;
    FIXME _t30;
    FIXME _t31;
    FIXME _t32;
    FIXME _t33;
    FIXME _t34;
    FIXME _t35;
    FIXME _t36;
    FIXME _t37;
    FIXME _t38;
    FIXME _t39;
    FIXME _t40;
    FIXME _t41;
    FIXME _t42;
    FIXME _t43;
    FIXME _t44;
    FIXME _t45;


  #l45.
    Result := true;

  #l47.
    _tcomp8 := L;

  #l48.
    _tcomp9 := M;

  #rwl30.
    _t30 := _tcomp8;

  #rwl31.
    _t31 := _tcomp9;

  #l49.
    if _t30 > _t31 then goto l46;

  #l50.
    I := _tcomp8;

  #l51.
    // empty loc

  #rwl32.
    _t32 := M;

  #rwl33.
    _t33 := 1ii;

  #l53.
    _tcomp10 := _t32 + _t33;

  #l54.
    _tcomp11 := U;

  #rwl34.
    _t34 := _tcomp10;

  #rwl35.
    _t35 := _tcomp11;

  #l55.
    if _t34 > _t35 then goto l52;

  #l56.
    J := _tcomp10;

  #l57.
    // empty loc

  #rwl36.
    _t36 := A[I];

  #rwl37.
    _t37 := A[J];

  #l59.
    if !(_t36 > _t37) then goto l58;

  #l60.
    Result := false;

  #l58.
    // empty loc

  #rwl38.
    _t38 := J;

  #rwl39.
    _t39 := _tcomp11;

  #l61.
    if _t38 == _t39 then goto l52;

  #rwl40.
    _t40 := J;

  #rwl41.
    _t41 := 1ii;

  #l62.
    J := _t40 + _t41;

  #l63.
    goto l57;

  #l52.
    // empty loc

  #rwl42.
    _t42 := I;

  #rwl43.
    _t43 := _tcomp9;

  #l64.
    if _t42 == _t43 then goto l46;

  #rwl44.
    _t44 := I;

  #rwl45.
    _t45 := 1ii;

  #l65.
    I := _t44 + _t45;

  #l66.
    goto l51;

  #l46.
    // empty loc

  #l67.
    return Result;
}

procedure Swap_Elements (
        Array_Type T,
        Index_Type I,
        Index_Type J) {
  local
    Contents_Type Temp;


  #l68.
    Temp := T[I];

  #l69.
    T[I] := T[J];

  #l70.
    T[J] := Temp;

  #l71.
    return;
}

procedure BubbleSort (
        Array_Type Table) {
  local
    Index_Type I;
    Index_Type _tcomp12;
    Index_Type _tcomp13;
    Index_Type J;
    Index_Type _tcomp14;
    Index_Type _tcomp15;
    FIXME _t46;
    FIXME _t47;
    FIXME _t48;
    FIXME _t49;
    FIXME _t50;
    FIXME _t51;
    FIXME _t52;
    FIXME _t53;
    FIXME _t54;
    FIXME _t55;
    FIXME _t56;
    FIXME _t57;
    FIXME _t58;
    FIXME _t59;
    FIXME _t60;
    FIXME _t61;
    FIXME _t62;
    FIXME _t63;
    FIXME _t64;
    FIXME _t65;
    FIXME _t66;
    FIXME _t67;
    FIXME _t68;
    FIXME _t69;
    FIXME _t70;
    FIXME _t71;
    FIXME _t72;
    FIXME _t73;
    FIXME _t74;
    FIXME _t75;


  #l73.
    _tcomp12 := attribute__uif__first (Array_Type);

  #l74.
    _tcomp13 := attribute__uif__last (Array_Type);

  #rwl46.
    _t46 := _tcomp12;

  #rwl47.
    _t47 := _tcomp13;

  #l75.
    if _t46 > _t47 then goto l72;

  #l76.
    I := _tcomp13;

  #l77.
    // empty loc

  #rwl48.
    _t48 := attribute__uif__first `Array_Type;

  #rwl49.
    _t49 := 1ii;

  #l79.
    _tcomp14 := _t48 + _t49;

  #l80.
    _tcomp15 := I;

  #rwl50.
    _t50 := _tcomp14;

  #rwl51.
    _t51 := _tcomp15;

  #l81.
    if _t50 > _t51 then goto l78;

  #l82.
    J := _tcomp14;

  #l83.
    // empty loc

  #rwl52.
    _t52 := J;

  #rwl53.
    _t53 := 1ii;

  #rwl54.
    _t54 := Table[_t52 - _t53];

  #rwl55.
    _t55 := Table[J];

  #l85.
    if !(_t54 > _t55) then goto l84;

  #rwl56.
    _t56 := J;

  #rwl57.
    _t57 := 1ii;

  #l86.
    call Swap_Elements (Table, _t56 - _t57, J);

  #l84.
    // empty loc

  #rwl58.
    _t58 := J;

  #rwl59.
    _t59 := 1ii;

  #rwl60.
    _t60 := Table[K];

  #rwl61.
    _t61 := Table[J];

  #rwl62.
    _t62 := proof__uif__for_all {Index_Type K => 
        switch K
          case (attribute__uif__first `Array_Type, _t58 - _t59) => _t60 <= _t61
          default => true};

  #rwl63.
    _t63 := Perm (Table, attribute__uif__loop_entry Table, attribute__uif__first `Index_Type, attribute__uif__last `Index_Type);

  #l87.
    assert _t62 && _t63;

  #rwl64.
    _t64 := J;

  #rwl65.
    _t65 := _tcomp15;

  #l88.
    if _t64 == _t65 then goto l78;

  #rwl66.
    _t66 := J;

  #rwl67.
    _t67 := 1ii;

  #l89.
    J := _t66 + _t67;

  #l90.
    goto l83;

  #l78.
    // empty loc

  #rwl68.
    _t68 := Ordered (Table, I, attribute__uif__last `Index_Type);

  #rwl69.
    _t69 := Partitioned (Table, attribute__uif__first `Index_Type, I, attribute__uif__last `Index_Type);

  #rwl70.
    _t70 := _t68 && _t69;

  #rwl71.
    _t71 := Perm (Table, attribute__uif__loop_entry Table, attribute__uif__first `Index_Type, attribute__uif__last `Index_Type);

  #l91.
    assert _t70 && _t71;

  #rwl72.
    _t72 := I;

  #rwl73.
    _t73 := _tcomp12;

  #l92.
    if _t72 == _t73 then goto l72;

  #rwl74.
    _t74 := I;

  #rwl75.
    _t75 := 1ii;

  #l93.
    I := _t74 - _t75;

  #l94.
    goto l77;

  #l72.
    // empty loc

  #l95.
    return;
}

procedure BubbleSortFast (
        Array_Type Table) {
  local
    Base_Index_Type Bound;
    Base_Index_Type T;
    Index_Type J;
    FIXME _t76;
    FIXME _t77;
    FIXME _t78;
    FIXME _t79;
    FIXME _t80;
    FIXME _t81;
    FIXME _t82;
    FIXME _t83;
    FIXME _t84;
    FIXME _t85;
    FIXME _t86;
    FIXME _t87;
    FIXME _t88;
    FIXME _t89;
    FIXME _t90;
    FIXME _t91;
    FIXME _t92;
    FIXME _t93;
    FIXME _t94;
    FIXME _t95;
    FIXME _t96;
    FIXME _t97;
    FIXME _t98;
    FIXME _t99;
    FIXME _t100;
    FIXME _t101;


  #l96.
    Bound := attribute__uif__last `Index_Type;

  #l97.
    // empty loc

  #rwl76.
    _t76 := Bound;

  #rwl77.
    _t77 := 0ii;

  #l99.
    if _t76 == _t77 then goto l98;

  #l100.
    J := attribute__uif__first `Index_Type;

  #l101.
    T := 0ii;

  #l103.
    // empty loc

  #rwl78.
    _t78 := Bound;

  #rwl79.
    _t79 := 1ii;

  #rwl80.
    _t80 := J;

  #rwl81.
    _t81 := _t78 - _t79;

  #l104.
    if !(_t80 <= _t81) then goto l102;

  #rwl82.
    _t82 := J;

  #rwl83.
    _t83 := 1ii;

  #rwl84.
    _t84 := Table[J];

  #rwl85.
    _t85 := Table[_t82 + _t83];

  #l106.
    if !(_t84 > _t85) then goto l105;

  #rwl86.
    _t86 := J;

  #rwl87.
    _t87 := 1ii;

  #l107.
    call Swap_Elements (Table, J, _t86 + _t87);

  #l108.
    T := J;

  #l105.
    // empty loc

  #rwl88.
    _t88 := J;

  #rwl89.
    _t89 := 1ii;

  #l109.
    J := _t88 + _t89;

  #rwl90.
    _t90 := J;

  #rwl91.
    _t91 := 1ii;

  #rwl92.
    _t92 := Table[K];

  #rwl93.
    _t93 := Table[J];

  #rwl94.
    _t94 := proof__uif__for_all {Index_Type K => 
        switch K
          case (attribute__uif__first `Index_Type, _t90 - _t91) => _t92 <= _t93
          default => true};

  #rwl95.
    _t95 := Partitioned (Table, attribute__uif__first `Index_Type, T, J);

  #rwl96.
    _t96 := _t94 && _t95;

  #rwl97.
    _t97 := Perm (Table, attribute__uif__loop_entry Table, attribute__uif__first `Index_Type, attribute__uif__last `Index_Type);

  #l110.
    assert _t96 && _t97;

  #l111.
    goto l103;

  #l102.
    // empty loc

  #rwl98.
    _t98 := Ordered (Table, Bound, attribute__uif__last `Index_Type);

  #rwl99.
    _t99 := Partitioned (Table, attribute__uif__first `Index_Type, Bound, attribute__uif__last `Index_Type);

  #rwl100.
    _t100 := _t98 && _t99;

  #rwl101.
    _t101 := Perm (Table, attribute__uif__loop_entry Table, attribute__uif__first `Index_Type, attribute__uif__last `Index_Type);

  #l112.
    assert _t100 && _t101;

  #l113.
    Bound := T;

  #l114.
    goto l97;

  #l98.
    // empty loc

  #l115.
    return;
}

procedure InsertionSort (
        Array_Type Table) {
  local
    Index_Type J;
    Contents_Type Temp;
    Index_Type P;
    Index_Type _tcomp16;
    Index_Type _tcomp17;
    FIXME _t102;
    FIXME _t103;
    FIXME _t104;
    FIXME _t105;
    FIXME _t106;
    FIXME _t107;
    FIXME _t108;
    FIXME _t109;
    FIXME _t110;
    FIXME _t111;
    FIXME _t112;
    FIXME _t113;
    FIXME _t114;
    FIXME _t115;
    FIXME _t116;
    FIXME _t117;
    FIXME _t118;
    FIXME _t119;
    FIXME _t120;
    FIXME _t121;
    FIXME _t122;
    FIXME _t123;
    FIXME _t124;
    FIXME _t125;
    FIXME _t126;
    FIXME _t127;
    FIXME _t128;
    FIXME _t129;
    FIXME _t130;
    FIXME _t131;
    FIXME _t132;
    FIXME _t133;
    FIXME _t134;
    FIXME _t135;
    FIXME _t136;
    FIXME _t137;
    FIXME _t138;
    FIXME _t139;
    FIXME _t140;
    FIXME _t141;
    FIXME _t142;
    FIXME _t143;
    FIXME _t144;
    FIXME _t145;
    FIXME _t146;
    FIXME _t147;
    FIXME _t148;
    FIXME _t149;
    FIXME _t150;
    FIXME _t151;
    FIXME _t152;
    FIXME _t153;
    FIXME _t154;
    FIXME _t155;
    FIXME _t156;
    FIXME _t157;
    FIXME _t158;
    FIXME _t159;
    FIXME _t160;
    FIXME _t161;
    FIXME _t162;
    FIXME _t163;


  #rwl102.
    _t102 := attribute__uif__first `Index_Type;

  #rwl103.
    _t103 := 1ii;

  #l117.
    _tcomp16 := _t102 + _t103;

  #l118.
    _tcomp17 := attribute__uif__last `Index_Type;

  #rwl104.
    _t104 := _tcomp16;

  #rwl105.
    _t105 := _tcomp17;

  #l119.
    if _t104 > _t105 then goto l116;

  #l120.
    P := _tcomp16;

  #l121.
    // empty loc

  #l122.
    Temp := Table[P];

  #l123.
    J := P;

  #l125.
    // empty loc

  #rwl106.
    _t106 := attribute__uif__first `Index_Type;

  #rwl107.
    _t107 := 1ii;

  #rwl108.
    _t108 := J;

  #rwl109.
    _t109 := _t106 + _t107;

  #rwl110.
    _t110 := J;

  #rwl111.
    _t111 := 1ii;

  #rwl112.
    _t112 := Table[_t110 - _t111];

  #rwl113.
    _t113 := Temp;

  #rwl114.
    _t114 := _t108 >= _t109;

  #rwl115.
    _t115 := _t112 > _t113;

  #l126.
    if !(_t114 &&& _t115) then goto l124;

  #rwl116.
    _t116 := J;

  #rwl117.
    _t117 := 1ii;

  #l127.
    Table[J] := Table[_t116 - _t117];

  #rwl118.
    _t118 := J;

  #rwl119.
    _t119 := 1ii;

  #l128.
    J := _t118 - _t119;

  #rwl120.
    _t120 := attribute__uif__loop_entry Table;

  #rwl121.
    _t121 := Temp;

  #rwl122.
    _t122 := _t120[P];

  #rwl123.
    _t123 := attribute__uif__first `Index_Type;

  #rwl124.
    _t124 := J;

  #rwl125.
    _t125 := _t121 == _t122;

  #rwl126.
    _t126 := _t123 <= _t124;

  #rwl127.
    _t127 := J;

  #rwl128.
    _t128 := P;

  #rwl129.
    _t129 := _t125 && _t126;

  #rwl130.
    _t130 := _t127 < _t128;

  #rwl131.
    _t131 := J;

  #rwl132.
    _t132 := 1ii;

  #rwl133.
    _t133 := Table[K];

  #rwl134.
    _t134 := Temp;

  #rwl135.
    _t135 := _t129 && _t130;

  #rwl136.
    _t136 := proof__uif__for_all {Index_Type K => 
        switch K
          case (_t131 + _t132, P) => _t133 > _t134
          default => true};

  #rwl137.
    _t137 := _t135 && _t136;

  #rwl138.
    _t138 := Ordered (Table, attribute__uif__first `Index_Type, P);

  #rwl139.
    _t139 := _t137 && _t138;

  #rwl140.
    _t140 := Perm (attribute__uif__array_update (Table, ^{J -> Temp}), attribute__uif__loop_entry Table, attribute__uif__first `Index_Type, P);

  #l129.
    assert _t139 && _t140;

  #l130.
    goto l125;

  #l124.
    // empty loc

  #l131.
    Table[J] := Temp;

  #rwl141.
    _t141 := attribute__uif__first `Index_Type;

  #rwl142.
    _t142 := 1ii;

  #rwl143.
    _t143 := _t141 + _t142;

  #rwl144.
    _t144 := P;

  #rwl145.
    _t145 := P;

  #rwl146.
    _t146 := attribute__uif__last `Index_Type;

  #rwl147.
    _t147 := _t143 <= _t144;

  #rwl148.
    _t148 := _t145 <= _t146;

  #rwl149.
    _t149 := _t147 && _t148;

  #rwl150.
    _t150 := Ordered (Table, attribute__uif__first `Index_Type, P);

  #rwl151.
    _t151 := _t149 && _t150;

  #rwl152.
    _t152 := Perm (Table, attribute__uif__loop_entry Table, attribute__uif__first `Index_Type, P);

  #rwl153.
    _t153 := P;

  #rwl154.
    _t154 := 1ii;

  #rwl155.
    _t155 := attribute__uif__loop_entry Table;

  #rwl156.
    _t156 := Table[K];

  #rwl157.
    _t157 := _t155[K];

  #rwl158.
    _t158 := _t151 && _t152;

  #rwl159.
    _t159 := proof__uif__for_all {Index_Type K => 
        switch K
          case (_t153 + _t154, attribute__uif__last `Index_Type) => _t156 == _t157
          default => true};

  #l132.
    assert _t158 && _t159;

  #rwl160.
    _t160 := P;

  #rwl161.
    _t161 := _tcomp17;

  #l133.
    if _t160 == _t161 then goto l116;

  #rwl162.
    _t162 := P;

  #rwl163.
    _t163 := 1ii;

  #l134.
    P := _t162 + _t163;

  #l135.
    goto l121;

  #l116.
    // empty loc

  #l136.
    return;
}

procedure ShellSort (
        Array_Type Table) {
  local
    Index_Type Gap;
    Integer J;
    Index_Type I;
    Index_Type _tcomp18;
    Index_Type _tcomp19;
    FIXME _t164;
    FIXME _t165;
    FIXME _t166;
    FIXME _t167;
    FIXME _t168;
    FIXME _t169;
    FIXME _t170;
    FIXME _t171;
    FIXME _t172;
    FIXME _t173;
    FIXME _t174;
    FIXME _t175;
    FIXME _t176;
    FIXME _t177;
    FIXME _t178;
    FIXME _t179;
    FIXME _t180;
    FIXME _t181;
    FIXME _t182;
    FIXME _t183;
    FIXME _t184;
    FIXME _t185;
    FIXME _t186;
    FIXME _t187;


  #l137.
    Gap := attribute__uif__last `Index_Type;

  #l138.
    // empty loc

  #rwl164.
    _t164 := Gap;

  #rwl165.
    _t165 := 2ii;

  #l140.
    Gap := _t164 / _t165;

  #l142.
    _tcomp18 := Gap;

  #l143.
    _tcomp19 := attribute__uif__last `Index_Type;

  #rwl166.
    _t166 := _tcomp18;

  #rwl167.
    _t167 := _tcomp19;

  #l144.
    if _t166 > _t167 then goto l141;

  #l145.
    I := _tcomp18;

  #l146.
    // empty loc

  #rwl168.
    _t168 := I;

  #rwl169.
    _t169 := Gap;

  #l147.
    J := _t168 - _t169;

  #l149.
    // empty loc

  #rwl170.
    _t170 := J;

  #rwl171.
    _t171 := attribute__uif__first `Index_Type;

  #rwl172.
    _t172 := J;

  #rwl173.
    _t173 := Gap;

  #rwl174.
    _t174 := Table[J];

  #rwl175.
    _t175 := Table[_t172 + _t173];

  #rwl176.
    _t176 := _t170 >= _t171;

  #rwl177.
    _t177 := _t174 > _t175;

  #l150.
    if !(_t176 &&& _t177) then goto l148;

  #rwl178.
    _t178 := J;

  #rwl179.
    _t179 := Gap;

  #l151.
    call Swap_Elements (Table, J, _t178 + _t179);

  #rwl180.
    _t180 := J;

  #rwl181.
    _t181 := Gap;

  #l152.
    J := _t180 - _t181;

  #l153.
    goto l149;

  #l148.
    // empty loc

  #rwl182.
    _t182 := I;

  #rwl183.
    _t183 := _tcomp19;

  #l154.
    if _t182 == _t183 then goto l141;

  #rwl184.
    _t184 := I;

  #rwl185.
    _t185 := 1ii;

  #l155.
    I := _t184 + _t185;

  #l156.
    goto l146;

  #l141.
    // empty loc

  #rwl186.
    _t186 := Gap;

  #rwl187.
    _t187 := attribute__uif__first `Index_Type;

  #l157.
    if _t186 == _t187 then goto l139;

  #l158.
    goto l138;

  #l139.
    // empty loc

  #l159.
    return;
}package Sort;


typealias Integer Base_Index_Type;

typealias Base_Index_Type Index_Type;

typealias _SIGNED_INTEGER_TYPE_ Contents_Type;

typealias _ARRAY_ Array_Type;

const $CONST {
  Max_Elements = (Integer) 3ii;
}

procedure Boolean Ordered (
        Array_Type A,
        Index_Type L,
        Index_Type U) {

}

procedure Boolean Perm (
        Array_Type A,
        Array_Type B,
        Index_Type L,
        Index_Type U) {

}

procedure BubbleSort (
        Array_Type Table) {

}

procedure BubbleSortFast (
        Array_Type Table) {

}

procedure InsertionSort (
        Array_Type Table) {

}

procedure ShellSort (
        Array_Type Table) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;