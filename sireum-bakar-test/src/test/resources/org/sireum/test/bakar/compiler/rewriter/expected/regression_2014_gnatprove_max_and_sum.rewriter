package MaxAndSum;


procedure MaxAndSum (
        ElementArray A,
        Natural Sum,
        Element Max) {
  local
    universal_integer I;
    universal_integer _tcomp0;
    universal_integer _tcomp1;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;
    FIXME _t16;
    FIXME _t17;
    FIXME _t18;
    FIXME _t19;


  #l1.
    Sum := 0ii;

  #l2.
    Max := 0ii;

  #l4.
    _tcomp0 := 1ii;

  #l5.
    _tcomp1 := N;

  #rwl0.
    _t0 := _tcomp0;

  #rwl1.
    _t1 := _tcomp1;

  #l6.
    if _t0 > _t1 then goto l3;

  #l7.
    I := _tcomp0;

  #l8.
    // empty loc

  #rwl2.
    _t2 := I;

  #rwl3.
    _t3 := 1ii;

  #rwl4.
    _t4 := _t2 - _t3;

  #rwl5.
    _t5 := Max;

  #rwl6.
    _t6 := Sum;

  #rwl7.
    _t7 := _t4 * _t5;

  #l9.
    assert proof__uif__loop_invariant _t6 <= _t7;

  #rwl8.
    _t8 := Sum;

  #rwl9.
    _t9 := A[I];

  #l10.
    Sum := _t8 + _t9;

  #rwl10.
    _t10 := Max;

  #rwl11.
    _t11 := A[I];

  #l12.
    if !(_t10 < _t11) then goto l11;

  #l13.
    Max := A[I];

  #l11.
    // empty loc

  #rwl12.
    _t12 := I;

  #rwl13.
    _t13 := Max;

  #rwl14.
    _t14 := Sum;

  #rwl15.
    _t15 := _t12 * _t13;

  #l14.
    assert _t14 <= _t15;

  #rwl16.
    _t16 := I;

  #rwl17.
    _t17 := _tcomp1;

  #l15.
    if _t16 == _t17 then goto l3;

  #rwl18.
    _t18 := I;

  #rwl19.
    _t19 := 1ii;

  #l16.
    I := _t18 + _t19;

  #l17.
    goto l8;

  #l3.
    // empty loc

  #l18.
    return;
}package MaxAndSum;


typealias Natural Element;

typealias Positive anonymousType$0;

typealias _ARRAY_ ElementArray;

const $CONST {
  N = (Natural) 100ii;
}

procedure MaxAndSum (
        ElementArray A,
        Natural Sum,
        Element Max) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;