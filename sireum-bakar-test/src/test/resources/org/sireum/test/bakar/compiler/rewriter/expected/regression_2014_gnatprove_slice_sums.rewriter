package Slice_Sums;


procedure Slice_Bounds Maximal_Sum_Slice_Bounds (
        Vector X) {
  local
    Natural Max_Sum;
    Slice_Bounds Result;
    Slice_Bounds Current_Slice;
    Integer Current_Sum;
    Index Lo;
    Index _tcomp0;
    Index _tcomp1;
    Index Hi;
    Index _tcomp2;
    Index _tcomp3;
    Integer _tcomp4;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;
    FIXME _t16;
    FIXME _t17;
    FIXME _t18;
    FIXME _t19;
    FIXME _t20;
    FIXME _t21;
    FIXME _t22;
    FIXME _t23;
    FIXME _t24;
    FIXME _t25;
    FIXME _t26;
    FIXME _t27;
    FIXME _t28;
    FIXME _t29;
    FIXME _t30;
    FIXME _t31;
    FIXME _t32;
    FIXME _t33;
    FIXME _t34;
    FIXME _t35;
    FIXME _t36;
    FIXME _t37;
    FIXME _t38;
    FIXME _t39;
    FIXME _t40;
    FIXME _t41;
    FIXME _t42;
    FIXME _t43;
    FIXME _t44;
    FIXME _t45;
    FIXME _t46;
    FIXME _t47;
    FIXME _t48;
    FIXME _t49;
    FIXME _t50;
    FIXME _t51;


  #l1.
    Max_Sum := 0ii;

  #l2.
    Result := `Slice_Bounds {
      Lo = 1ii,
      Hi = 0ii
    };

  #l4.
    _tcomp0 := attribute__uif__first `X;

  #l5.
    _tcomp1 := attribute__uif__last `X;

  #rwl0.
    _t0 := _tcomp0;

  #rwl1.
    _t1 := _tcomp1;

  #l6.
    if _t0 > _t1 then goto l3;

  #l7.
    Lo := _tcomp0;

  #l8.
    // empty loc

  #rwl2.
    _t2 := Lo;

  #rwl3.
    _t3 := 1ii;

  #rwl4.
    _t4 := Max_Sum;

  #rwl5.
    _t5 := Sum (X, `Slice_Bounds {
      __positional0 = Lo_Index,
      __positional1 = Hi_Index
    });

  #l9.
    assert proof__uif__loop_invariant proof__uif__for_all {Index Lo_Index => 
        switch Lo_Index
          case (attribute__uif__first `X, _t2 - _t3) => proof__uif__for_all {Index Hi_Index => 
              switch Hi_Index
                case (attribute__uif__first `X, attribute__uif__last `X) => _t4 >= _t5
                default => true}
          default => true};

  #rwl6.
    _t6 := Result.Lo;

  #rwl7.
    _t7 := Result.Hi;

  #rwl8.
    _t8 := attribute__uif__first `X;

  #rwl9.
    _t9 := Result.Lo;

  #rwl10.
    _t10 := Result.Hi;

  #rwl11.
    _t11 := attribute__uif__last `X;

  #rwl12.
    _t12 := _t8 <= _t9;

  #rwl13.
    _t13 := _t10 <= _t11;

  #rwl14.
    _t14 := Max_Sum;

  #rwl15.
    _t15 := Sum (X, Result);

  #rwl16.
    _t16 := _t12 &&& _t13;

  #rwl17.
    _t17 := _t14 == _t15;

  #l10.
    assert proof__uif__loop_invariant 
        if _t6 <= _t7 then _t16 &&& _t17
    ;

  #l12.
    _tcomp2 := attribute__uif__first `X;

  #l13.
    _tcomp3 := attribute__uif__last `X;

  #rwl18.
    _t18 := _tcomp2;

  #rwl19.
    _t19 := _tcomp3;

  #l14.
    if _t18 > _t19 then goto l11;

  #l15.
    Hi := _tcomp2;

  #l16.
    // empty loc

  #rwl20.
    _t20 := Lo;

  #rwl21.
    _t21 := 1ii;

  #rwl22.
    _t22 := Max_Sum;

  #rwl23.
    _t23 := Sum (X, `Slice_Bounds {
      __positional0 = Lo_Index,
      __positional1 = Hi_Index
    });

  #rwl24.
    _t24 := Hi;

  #rwl25.
    _t25 := 1ii;

  #rwl26.
    _t26 := Max_Sum;

  #rwl27.
    _t27 := Sum (X, `Slice_Bounds {
      __positional0 = Lo,
      __positional1 = Hi_Index
    });

  #rwl28.
    _t28 := proof__uif__for_all {Index Lo_Index => 
        switch Lo_Index
          case (attribute__uif__first `X, _t20 - _t21) => proof__uif__for_all {Index Hi_Index => 
              switch Hi_Index
                case (attribute__uif__first `X, attribute__uif__last `X) => _t22 >= _t23
                default => true}
          default => true};

  #rwl29.
    _t29 := proof__uif__for_all {Index Hi_Index => 
        switch Hi_Index
          case (attribute__uif__first `X, _t24 - _t25) => _t26 >= _t27
          default => true};

  #l17.
    assert proof__uif__loop_invariant _t28 && _t29;

  #rwl30.
    _t30 := Result.Lo;

  #rwl31.
    _t31 := Result.Hi;

  #rwl32.
    _t32 := attribute__uif__first `X;

  #rwl33.
    _t33 := Result.Lo;

  #rwl34.
    _t34 := Result.Hi;

  #rwl35.
    _t35 := attribute__uif__last `X;

  #rwl36.
    _t36 := _t32 <= _t33;

  #rwl37.
    _t37 := _t34 <= _t35;

  #rwl38.
    _t38 := Max_Sum;

  #rwl39.
    _t39 := Sum (X, Result);

  #rwl40.
    _t40 := _t36 &&& _t37;

  #rwl41.
    _t41 := _t38 == _t39;

  #l18.
    assert proof__uif__loop_invariant 
        if _t30 <= _t31 then _t40 &&& _t41
    ;

  #l19.
    Current_Slice := `Slice_Bounds {
      __positional0 = Lo,
      __positional1 = Hi
    };

  #l20.
    call _tcomp4 := Sum (X, Current_Slice);

  #l21.
    Current_Sum := _tcomp4;

  #rwl42.
    _t42 := Current_Sum;

  #rwl43.
    _t43 := Max_Sum;

  #l23.
    if !(_t42 > _t43) then goto l22;

  #l24.
    Result := Current_Slice;

  #l25.
    Max_Sum := Current_Sum;

  #l22.
    // empty loc

  #rwl44.
    _t44 := Hi;

  #rwl45.
    _t45 := _tcomp3;

  #l26.
    if _t44 == _t45 then goto l11;

  #rwl46.
    _t46 := Hi;

  #rwl47.
    _t47 := 1ii;

  #l27.
    Hi := _t46 + _t47;

  #l28.
    goto l16;

  #l11.
    // empty loc

  #rwl48.
    _t48 := Lo;

  #rwl49.
    _t49 := _tcomp1;

  #l29.
    if _t48 == _t49 then goto l3;

  #rwl50.
    _t50 := Lo;

  #rwl51.
    _t51 := 1ii;

  #l30.
    Lo := _t50 + _t51;

  #l31.
    goto l8;

  #l3.
    // empty loc

  #l32.
    return Result;
}

procedure Slice_Bounds Maximal_Sum_Slice_Bounds_2 (
        Vector X) {
  local
    Natural Max_Sum;
    Integer Current_Sum;
    Index Current_Lo;
    Slice_Bounds Result;
    Index Current_Hi;
    Index _tcomp5;
    Index _tcomp6;
    FIXME _t52;
    FIXME _t53;
    FIXME _t54;
    FIXME _t55;
    FIXME _t56;
    FIXME _t57;
    FIXME _t58;
    FIXME _t59;
    FIXME _t60;
    FIXME _t61;
    FIXME _t62;
    FIXME _t63;
    FIXME _t64;
    FIXME _t65;
    FIXME _t66;
    FIXME _t67;
    FIXME _t68;
    FIXME _t69;
    FIXME _t70;
    FIXME _t71;
    FIXME _t72;
    FIXME _t73;
    FIXME _t74;
    FIXME _t75;
    FIXME _t76;
    FIXME _t77;
    FIXME _t78;
    FIXME _t79;
    FIXME _t80;
    FIXME _t81;
    FIXME _t82;
    FIXME _t83;
    FIXME _t84;
    FIXME _t85;
    FIXME _t86;
    FIXME _t87;
    FIXME _t88;
    FIXME _t89;
    FIXME _t90;
    FIXME _t91;
    FIXME _t92;
    FIXME _t93;
    FIXME _t94;
    FIXME _t95;
    FIXME _t96;
    FIXME _t97;
    FIXME _t98;
    FIXME _t99;
    FIXME _t100;
    FIXME _t101;
    FIXME _t102;
    FIXME _t103;
    FIXME _t104;
    FIXME _t105;
    FIXME _t106;
    FIXME _t107;
    FIXME _t108;
    FIXME _t109;
    FIXME _t110;
    FIXME _t111;
    FIXME _t112;
    FIXME _t113;
    FIXME _t114;
    FIXME _t115;
    FIXME _t116;
    FIXME _t117;
    FIXME _t118;
    FIXME _t119;


  #l33.
    Max_Sum := 0ii;

  #l34.
    Current_Sum := 0ii;

  #rwl52.
    _t52 := attribute__uif__first `X;

  #rwl53.
    _t53 := attribute__uif__last `X;

  #l37.
    if !(_t52 > _t53) then goto l36;

  #l38.
    Result := `Slice_Bounds {
      Lo = 1ii,
      Hi = 0ii
    };

  #l39.
    goto l35;

  #l36.
    // empty loc

  #l40.
    Result := `Slice_Bounds {
      Lo = attribute__uif__first `X,
      Hi = 0ii
    };

  #l41.
    Current_Lo := Result.Lo;

  #l43.
    _tcomp5 := attribute__uif__first `X;

  #l44.
    _tcomp6 := attribute__uif__last `X;

  #rwl54.
    _t54 := _tcomp5;

  #rwl55.
    _t55 := _tcomp6;

  #l45.
    if _t54 > _t55 then goto l42;

  #l46.
    Current_Hi := _tcomp5;

  #l47.
    // empty loc

  #rwl56.
    _t56 := attribute__uif__first `X;

  #rwl57.
    _t57 := Current_Lo;

  #rwl58.
    _t58 := Current_Lo;

  #rwl59.
    _t59 := Current_Hi;

  #rwl60.
    _t60 := _t56 <= _t57;

  #rwl61.
    _t61 := _t58 <= _t59;

  #rwl62.
    _t62 := 0ii;

  #rwl63.
    _t63 := Current_Sum;

  #rwl64.
    _t64 := _t60 &&& _t61;

  #rwl65.
    _t65 := _t62 <= _t63;

  #rwl66.
    _t66 := Current_Hi;

  #rwl67.
    _t67 := Current_Lo;

  #rwl68.
    _t68 := _t66 - _t67;

  #rwl69.
    _t69 := attribute__uif__last `Vector_Element;

  #rwl70.
    _t70 := Current_Sum;

  #rwl71.
    _t71 := _t68 * _t69;

  #rwl72.
    _t72 := _t64 &&& _t65;

  #rwl73.
    _t73 := _t70 <= _t71;

  #l48.
    assert proof__uif__loop_invariant _t72 &&& _t73;

  #rwl74.
    _t74 := Current_Hi;

  #rwl75.
    _t75 := 1ii;

  #rwl76.
    _t76 := Current_Sum;

  #rwl77.
    _t77 := Sum (X, `Slice_Bounds {
      __positional0 = Current_Lo,
      __positional1 = _t74 - _t75
    });

  #l49.
    assert proof__uif__loop_invariant _t76 == _t77;

  #rwl78.
    _t78 := Result.Lo;

  #rwl79.
    _t79 := Result.Hi;

  #rwl80.
    _t80 := attribute__uif__first `X;

  #rwl81.
    _t81 := Result.Lo;

  #rwl82.
    _t82 := Result.Hi;

  #rwl83.
    _t83 := attribute__uif__last `X;

  #rwl84.
    _t84 := _t80 <= _t81;

  #rwl85.
    _t85 := _t82 <= _t83;

  #rwl86.
    _t86 := Max_Sum;

  #rwl87.
    _t87 := Sum (X, Result);

  #rwl88.
    _t88 := _t84 &&& _t85;

  #rwl89.
    _t89 := _t86 == _t87;

  #l50.
    assert proof__uif__loop_invariant 
        if _t78 <= _t79 then _t88 &&& _t89
    ;

  #rwl90.
    _t90 := Current_Hi;

  #rwl91.
    _t91 := 1ii;

  #rwl92.
    _t92 := Current_Hi;

  #rwl93.
    _t93 := 1ii;

  #rwl94.
    _t94 := Max_Sum;

  #rwl95.
    _t95 := Sum (X, `Slice_Bounds {
      __positional0 = Lo_Index,
      __positional1 = Hi_Index
    });

  #l51.
    assert proof__uif__loop_invariant proof__uif__for_all {Index Lo_Index => 
        switch Lo_Index
          case (attribute__uif__first `X, _t90 - _t91) => proof__uif__for_all {Index Hi_Index => 
              switch Hi_Index
                case (attribute__uif__first `X, _t92 - _t93) => _t94 >= _t95
                default => true}
          default => true};

  #rwl96.
    _t96 := Current_Lo;

  #rwl97.
    _t97 := 1ii;

  #rwl98.
    _t98 := Current_Lo;

  #rwl99.
    _t99 := 1ii;

  #rwl100.
    _t100 := Sum (X, `Slice_Bounds {
      __positional0 = Lo_Index,
      __positional1 = _t98 - _t99
    });

  #rwl101.
    _t101 := 0ii;

  #l52.
    assert proof__uif__loop_invariant proof__uif__for_all {Index Lo_Index => 
        switch Lo_Index
          case (attribute__uif__first `X, _t96 - _t97) => _t100 <= _t101
          default => true};

  #rwl102.
    _t102 := Current_Hi;

  #rwl103.
    _t103 := 1ii;

  #rwl104.
    _t104 := Sum (X, `Slice_Bounds {
      __positional0 = Current_Lo,
      __positional1 = Hi_Index
    });

  #rwl105.
    _t105 := 0ii;

  #l53.
    assert proof__uif__loop_invariant proof__uif__for_all {Index Hi_Index => 
        switch Hi_Index
          case (Current_Lo, _t102 - _t103) => _t104 >= _t105
          default => true};

  #rwl106.
    _t106 := Current_Sum;

  #rwl107.
    _t107 := X[Current_Hi];

  #l54.
    Current_Sum := _t106 + _t107;

  #rwl108.
    _t108 := Current_Sum;

  #rwl109.
    _t109 := Max_Sum;

  #l57.
    if !(_t108 > _t109) then goto l56;

  #l58.
    Max_Sum := Current_Sum;

  #l59.
    Result.Lo := Current_Lo;

  #l60.
    Result.Hi := Current_Hi;

  #l61.
    goto l55;

  #l56.
    // empty loc

  #rwl110.
    _t110 := Current_Sum;

  #rwl111.
    _t111 := 0ii;

  #l63.
    if !(_t110 < _t111) then goto l62;

  #rwl112.
    _t112 := Current_Hi;

  #rwl113.
    _t113 := attribute__uif__last `Index;

  #l65.
    if !(_t112 != _t113) then goto l64;

  #rwl114.
    _t114 := Current_Hi;

  #rwl115.
    _t115 := 1ii;

  #l66.
    Current_Lo := _t114 + _t115;

  #l67.
    Current_Sum := 0ii;

  #l64.
    // empty loc

  #l68.
    goto l55;

  #l55.
    // empty loc

  #rwl116.
    _t116 := Current_Hi;

  #rwl117.
    _t117 := _tcomp6;

  #l69.
    if _t116 == _t117 then goto l42;

  #rwl118.
    _t118 := Current_Hi;

  #rwl119.
    _t119 := 1ii;

  #l70.
    Current_Hi := _t118 + _t119;

  #l71.
    goto l47;

  #l42.
    // empty loc

  #l35.
    // empty loc

  #l72.
    return Result;
}package Slice_Sums;


procedure Slice_Bounds Maximal_Sum_Slice_Bounds (
        Vector X) {

}

procedure Slice_Bounds Maximal_Sum_Slice_Bounds_2 (
        Vector X) {

}package Sums;


procedure Integer Sum (
        Vector X,
        Slice_Bounds Bounds) {
  local
    Integer Result;
    Index I;
    Index _tcomp7;
    Index _tcomp8;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;


  #l73.
    Result := 0ii;

  #l75.
    _tcomp7 := Bounds.Lo;

  #l76.
    _tcomp8 := Bounds.Hi;

  #rwl0.
    _t0 := _tcomp7;

  #rwl1.
    _t1 := _tcomp8;

  #l77.
    if _t0 > _t1 then goto l74;

  #l78.
    I := _tcomp7;

  #l79.
    // empty loc

  #rwl2.
    _t2 := Result;

  #rwl3.
    _t3 := X[I];

  #l80.
    Result := _t2 + _t3;

  #rwl4.
    _t4 := I;

  #rwl5.
    _t5 := _tcomp8;

  #l81.
    if _t4 == _t5 then goto l74;

  #rwl6.
    _t6 := I;

  #rwl7.
    _t7 := 1ii;

  #l82.
    I := _t6 + _t7;

  #l83.
    goto l79;

  #l74.
    // empty loc

  #l84.
    return Result;
}package Sums;


typealias Integer Extended_Index;

typealias Integer Index;

typealias Integer Vector_Element;

typealias _UNCONSTRAINED_ARRAY_ Vector;

record Slice_Bounds {

  Index Lo;

  Extended_Index Hi;
}

procedure Integer Sum (
        Vector X,
        Slice_Bounds Bounds) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;