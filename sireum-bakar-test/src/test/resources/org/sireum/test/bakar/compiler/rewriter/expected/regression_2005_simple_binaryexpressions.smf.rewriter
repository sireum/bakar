package BinaryExpressions;


procedure Integer X {

  #l0.
    return 1ii;
}

procedure Integer Add (
        Integer I,
        Integer J) {
  local
    Integer r0;
    Integer r1;
    Integer r2;
    Integer r3;
    Integer r4;
    Integer r5;
    Integer r6;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;


  #rwl0.
    _t0 := 1ii;

  #rwl1.
    _t1 := 2ii;

  #l1.
    r0 := _t0 + _t1;

  #rwl2.
    _t2 := I;

  #rwl3.
    _t3 := 1ii;

  #l2.
    r1 := _t2 + _t3;

  #rwl4.
    _t4 := I;

  #rwl5.
    _t5 := J;

  #l3.
    r2 := _t4 + _t5;

  #rwl6.
    _t6 := I;

  #rwl7.
    _t7 := I;

  #l4.
    r3 := _t6 + _t7;

  #rwl8.
    _t8 := J;

  #rwl9.
    _t9 := J;

  #l5.
    r4 := _t8 + _t9;

  #rwl10.
    _t10 := J;

  #rwl11.
    _t11 := I;

  #l6.
    r5 := _t10 + _t11;

  #rwl12.
    _t12 := J;

  #rwl13.
    _t13 := 1ii;

  #l7.
    r6 := _t12 + _t13;

  #rwl14.
    _t14 := r2;

  #rwl15.
    _t15 := r5;

  #l8.
    assert proof__uif__assert _t14 == _t15 "Assertion failed at [16, 5]";

  #l9.
    return r6;
}

procedure Integer Sub (
        Integer I,
        Integer J) {
  local
    Integer r0;
    Integer r1;
    Integer r2;
    Integer r3;
    Integer r4;
    Integer r5;
    Integer r6;
    FIXME _t16;
    FIXME _t17;
    FIXME _t18;
    FIXME _t19;
    FIXME _t20;
    FIXME _t21;
    FIXME _t22;
    FIXME _t23;
    FIXME _t24;
    FIXME _t25;
    FIXME _t26;
    FIXME _t27;
    FIXME _t28;
    FIXME _t29;


  #rwl16.
    _t16 := 1ii;

  #rwl17.
    _t17 := 2ii;

  #l10.
    r0 := _t16 - _t17;

  #rwl18.
    _t18 := I;

  #rwl19.
    _t19 := 1ii;

  #l11.
    r1 := _t18 - _t19;

  #rwl20.
    _t20 := I;

  #rwl21.
    _t21 := J;

  #l12.
    r2 := _t20 - _t21;

  #rwl22.
    _t22 := I;

  #rwl23.
    _t23 := I;

  #l13.
    r3 := _t22 - _t23;

  #rwl24.
    _t24 := J;

  #rwl25.
    _t25 := J;

  #l14.
    r4 := _t24 - _t25;

  #rwl26.
    _t26 := J;

  #rwl27.
    _t27 := I;

  #l15.
    r5 := _t26 - _t27;

  #rwl28.
    _t28 := J;

  #rwl29.
    _t29 := 1ii;

  #l16.
    r6 := _t28 - _t29;

  #l17.
    return r6;
}

procedure Integer Mult (
        Integer I,
        Integer J) {
  local
    Integer r0;
    Integer r1;
    Integer r2;
    Integer r3;
    Integer r4;
    Integer r5;
    Integer r6;
    FIXME _t30;
    FIXME _t31;
    FIXME _t32;
    FIXME _t33;
    FIXME _t34;
    FIXME _t35;
    FIXME _t36;
    FIXME _t37;
    FIXME _t38;
    FIXME _t39;
    FIXME _t40;
    FIXME _t41;
    FIXME _t42;
    FIXME _t43;
    FIXME _t44;
    FIXME _t45;


  #rwl30.
    _t30 := 1ii;

  #rwl31.
    _t31 := 2ii;

  #l18.
    r0 := _t30 * _t31;

  #rwl32.
    _t32 := I;

  #rwl33.
    _t33 := 1ii;

  #l19.
    r1 := _t32 * _t33;

  #rwl34.
    _t34 := I;

  #rwl35.
    _t35 := J;

  #l20.
    r2 := _t34 * _t35;

  #rwl36.
    _t36 := I;

  #rwl37.
    _t37 := I;

  #l21.
    r3 := _t36 * _t37;

  #rwl38.
    _t38 := J;

  #rwl39.
    _t39 := J;

  #l22.
    r4 := _t38 * _t39;

  #rwl40.
    _t40 := J;

  #rwl41.
    _t41 := I;

  #l23.
    r5 := _t40 * _t41;

  #rwl42.
    _t42 := J;

  #rwl43.
    _t43 := 1ii;

  #l24.
    r6 := _t42 * _t43;

  #rwl44.
    _t44 := r2;

  #rwl45.
    _t45 := r5;

  #l25.
    assert proof__uif__assert _t44 == _t45 "Assertion failed at [46, 5]";

  #l26.
    return r6;
}

procedure Integer Division (
        Integer I,
        Integer J) {
  local
    Integer r0;
    Integer r1;
    Integer r2;
    Integer r3;
    Integer r4;
    Integer r5;
    Integer r6;
    FIXME _t46;
    FIXME _t47;
    FIXME _t48;
    FIXME _t49;
    FIXME _t50;
    FIXME _t51;
    FIXME _t52;
    FIXME _t53;
    FIXME _t54;
    FIXME _t55;
    FIXME _t56;
    FIXME _t57;
    FIXME _t58;
    FIXME _t59;


  #rwl46.
    _t46 := 1ii;

  #rwl47.
    _t47 := 2ii;

  #l27.
    r0 := _t46 / _t47;

  #rwl48.
    _t48 := I;

  #rwl49.
    _t49 := 1ii;

  #l28.
    r1 := _t48 / _t49;

  #rwl50.
    _t50 := I;

  #rwl51.
    _t51 := I;

  #l29.
    r2 := _t50 / _t51;

  #rwl52.
    _t52 := I;

  #rwl53.
    _t53 := J;

  #l30.
    r3 := _t52 / _t53;

  #rwl54.
    _t54 := J;

  #rwl55.
    _t55 := I;

  #l31.
    r4 := _t54 / _t55;

  #rwl56.
    _t56 := J;

  #rwl57.
    _t57 := J;

  #l32.
    r5 := _t56 / _t57;

  #rwl58.
    _t58 := J;

  #rwl59.
    _t59 := 1ii;

  #l33.
    r6 := _t58 / _t59;

  #l34.
    return r6;
}package BinaryExpressions;


procedure Integer X {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;