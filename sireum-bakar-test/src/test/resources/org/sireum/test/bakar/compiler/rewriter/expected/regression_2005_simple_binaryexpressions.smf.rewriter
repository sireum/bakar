package BinaryExpressions;


procedure Integer X {

  #l0.
    return 1ii;
}

procedure Integer Add (
        Integer I,
        Integer J) {
  local
    Integer r0;
    Integer r1;
    Integer r2;
    Integer r3;
    Integer r4;
    Integer r5;
    Integer r6;


  #l1.
    r0 := 1ii + 2ii;

  #l2.
    r1 := I + 1ii;

  #l3.
    r2 := I + J;

  #l4.
    r3 := I + I;

  #l5.
    r4 := J + J;

  #l6.
    r5 := J + I;

  #l7.
    r6 := J + 1ii;

  #l8.
    assert (proof__uif__assert r2 == r5, "Assertion failed at [16, 5]");

  #l9.
    return r6;
}

procedure Integer Sub (
        Integer I,
        Integer J) {
  local
    Integer r0;
    Integer r1;
    Integer r2;
    Integer r3;
    Integer r4;
    Integer r5;
    Integer r6;


  #l10.
    r0 := 1ii - 2ii;

  #l11.
    r1 := I - 1ii;

  #l12.
    r2 := I - J;

  #l13.
    r3 := I - I;

  #l14.
    r4 := J - J;

  #l15.
    r5 := J - I;

  #l16.
    r6 := J - 1ii;

  #l17.
    return r6;
}

procedure Integer Mult (
        Integer I,
        Integer J) {
  local
    Integer r0;
    Integer r1;
    Integer r2;
    Integer r3;
    Integer r4;
    Integer r5;
    Integer r6;


  #l18.
    r0 := 1ii * 2ii;

  #l19.
    r1 := I * 1ii;

  #l20.
    r2 := I * J;

  #l21.
    r3 := I * I;

  #l22.
    r4 := J * J;

  #l23.
    r5 := J * I;

  #l24.
    r6 := J * 1ii;

  #l25.
    assert (proof__uif__assert r2 == r5, "Assertion failed at [46, 5]");

  #l26.
    return r6;
}

procedure Integer Division (
        Integer I,
        Integer J) {
  local
    Integer r0;
    Integer r1;
    Integer r2;
    Integer r3;
    Integer r4;
    Integer r5;
    Integer r6;


  #l27.
    r0 := 1ii / 2ii;

  #l28.
    r1 := I / 1ii;

  #l29.
    r2 := I / I;

  #l30.
    r3 := I / J;

  #l31.
    r4 := J / I;

  #l32.
    r5 := J / J;

  #l33.
    r6 := J / 1ii;

  #l34.
    return r6;
}package BinaryExpressions;


procedure Integer X {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;