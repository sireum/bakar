package Labeled_Statements;


procedure P (
        Integer I,
        Integer J,
        Boolean Ret) {

  #l2.
    if !(I > J) then goto l1;

  #l3.
    Ret := true;

  #l4.
    goto l0;

  #l1.
    // empty loc

  #l5.
    Ret := false;

  #l0.
    // empty loc

  #l6.
    return (Ret);
}

procedure Integer Stupid (
        Index_Range Z) {
  local
    Integer J;
    Boolean B;
    Index_Range I;
    Index_Range _tcomp0;
    Index_Range _tcomp1;


  #l8.
    _tcomp0 := attribute__uif__first `Index_Range;

  #l9.
    _tcomp1 := attribute__uif__last `Index_Range;

  #l10.
    if _tcomp0 > _tcomp1 then goto l7;

  #l11.
    I := _tcomp0;

  #l12.
    // empty loc

  #l13.
    J := 0ii;

  #l15.
    // empty loc

  #l16.
    if !(J < Z) then goto l14;

  #l17.
    J := J + 1ii;

  #l18.
    call P (I, J, B);

  #l20.
    if !(B) then goto l19;

  #l21.
    goto l14;

  #l19.
    // empty loc

  #l24.
    if !(J == 3ii) then goto l23;

  #l25.
    J := J + 1ii;

  #l26.
    goto l22;

  #l23.
    // empty loc

  #l28.
    J := J;

  #l22.
    // empty loc

  #l29.
    goto l15;

  #l14.
    // empty loc

  #l30.
    if I == _tcomp1 then goto l7;

  #l31.
    I := I + 1ii;

  #l32.
    goto l12;

  #l7.
    // empty loc

  #l33.
    return J;
}package Labeled_Statements;


typealias Integer Index_Range;

procedure Integer Stupid (
        Index_Range Z) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;