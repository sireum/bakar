package __anonymousPackage$0;


procedure Harness (
        Integer X,
        Integer Y,
        Integer Z) {
  local
    Ring_Buffer R;
    Integer H;


  #l1.
    call Clear (R);

  #l2.
    call Push (R, X);

  #l3.
    call Push (R, Y);

  #l4.
    call Pop (R, H);

  #l5.
    assert H == X;

  #l6.
    call Push (R, Z);

  #l7.
    call Pop (R, H);

  #l8.
    assert H == Y;

  #l9.
    call Pop (R, H);

  #l10.
    assert H == Z;

  #l11.
    return;
}package Ring_Buf;


procedure Clear (
        Ring_Buffer R) {

  #l12.
    R.Length := 0ii;

  #l13.
    R.First := 0ii;

  #l14.
    R.Data := `Buf_Array { iter => 
        switch iter
          default => 0ii};

  #l15.
    return (R);
}

procedure Push (
        Ring_Buffer R,
        Integer X) {

  #l16.
    R.Data[R.First + R.Length MOD Buf_Size] := X;

  #l17.
    R.Length := R.Length + 1ii;

  #l18.
    return (R);
}

procedure Pop (
        Ring_Buffer R,
        Integer Element) {

  #l19.
    Element := R.Data[R.First];

  #l20.
    R.First := R.First + 1ii MOD Buf_Size;

  #l21.
    R.Length := R.Length - 1ii;

  #l22.
    return (R, Element);
}package Ring_Buf;


typealias Integer Ar_Index;

typealias Integer Length_Type;

typealias _ARRAY_ Buf_Array;

record Ring_Buffer {

  Buf_Array Data;

  Ar_Index First;

  Length_Type Length;
}

const $CONST {
  Buf_Size = (Integer) 10000ii;
}

procedure Boolean Is_Full (
        Ring_Buffer R) {

  #l23.
    return R.Length == Buf_Size;
}

procedure Boolean Is_Empty (
        Ring_Buffer R) {

  #l24.
    return R.Length == 0ii;
}

procedure Clear (
        Ring_Buffer R) {

}

procedure Integer Head (
        Ring_Buffer R) {

  #l25.
    return R.Data[R.First];
}

procedure Push (
        Ring_Buffer R,
        Integer X) {

}

procedure Pop (
        Ring_Buffer R,
        Integer Element) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;