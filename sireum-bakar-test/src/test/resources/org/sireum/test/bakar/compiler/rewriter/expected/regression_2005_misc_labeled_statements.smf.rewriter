package Labeled_Statements;


procedure P (
        Integer I,
        Integer J,
        Boolean Ret) {
  local
    FIXME _t0;
    FIXME _t1;


  #rwl0.
    _t0 := I;

  #rwl1.
    _t1 := J;

  #l2.
    if !(_t0 > _t1) then goto l1;

  #l3.
    Ret := true;

  #l4.
    goto l0;

  #l1.
    // empty loc

  #l5.
    Ret := false;

  #l0.
    // empty loc

  #l6.
    return;
}

procedure Integer Stupid (
        Index_Range Z) {
  local
    Integer J;
    Boolean B;
    Index_Range I;
    Index_Range _tcomp0;
    Index_Range _tcomp1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;


  #l8.
    _tcomp0 := attribute__uif__first `Index_Range;

  #l9.
    _tcomp1 := attribute__uif__last `Index_Range;

  #rwl2.
    _t2 := _tcomp0;

  #rwl3.
    _t3 := _tcomp1;

  #l10.
    if _t2 > _t3 then goto l7;

  #l11.
    I := _tcomp0;

  #l12.
    // empty loc

  #l13.
    J := 0ii;

  #l15.
    // empty loc

  #rwl4.
    _t4 := J;

  #rwl5.
    _t5 := Z;

  #l16.
    if !(_t4 < _t5) then goto l14;

  #rwl6.
    _t6 := J;

  #rwl7.
    _t7 := 1ii;

  #l17.
    J := _t6 + _t7;

  #l18.
    call P (I, J, B);

  #l20.
    if !(B) then goto l19;

  #l21.
    goto l14;

  #l19.
    // empty loc

  #rwl8.
    _t8 := J;

  #rwl9.
    _t9 := 3ii;

  #l24.
    if !(_t8 == _t9) then goto l23;

  #rwl10.
    _t10 := J;

  #rwl11.
    _t11 := 1ii;

  #l25.
    J := _t10 + _t11;

  #l26.
    goto l22;

  #l23.
    // empty loc

  #l28.
    J := J;

  #l22.
    // empty loc

  #l29.
    goto l15;

  #l14.
    // empty loc

  #rwl12.
    _t12 := I;

  #rwl13.
    _t13 := _tcomp1;

  #l30.
    if _t12 == _t13 then goto l7;

  #rwl14.
    _t14 := I;

  #rwl15.
    _t15 := 1ii;

  #l31.
    I := _t14 + _t15;

  #l32.
    goto l12;

  #l7.
    // empty loc

  #l33.
    return J;
}package Labeled_Statements;


typealias Integer Index_Range;

procedure Integer Stupid (
        Index_Range Z) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;