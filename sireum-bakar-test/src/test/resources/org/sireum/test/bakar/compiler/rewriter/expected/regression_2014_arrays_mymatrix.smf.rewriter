package MyMatrix;


procedure Multiply (
        Matrix X,
        Matrix Y,
        Matrix Z) {
  local
    Matrix_Index I;
    Matrix_Index _tcomp0;
    Matrix_Index _tcomp1;
    Matrix_Index J;
    Matrix_Index _tcomp2;
    Matrix_Index _tcomp3;
    Matrix_Index K;
    Matrix_Index _tcomp4;
    Matrix_Index _tcomp5;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;
    FIXME _t16;
    FIXME _t17;
    FIXME _t18;
    FIXME _t19;
    FIXME _t20;
    FIXME _t21;


  #l1.
    Z := `Matrix { iter => 
        switch iter
          case (attribute__uif__first `Matrix_Index, attribute__uif__last `Matrix_Index) => { iter => 
              switch iter
                case (attribute__uif__first `Matrix_Index, attribute__uif__last `Matrix_Index) => 0ii
                default => 0ii}
          default => { iter => 
              switch iter
                default => 0ii}};

  #l3.
    _tcomp0 := attribute__uif__first `Matrix_Index;

  #l4.
    _tcomp1 := attribute__uif__last `Matrix_Index;

  #rwl0.
    _t0 := _tcomp0;

  #rwl1.
    _t1 := _tcomp1;

  #l5.
    if _t0 > _t1 then goto l2;

  #l6.
    I := _tcomp0;

  #l7.
    // empty loc

  #l9.
    _tcomp2 := attribute__uif__first `Matrix_Index;

  #l10.
    _tcomp3 := attribute__uif__last `Matrix_Index;

  #rwl2.
    _t2 := _tcomp2;

  #rwl3.
    _t3 := _tcomp3;

  #l11.
    if _t2 > _t3 then goto l8;

  #l12.
    J := _tcomp2;

  #l13.
    // empty loc

  #l15.
    _tcomp4 := attribute__uif__first `Matrix_Index;

  #l16.
    _tcomp5 := attribute__uif__last `Matrix_Index;

  #rwl4.
    _t4 := _tcomp4;

  #rwl5.
    _t5 := _tcomp5;

  #l17.
    if _t4 > _t5 then goto l14;

  #l18.
    K := _tcomp4;

  #l19.
    // empty loc

  #rwl6.
    _t6 := X[I, K];

  #rwl7.
    _t7 := Y[K, J];

  #rwl8.
    _t8 := Z[I, J];

  #rwl9.
    _t9 := _t6 * _t7;

  #l20.
    Z[I, J] := _t8 + _t9;

  #rwl10.
    _t10 := K;

  #rwl11.
    _t11 := _tcomp5;

  #l21.
    if _t10 == _t11 then goto l14;

  #rwl12.
    _t12 := K;

  #rwl13.
    _t13 := 1ii;

  #l22.
    K := _t12 + _t13;

  #l23.
    goto l19;

  #l14.
    // empty loc

  #rwl14.
    _t14 := J;

  #rwl15.
    _t15 := _tcomp3;

  #l24.
    if _t14 == _t15 then goto l8;

  #rwl16.
    _t16 := J;

  #rwl17.
    _t17 := 1ii;

  #l25.
    J := _t16 + _t17;

  #l26.
    goto l13;

  #l8.
    // empty loc

  #rwl18.
    _t18 := I;

  #rwl19.
    _t19 := _tcomp1;

  #l27.
    if _t18 == _t19 then goto l2;

  #rwl20.
    _t20 := I;

  #rwl21.
    _t21 := 1ii;

  #l28.
    I := _t20 + _t21;

  #l29.
    goto l7;

  #l2.
    // empty loc

  #l30.
    return;
}package MyMatrix;


typealias _PRIVATE_TYPE_DECLARATION_ Matrix_Index;

typealias _PRIVATE_TYPE_DECLARATION_ Matrix;

typealias _SIGNED_INTEGER_TYPE_ Matrix_Index;

typealias _ARRAY_ Matrix;

procedure Multiply (
        Matrix X,
        Matrix Y,
        Matrix Z) {

}package Standard;


typealias Boolean standard::boolean;

typealias Integer standard::integer;

typealias Integer standard::natural;

typealias Integer standard::positive;

typealias Float standard::float;

typealias Integer universal_integer;

typealias Float universal_real;