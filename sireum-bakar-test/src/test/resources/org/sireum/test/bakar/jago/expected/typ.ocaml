type astnum = int

type idnum = int

type procnum = int

type typenum = int

type typedeclnum = astnum

type aspectnum = int

type typeuri = string

type type_table = {
    tt_exptype_table: (astnum * typenum) list;
    tt_typename_table: (typenum * (typeuri * typedeclnum option)) list
}

type literal = 
	| Integer_Literal of int
	| Boolean_Literal of bool

type unary_operator = 
	| Not 
	| Unary_Minus 
	| Unary_Plus 

type binary_operator = 
	| And 
	| Divide 
	| Equal 
	| Greater_Than 
	| Greater_Than_Or_Equal 
	| Less_Than 
	| Less_Than_Or_Equal 
	| Minus 
	| Multiply 
	| Not_Equal 
	| Or 
	| Plus 

type type = 
    | Boolean
    | Integer

type expression = 
	| E_Literal of astnum * literal
	| E_Identifier of astnum * idnum
	| E_Binary_Operation of astnum * binary_operator * expression * expression
	| E_Unary_Operation of astnum * unary_operator * expression

type statement = 
	| S_Assignment of astnum * idnum * expression
	| S_If of astnum * expression * statement
	| S_While_Loop of astnum * expression * statement
	| S_Sequence of astnum * statement * statement
	| S_Return of astnum * (expression) option
	| S_Assert of astnum * expression
	| S_Loop_Invariant of astnum * expression

type mode = 
    | In
    | Out
    | In_Out

(* variables declarations in procedure/function *)
type object_declaration = {
	declaration_astnum: astnum;
	object_name: idnum;
	object_nominal_subtype: typenum;
	initialization_expression: (expression) option 
}

type parameter_specification = {
	parameter_astnum: astnum;
	parameter_name: idnum;
	parameter_subtype_mark: typenum;
	parameter_mode: mode;
	parameter_default_expression: (expression) option 
}

type aspect_specification = {
	aspect_astnum: astnum;
	aspect_mark: aspectnum;
	aspect_definition: expression 
}

type procedure_body = {
	procedure_astnum: astnum;
	procedure_name: procnum;
	procedure_contracts: aspect_specification list;
	procedure_parameter_profile: parameter_specification list;
	procedure_declarative_part: object_declaration list;
	procedure_statements: statement 
}

type function_body = {
	function_astnum: astnum;
	function_name: procnum;
	function_result_subtype: type;
	function_contracts: aspect_specification list;
	function_parameter_profile: parameter_specification list;
	function_declarative_part: object_declaration list;
	function_statements: statement 
}

type subprogram = 
	| Procedure of astnum * procedure_body
	| Function of astnum * function_body

type library_unit_declaration = 
	| Library_Subprogram of astnum * subprogram

type compilation_unit = 
	| Library_Unit of astnum * library_unit_declaration * type_table