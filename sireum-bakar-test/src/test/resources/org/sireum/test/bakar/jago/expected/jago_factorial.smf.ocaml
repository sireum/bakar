(* Compilation Unit *)
Library_Unit ( 1,
  (* Compilation Unit - Unit Declaration *)
  Library_Subprogram( 2,
    (* Function Body Declaration *)
    Function( 3,
      {
        function_astnum =   
          (* Function Body - AST Number *)
          4; 
        function_name =
          (* Function Body - Name *)
           (*Factorial*) 1;
        function_result_subtype = 
          (* Function Body - Return Type *)
          Integer;
        function_contracts = 
          (* Function Body - Specification *)
          [];
        function_parameter_profile = 
          (* Function Body - Parameters *)
          [
          { parameter_astnum = 5; parameter_name =  (*N*) 1; parameter_subtype_mark = 1; parameter_mode = In; parameter_default_expression = None }];
        function_declarative_part = 
          (* Function Body - Locally Defined Variables *)
          [
          { declaration_astnum = 6; object_name =  (*Result*) 2; object_nominal_subtype = 1; initialization_expression = (Some (E_Literal (7, Integer_Literal 1))) }; 
          { declaration_astnum = 8; object_name =  (*T*) 3; object_nominal_subtype = 1; initialization_expression = None }];
        function_statements = 
          (* Function Body - Statements *)
          S_Sequence (9,
            S_Assignment (10,  (*T*) 3, E_Identifier (11,  (*N*) 1)),
            S_Sequence (12,
              S_While_Loop (13, E_Binary_Operation (14, Greater_Than, E_Identifier (15,  (*T*) 3), E_Literal (16, Integer_Literal 0)),
                S_Sequence (17,
                  S_Assignment (18,  (*Result*) 2, E_Binary_Operation (19, Multiply, E_Identifier (20,  (*Result*) 2), E_Identifier (21,  (*T*) 3))),
                  S_Assignment (22,  (*T*) 3, E_Binary_Operation (23, Minus, E_Identifier (24,  (*T*) 3), E_Literal (25, Integer_Literal 1))) )
              ),
              S_Return (26, (Some (E_Identifier (27,  (*Result*) 2)))) ) )
      }
    )
  ),  
  (* Compilation Unit - Type Table *)
  {
    tt_exptype_table = 
      (* Expression AstNum --> TypeNum *) 
      [
        (7, 2) ;
        (11, 1) ;
        (14, 3) ;
        (15, 1) ;
        (16, 2) ;
        (19, 1) ;
        (20, 1) ;
        (21, 1) ;
        (23, 1) ;
        (24, 1) ;
        (25, 2) ;
        (27, 1)
      ];
    tt_typename_table = 
      (* TypeNum --> (Type URI * (Type Declaration AST Num) Option) *) 
      [
        (1, ("ada://ordinary_type/Standard-1:1/Integer-1:1", None)) ;
        (2, ("universal_integer", None)) ;
        (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1", None))
      ]
  }
)