(* Compilation Unit *)
Library_Unit 1
  (* Compilation Unit - Unit Declaration *) (
    Library_Subprogram 2 (
      (* Function Body Declaration *)
      Function 3 (
        mkfunction_body 4
          (* Function Body - Name *)
          (*Linear_Div_Fn*) 1
          (* Function Body - Return Type *) 
          (Integer) 
          (* Function Body - Specification *)
          (nil)
          (* Function Body - Parameters *)
          (
          mkparameter_specification 5 (*Dividend*) 1 (1) (In) None :: 
          mkparameter_specification 6 (*Divisor*) 2 (1) (In) None :: nil)
          (* Function Body - Local Defined Variables *)
          (
          mkobject_declaration 7 (*Quotient*) 3 1 (Some (E_Literal 8 (Integer_Literal 0))) :: 
          mkobject_declaration 9 (*Remainder*) 4 1 None :: nil)
          (* Function Body - Statements *) (
            S_Sequence 10 (
              S_Assignment 11 ((*Remainder*) 4) (E_Identifier 12 (*Dividend*) 1) ) ( 
              S_Sequence 13 (
                S_While_Loop 14 (E_Binary_Operation 15 Greater_Than_Or_Equal (E_Identifier 16 (*Remainder*) 4) (E_Identifier 17 (*Divisor*) 2)) (
                    S_Sequence 18 (
                      S_Loop_Invariant 19 (E_Binary_Operation 20 And (E_Binary_Operation 21 And (E_Binary_Operation 22 Greater_Than_Or_Equal (E_Identifier 23 (*Remainder*) 4) (E_Literal 24 (Integer_Literal 0))) (E_Binary_Operation 25 Greater_Than_Or_Equal (E_Identifier 26 (*Quotient*) 3) (E_Literal 27 (Integer_Literal 0)))) (E_Binary_Operation 28 Equal (E_Binary_Operation 29 Plus (E_Binary_Operation 30 Multiply (E_Identifier 31 (*Divisor*) 2) (E_Identifier 32 (*Quotient*) 3)) (E_Identifier 33 (*Remainder*) 4)) (E_Identifier 34 (*Dividend*) 1))) ) ( 
                      S_Sequence 35 (
                        S_Assignment 36 ((*Quotient*) 3) (E_Binary_Operation 37 Plus (E_Identifier 38 (*Quotient*) 3) (E_Literal 39 (Integer_Literal 1))) ) ( 
                        S_Sequence 40 (
                          S_Assignment 41 ((*Quotient*) 3) (E_Binary_Operation 42 Plus (E_Identifier 43 (*Quotient*) 3) (E_Literal 44 (Integer_Literal 1))) ) ( 
                          S_Assignment 45 ((*Remainder*) 4) (E_Binary_Operation 46 Minus (E_Identifier 47 (*Remainder*) 4) (E_Identifier 48 (*Divisor*) 2)) ) ) )
                  ) ) ( 
                S_Return 49 (Some (E_Identifier 50 (*Remainder*) 4)) ) )
          )
      )
    )
  )
  (* Compilation Unit - Type Table *) (
    mktype_table (
      (* Expression Type Table: Expression AstNum --> TypeNum *)
      (8, 2) ::
      (12, 1) ::
      (15, 3) ::
      (16, 1) ::
      (17, 1) ::
      (20, 3) ::
      (21, 3) ::
      (22, 3) ::
      (23, 1) ::
      (24, 2) ::
      (25, 3) ::
      (26, 1) ::
      (27, 2) ::
      (28, 3) ::
      (29, 1) ::
      (30, 1) ::
      (31, 1) ::
      (32, 1) ::
      (33, 1) ::
      (34, 1) ::
      (37, 1) ::
      (38, 1) ::
      (39, 2) ::
      (42, 1) ::
      (43, 1) ::
      (44, 2) ::
      (46, 1) ::
      (47, 1) ::
      (48, 1) ::
      (50, 1) :: nil
    ) (
      (* Type Name Table: TypeNum --> (Type URI * Option(Type Declaration AST Num)) *)
      (1, ("ada://ordinary_type/Standard-1:1/Integer-1:1"%string, None)) ::
      (2, ("universal_integer"%string, None)) ::
      (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1"%string, None)) :: nil
    )
  )