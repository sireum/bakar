package __anonymousPackage$0;


procedure Natural LCP (
        Text A,
        Integer X,
        Integer Y) {
  local
    Natural L;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;
    FIXME _t4;
    FIXME _t5;
    FIXME _t6;
    FIXME _t7;
    FIXME _t8;
    FIXME _t9;
    FIXME _t10;
    FIXME _t11;
    FIXME _t12;
    FIXME _t13;
    FIXME _t14;
    FIXME _t15;
    FIXME _t16;
    FIXME _t17;
    FIXME _t18;
    FIXME _t19;
    FIXME _t20;
    FIXME _t21;
    FIXME _t22;
    FIXME _t23;
    FIXME _t24;
    FIXME _t25;
    FIXME _t26;
    FIXME _t27;


  #l1.
    L := 0ii;

  #l3.
    // empty loc

  #rwl0.
    _t0 := X;

  #rwl1.
    _t1 := L;

  #rwl2.
    _t2 := _t0 + _t1;

  #rwl3.
    _t3 := attribute__uif__last `A;

  #rwl4.
    _t4 := Y;

  #rwl5.
    _t5 := L;

  #rwl6.
    _t6 := _t4 + _t5;

  #rwl7.
    _t7 := attribute__uif__last `A;

  #rwl8.
    _t8 := _t2 <= _t3;

  #rwl9.
    _t9 := _t6 <= _t7;

  #rwl10.
    _t10 := X;

  #rwl11.
    _t11 := L;

  #rwl12.
    _t12 := Y;

  #rwl13.
    _t13 := L;

  #rwl14.
    _t14 := A[_t10 + _t11];

  #rwl15.
    _t15 := A[_t12 + _t13];

  #rwl16.
    _t16 := _t8 &&& _t9;

  #rwl17.
    _t17 := _t14 == _t15;

  #l4.
    if !(_t16 &&& _t17) then goto l2;

  #rwl18.
    _t18 := L;

  #rwl19.
    _t19 := 1ii;

  #rwl20.
    _t20 := X;

  #rwl21.
    _t21 := K;

  #rwl22.
    _t22 := Y;

  #rwl23.
    _t23 := K;

  #rwl24.
    _t24 := A[_t20 + _t21];

  #rwl25.
    _t25 := A[_t22 + _t23];

  #l5.
    assert proof__uif__loop_invariant proof__uif__for_all {universal_integer K => 
        switch K
          case (0ii, _t18 - _t19) => _t24 == _t25
          default => true};

  #l6.
    assert proof__uif__loop_variant { increases => L};

  #rwl26.
    _t26 := L;

  #rwl27.
    _t27 := 1ii;

  #l7.
    L := _t26 + _t27;

  #l8.
    goto l3;

  #l2.
    // empty loc

  #l9.
    return L;
}package __anonymousPackage$1;


procedure Natural LCP (
        Text A,
        Integer X,
        Integer Y) {

}package __anonymousPackage$2;


procedure Main {
  local
    Text A;
    FIXME _t0;
    FIXME _t1;
    FIXME _t2;
    FIXME _t3;


  #l10.
    A := { iter => 
        switch iter
          case __positional0 => 1ii
          case __positional1 => 2ii
          case __positional2 => 3ii
          case __positional3 => 4ii
          case __positional4 => 5ii
          case __positional5 => 1ii
          case __positional6 => 2ii
          case __positional7 => 3ii
          case __positional8 => 4ii
          case __positional9 => 5ii
    };

  #l11.
    call Put_Line ("\"LCP returns non-null\"");

  #rwl0.
    _t0 := LCP (A, 1ii, 6ii);

  #rwl1.
    _t1 := 5ii;

  #l12.
    assert _t0 == _t1;

  #l13.
    call Put_Line ("\"LCP returns null\"");

  #rwl2.
    _t2 := LCP (A, 1ii, 7ii);

  #rwl3.
    _t3 := 0ii;

  #l14.
    assert _t2 == _t3;

  #l15.
    return;
}package Types;


typealias Positive Index;

typealias _UNCONSTRAINED_ARRAY_ Text;package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;