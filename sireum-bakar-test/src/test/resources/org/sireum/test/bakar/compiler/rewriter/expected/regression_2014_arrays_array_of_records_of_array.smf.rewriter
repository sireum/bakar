package Array_Of_Records_Of_Array;


procedure $$binit {

  #l0.
    @@oArray := `ObjectArray {Index_Range iter => 
        switch iter
          default => dummyObject};

  #l6.
    return;
}

procedure Swap (
        ObjectArray Q,
        Index_Range theIndex) {
  local
    IntArray temp1;
    IntArray temp2;
    Object _t0;
    Object _t1;
    Object _t2;
    Object _t3;


  #l1.
    _t0 := Q[theIndex];

  #rwl0.
    temp1 := _t0.X;

  #l2.
    _t1 := Q[theIndex];

  #rwl1.
    temp2 := _t1.Y;

  #l3.
    _t2 := Q[theIndex];

  #rwl2.
    _t2.X := temp2;

  #rwl3.
    Q[theIndex] := _t2;

  #l4.
    _t3 := Q[theIndex];

  #rwl4.
    _t3.Y := temp1;

  #rwl5.
    Q[theIndex] := _t3;

  #l5.
    return;
}package Array_Of_Records_Of_Array;


typealias _SIGNED_INTEGER_TYPE_ Index_Range;

typealias _ARRAY_ IntArray;

record Object {

  IntArray X;

  IntArray Y;
}

typealias _ARRAY_ ObjectArray;

const $CONST {
  dummyObject = (Object) `Object {
    X = `IntArray {Index_Range iter => 
        switch iter
          default => 0ii},
    Y = `IntArray {Index_Range iter => 
        switch iter
          default => 0ii}
  };
}

global ObjectArray @@oArray;

procedure Swap (
        ObjectArray Q,
        Index_Range theIndex) {

}package Standard;


typealias Boolean Boolean;

typealias Integer Integer;

typealias Integer Natural;

typealias Integer Positive;

typealias Float Float;

typealias universal_integer universal_integer;

typealias universal_real universal_real;

typealias Character Character;

typealias String String;