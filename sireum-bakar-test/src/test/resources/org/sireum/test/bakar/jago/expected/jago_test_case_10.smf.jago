Definition Coq_AST_Tree_XX := 
(D_Procedure_Body_XX 1 
  (mkprocedure_body_xx 2
    (* = = = Procedure Name = = = *)
    ((*Test_Case_10*) 1)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_xx 3 ((*I1*) 1) Integer In) :: 
    (mkparameter_specification_xx 4 ((*I2*) 2) Integer In) :: 
    (mkparameter_specification_xx 5 ((*I3*) 3) Integer In) :: 
    (mkparameter_specification_xx 6 ((*O1*) 4) Integer Out) :: 
    (mkparameter_specification_xx 7 ((*O2*) 5) Integer Out) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 8
  (D_Object_Declaration_XX 9 (mkobject_declaration_xx 10 ((*L1*) 6) Integer None)) 
  (D_Object_Declaration_XX 11 (mkobject_declaration_xx 12 ((*L2*) 7) Integer None))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 13
      (S_Assignment_XX 14 (E_Identifier_XX 15 ((*L2*) 7) (**(nil)**)) (E_Literal_XX 16 (Integer_Literal 5) (**(nil)**))) 
      (S_Sequence_XX 17
      (S_Assignment_XX 18 (E_Identifier_XX 19 ((*L1*) 6) (**(nil)**)) (E_Name_XX 20 (E_Identifier_XX 21 ((*I3*) 3) (**(nil)**)) (**(nil)**))) 
      (S_Sequence_XX 22
      (S_Assignment_XX 23 (E_Identifier_XX 24 ((*O2*) 5) (**(nil)**)) (E_Name_XX 25 (E_Identifier_XX 26 ((*L1*) 6) (**(nil)**)) (**(nil)**))) 
      (S_Sequence_XX 27
      (S_Assignment_XX 28 (E_Identifier_XX 29 ((*L1*) 6) (**(nil)**)) (E_Name_XX 30 (E_Identifier_XX 31 ((*I2*) 2) (**(nil)**)) (**(nil)**))) 
      (S_Sequence_XX 32
      (S_Assignment_XX 33 (E_Identifier_XX 34 ((*L1*) 6) (**(nil)**)) (E_Binary_Operation_XX 35 Plus (E_Name_XX 36 (E_Identifier_XX 37 ((*I1*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 38 (E_Identifier_XX 39 ((*I2*) 2) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**))) 
      (S_Sequence_XX 40
      (S_If_XX 41 (E_Binary_Operation_XX 42 Greater_Than (E_Name_XX 43 (E_Identifier_XX 44 ((*L1*) 6) (**(nil)**)) (**(nil)**)) (E_Literal_XX 45 (Integer_Literal 5) (**(nil)**)) (**(nil)**))
        (S_If_XX 46 (E_Binary_Operation_XX 47 Less_Than (E_Name_XX 48 (E_Identifier_XX 49 ((*I1*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 50 (Integer_Literal 0) (**(nil)**)) (**(nil)**))
          (S_Assignment_XX 51 (E_Identifier_XX 52 ((*L2*) 7) (**(nil)**)) (E_Literal_XX 53 (Integer_Literal 8) (**(nil)**)))
          S_Null_XX
        )
        S_Null_XX
      ) 
      (S_Assignment_XX 54 (E_Identifier_XX 55 ((*O1*) 4) (**(nil)**)) (E_Name_XX 56 (E_Identifier_XX 57 ((*L2*) 7) (**(nil)**)) (**(nil)**)))))))))
  )
).

Definition Symbol_Table_XX := 
(mkSymbolTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Test_Case_10*) 1), (0, (mkprocedure_body_xx 2
  (* = = = Procedure Name = = = *)
  ((*Test_Case_10*) 1)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_xx 3 ((*I1*) 1) Integer In) :: 
  (mkparameter_specification_xx 4 ((*I2*) 2) Integer In) :: 
  (mkparameter_specification_xx 5 ((*I3*) 3) Integer In) :: 
  (mkparameter_specification_xx 6 ((*O1*) 4) Integer Out) :: 
  (mkparameter_specification_xx 7 ((*O2*) 5) Integer Out) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 8
(D_Object_Declaration_XX 9 (mkobject_declaration_xx 10 ((*L1*) 6) Integer None)) 
(D_Object_Declaration_XX 11 (mkobject_declaration_xx 12 ((*L2*) 7) Integer None))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 13
    (S_Assignment_XX 14 (E_Identifier_XX 15 ((*L2*) 7) (**(nil)**)) (E_Literal_XX 16 (Integer_Literal 5) (**(nil)**))) 
    (S_Sequence_XX 17
    (S_Assignment_XX 18 (E_Identifier_XX 19 ((*L1*) 6) (**(nil)**)) (E_Name_XX 20 (E_Identifier_XX 21 ((*I3*) 3) (**(nil)**)) (**(nil)**))) 
    (S_Sequence_XX 22
    (S_Assignment_XX 23 (E_Identifier_XX 24 ((*O2*) 5) (**(nil)**)) (E_Name_XX 25 (E_Identifier_XX 26 ((*L1*) 6) (**(nil)**)) (**(nil)**))) 
    (S_Sequence_XX 27
    (S_Assignment_XX 28 (E_Identifier_XX 29 ((*L1*) 6) (**(nil)**)) (E_Name_XX 30 (E_Identifier_XX 31 ((*I2*) 2) (**(nil)**)) (**(nil)**))) 
    (S_Sequence_XX 32
    (S_Assignment_XX 33 (E_Identifier_XX 34 ((*L1*) 6) (**(nil)**)) (E_Binary_Operation_XX 35 Plus (E_Name_XX 36 (E_Identifier_XX 37 ((*I1*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 38 (E_Identifier_XX 39 ((*I2*) 2) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**))) 
    (S_Sequence_XX 40
    (S_If_XX 41 (E_Binary_Operation_XX 42 Greater_Than (E_Name_XX 43 (E_Identifier_XX 44 ((*L1*) 6) (**(nil)**)) (**(nil)**)) (E_Literal_XX 45 (Integer_Literal 5) (**(nil)**)) (**(nil)**))
      (S_If_XX 46 (E_Binary_Operation_XX 47 Less_Than (E_Name_XX 48 (E_Identifier_XX 49 ((*I1*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 50 (Integer_Literal 0) (**(nil)**)) (**(nil)**))
        (S_Assignment_XX 51 (E_Identifier_XX 52 ((*L2*) 7) (**(nil)**)) (E_Literal_XX 53 (Integer_Literal 8) (**(nil)**)))
        S_Null_XX
      )
      S_Null_XX
    ) 
    (S_Assignment_XX 54 (E_Identifier_XX 55 ((*O1*) 4) (**(nil)**)) (E_Name_XX 56 (E_Identifier_XX 57 ((*L2*) 7) (**(nil)**)) (**(nil)**)))))))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((50, Integer) :: (53, Integer) :: (35, Integer) :: (44, Integer) :: (26, Integer) :: (56, Integer) :: (29, Integer) :: (38, Integer) :: (47, Boolean) :: (20, Integer) :: (55, Integer) :: (49, Integer) :: (31, Integer) :: (16, Integer) :: (52, Integer) :: (43, Integer) :: (34, Integer) :: (25, Integer) :: (37, Integer) :: (19, Integer) :: (45, Integer) :: (36, Integer) :: (57, Integer) :: (21, Integer) :: (48, Integer) :: (30, Integer) :: (39, Integer) :: (15, Integer) :: (42, Boolean) :: (24, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((50, (sloc (*Line*)13 (*Col*)21 (*EndLine*)13 (*EndCol*)21)) :: (53, (sloc (*Line*)15 (*Col*)23 (*EndLine*)15 (*EndCol*)23)) :: (35, (sloc (*Line*)10 (*Col*)15 (*EndLine*)10 (*EndCol*)21)) :: (44, (sloc (*Line*)11 (*Col*)12 (*EndLine*)11 (*EndCol*)13)) :: (26, (sloc (*Line*)8 (*Col*)15 (*EndLine*)8 (*EndCol*)16)) :: (56, (sloc (*Line*)19 (*Col*)15 (*EndLine*)19 (*EndCol*)16)) :: (29, (sloc (*Line*)9 (*Col*)9 (*EndLine*)9 (*EndCol*)10)) :: (38, (sloc (*Line*)10 (*Col*)20 (*EndLine*)10 (*EndCol*)21)) :: (47, (sloc (*Line*)13 (*Col*)16 (*EndLine*)13 (*EndCol*)21)) :: (20, (sloc (*Line*)7 (*Col*)15 (*EndLine*)7 (*EndCol*)16)) :: (55, (sloc (*Line*)19 (*Col*)9 (*EndLine*)19 (*EndCol*)10)) :: (49, (sloc (*Line*)13 (*Col*)16 (*EndLine*)13 (*EndCol*)17)) :: (31, (sloc (*Line*)9 (*Col*)15 (*EndLine*)9 (*EndCol*)16)) :: (16, (sloc (*Line*)6 (*Col*)15 (*EndLine*)6 (*EndCol*)15)) :: (52, (sloc (*Line*)15 (*Col*)17 (*EndLine*)15 (*EndCol*)18)) :: (43, (sloc (*Line*)11 (*Col*)12 (*EndLine*)11 (*EndCol*)13)) :: (34, (sloc (*Line*)10 (*Col*)9 (*EndLine*)10 (*EndCol*)10)) :: (25, (sloc (*Line*)8 (*Col*)15 (*EndLine*)8 (*EndCol*)16)) :: (37, (sloc (*Line*)10 (*Col*)15 (*EndLine*)10 (*EndCol*)16)) :: (19, (sloc (*Line*)7 (*Col*)9 (*EndLine*)7 (*EndCol*)10)) :: (45, (sloc (*Line*)11 (*Col*)17 (*EndLine*)11 (*EndCol*)17)) :: (36, (sloc (*Line*)10 (*Col*)15 (*EndLine*)10 (*EndCol*)16)) :: (57, (sloc (*Line*)19 (*Col*)15 (*EndLine*)19 (*EndCol*)16)) :: (21, (sloc (*Line*)7 (*Col*)15 (*EndLine*)7 (*EndCol*)16)) :: (48, (sloc (*Line*)13 (*Col*)16 (*EndLine*)13 (*EndCol*)17)) :: (30, (sloc (*Line*)9 (*Col*)15 (*EndLine*)9 (*EndCol*)16)) :: (39, (sloc (*Line*)10 (*Col*)20 (*EndLine*)10 (*EndCol*)21)) :: (15, (sloc (*Line*)6 (*Col*)9 (*EndLine*)6 (*EndCol*)10)) :: (42, (sloc (*Line*)11 (*Col*)12 (*EndLine*)11 (*EndCol*)17)) :: (24, (sloc (*Line*)8 (*Col*)9 (*EndLine*)8 (*EndCol*)10)) :: nil)
  (* = = = (6) name id to a pair of (name string, unique name string) map = = = *)
  (*/////////////////////////////////////////////////*)
  ((mkNameTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable names map = = = *)
  (*///////////////////////////////////*)
  ((2, ("I2", "ada://parameter/Test_Case_10+1:15/I2+1:45")) :: (5, ("O2", "ada://parameter/Test_Case_10+1:15/O2+1:95")) :: (4, ("O1", "ada://parameter/Test_Case_10+1:15/O1+1:78")) :: (7, ("L2", "ada://variable/Test_Case_10+1:15/L2+4:8")) :: (1, ("I1", "ada://parameter/Test_Case_10+1:15/I1+1:29")) :: (3, ("I3", "ada://parameter/Test_Case_10+1:15/I3+1:61")) :: (6, ("L1", "ada://variable/Test_Case_10+1:15/L1+3:8")) :: nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram names map = = = *)
  (*////////////////////////////////////////////*)
  ((1, ("Test_Case_10", "ada://procedure_body/Test_Case_10+1:15")) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) package names map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) type names map = = = *)
  (*/////////////////////////////////////*)
  (nil)
))
).

