Definition Coq_AST_Tree_XX := 
(D_Procedure_Body_XX 1 
  (mkprocedure_body_xx 3
    (* = = = Procedure Name = = = *)
    ((*Test_Case_10*) 1)
    (* = = = Formal Parameters = = = *)
    (
    (mkparameter_specification_xx 4 ((*I1*) 1) Integer In) :: 
    (mkparameter_specification_xx 5 ((*I2*) 2) Integer In) :: 
    (mkparameter_specification_xx 6 ((*I3*) 3) Integer In) :: 
    (mkparameter_specification_xx 7 ((*O1*) 4) Integer Out) :: 
    (mkparameter_specification_xx 8 ((*O2*) 5) Integer Out) :: nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 9
  (D_Object_Declaration_XX 10 (mkobject_declaration_xx 11 ((*L1*) 6) Integer None)) 
  (D_Object_Declaration_XX 12 (mkobject_declaration_xx 13 ((*L2*) 7) Integer None))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 14
      (S_Assignment_XX 15 (E_Identifier_XX 16 ((*L2*) 7) (**(nil)**)) (E_Literal_XX 17 (Integer_Literal 5) (**(nil)**))) 
      (S_Sequence_XX 18
      (S_Assignment_XX 19 (E_Identifier_XX 20 ((*L1*) 6) (**(nil)**)) (E_Name_XX 21 (E_Identifier_XX 22 ((*I3*) 3) (**(nil)**)) (**(nil)**))) 
      (S_Sequence_XX 23
      (S_Assignment_XX 24 (E_Identifier_XX 25 ((*O2*) 5) (**(nil)**)) (E_Name_XX 26 (E_Identifier_XX 27 ((*L1*) 6) (**(nil)**)) (**(nil)**))) 
      (S_Sequence_XX 28
      (S_Assignment_XX 29 (E_Identifier_XX 30 ((*L1*) 6) (**(nil)**)) (E_Name_XX 31 (E_Identifier_XX 32 ((*I2*) 2) (**(nil)**)) (**(nil)**))) 
      (S_Sequence_XX 33
      (S_Assignment_XX 34 (E_Identifier_XX 35 ((*L1*) 6) (**(nil)**)) (E_Binary_Operation_XX 36 Plus (E_Name_XX 37 (E_Identifier_XX 38 ((*I1*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 39 (E_Identifier_XX 40 ((*I2*) 2) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**))) 
      (S_Sequence_XX 41
      (S_If_XX 42 (E_Binary_Operation_XX 43 Greater_Than (E_Name_XX 44 (E_Identifier_XX 45 ((*L1*) 6) (**(nil)**)) (**(nil)**)) (E_Literal_XX 46 (Integer_Literal 5) (**(nil)**)) (**(nil)**))
        (S_If_XX 47 (E_Binary_Operation_XX 48 Less_Than (E_Name_XX 49 (E_Identifier_XX 50 ((*I1*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 51 (Integer_Literal 0) (**(nil)**)) (**(nil)**))
          (S_Assignment_XX 52 (E_Identifier_XX 53 ((*L2*) 7) (**(nil)**)) (E_Literal_XX 54 (Integer_Literal 8) (**(nil)**)))
          S_Null_XX
        )
        S_Null_XX
      ) 
      (S_Assignment_XX 55 (E_Identifier_XX 56 ((*O1*) 4) (**(nil)**)) (E_Name_XX 57 (E_Identifier_XX 58 ((*L2*) 7) (**(nil)**)) (**(nil)**)))))))))
  )
).

Definition Symbol_Table_XX := 
(mkSymbolTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Test_Case_10*) 1), (0, (mkprocedure_body_xx 3
  (* = = = Procedure Name = = = *)
  ((*Test_Case_10*) 1)
  (* = = = Formal Parameters = = = *)
  (
  (mkparameter_specification_xx 4 ((*I1*) 1) Integer In) :: 
  (mkparameter_specification_xx 5 ((*I2*) 2) Integer In) :: 
  (mkparameter_specification_xx 6 ((*I3*) 3) Integer In) :: 
  (mkparameter_specification_xx 7 ((*O1*) 4) Integer Out) :: 
  (mkparameter_specification_xx 8 ((*O2*) 5) Integer Out) :: nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 9
(D_Object_Declaration_XX 10 (mkobject_declaration_xx 11 ((*L1*) 6) Integer None)) 
(D_Object_Declaration_XX 12 (mkobject_declaration_xx 13 ((*L2*) 7) Integer None))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 14
    (S_Assignment_XX 15 (E_Identifier_XX 16 ((*L2*) 7) (**(nil)**)) (E_Literal_XX 17 (Integer_Literal 5) (**(nil)**))) 
    (S_Sequence_XX 18
    (S_Assignment_XX 19 (E_Identifier_XX 20 ((*L1*) 6) (**(nil)**)) (E_Name_XX 21 (E_Identifier_XX 22 ((*I3*) 3) (**(nil)**)) (**(nil)**))) 
    (S_Sequence_XX 23
    (S_Assignment_XX 24 (E_Identifier_XX 25 ((*O2*) 5) (**(nil)**)) (E_Name_XX 26 (E_Identifier_XX 27 ((*L1*) 6) (**(nil)**)) (**(nil)**))) 
    (S_Sequence_XX 28
    (S_Assignment_XX 29 (E_Identifier_XX 30 ((*L1*) 6) (**(nil)**)) (E_Name_XX 31 (E_Identifier_XX 32 ((*I2*) 2) (**(nil)**)) (**(nil)**))) 
    (S_Sequence_XX 33
    (S_Assignment_XX 34 (E_Identifier_XX 35 ((*L1*) 6) (**(nil)**)) (E_Binary_Operation_XX 36 Plus (E_Name_XX 37 (E_Identifier_XX 38 ((*I1*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 39 (E_Identifier_XX 40 ((*I2*) 2) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**))) 
    (S_Sequence_XX 41
    (S_If_XX 42 (E_Binary_Operation_XX 43 Greater_Than (E_Name_XX 44 (E_Identifier_XX 45 ((*L1*) 6) (**(nil)**)) (**(nil)**)) (E_Literal_XX 46 (Integer_Literal 5) (**(nil)**)) (**(nil)**))
      (S_If_XX 47 (E_Binary_Operation_XX 48 Less_Than (E_Name_XX 49 (E_Identifier_XX 50 ((*I1*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 51 (Integer_Literal 0) (**(nil)**)) (**(nil)**))
        (S_Assignment_XX 52 (E_Identifier_XX 53 ((*L2*) 7) (**(nil)**)) (E_Literal_XX 54 (Integer_Literal 8) (**(nil)**)))
        S_Null_XX
      )
      S_Null_XX
    ) 
    (S_Assignment_XX 55 (E_Identifier_XX 56 ((*O1*) 4) (**(nil)**)) (E_Name_XX 57 (E_Identifier_XX 58 ((*L2*) 7) (**(nil)**)) (**(nil)**)))))))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((32, Integer) :: (50, Integer) :: (53, Integer) :: (35, Integer) :: (17, Integer) :: (44, Integer) :: (26, Integer) :: (56, Integer) :: (38, Integer) :: (20, Integer) :: (46, Integer) :: (58, Integer) :: (40, Integer) :: (49, Integer) :: (31, Integer) :: (22, Integer) :: (16, Integer) :: (43, Boolean) :: (25, Integer) :: (37, Integer) :: (54, Integer) :: (45, Integer) :: (36, Integer) :: (27, Integer) :: (57, Integer) :: (21, Integer) :: (48, Boolean) :: (30, Integer) :: (39, Integer) :: (51, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((32, (sloc (*Line*)9 (*Col*)15 (*EndLine*)9 (*EndCol*)16)) :: (50, (sloc (*Line*)13 (*Col*)16 (*EndLine*)13 (*EndCol*)17)) :: (53, (sloc (*Line*)15 (*Col*)17 (*EndLine*)15 (*EndCol*)18)) :: (35, (sloc (*Line*)10 (*Col*)9 (*EndLine*)10 (*EndCol*)10)) :: (17, (sloc (*Line*)6 (*Col*)15 (*EndLine*)6 (*EndCol*)15)) :: (44, (sloc (*Line*)11 (*Col*)12 (*EndLine*)11 (*EndCol*)13)) :: (26, (sloc (*Line*)8 (*Col*)15 (*EndLine*)8 (*EndCol*)16)) :: (56, (sloc (*Line*)19 (*Col*)9 (*EndLine*)19 (*EndCol*)10)) :: (38, (sloc (*Line*)10 (*Col*)15 (*EndLine*)10 (*EndCol*)16)) :: (20, (sloc (*Line*)7 (*Col*)9 (*EndLine*)7 (*EndCol*)10)) :: (46, (sloc (*Line*)11 (*Col*)17 (*EndLine*)11 (*EndCol*)17)) :: (58, (sloc (*Line*)19 (*Col*)15 (*EndLine*)19 (*EndCol*)16)) :: (40, (sloc (*Line*)10 (*Col*)20 (*EndLine*)10 (*EndCol*)21)) :: (49, (sloc (*Line*)13 (*Col*)16 (*EndLine*)13 (*EndCol*)17)) :: (31, (sloc (*Line*)9 (*Col*)15 (*EndLine*)9 (*EndCol*)16)) :: (22, (sloc (*Line*)7 (*Col*)15 (*EndLine*)7 (*EndCol*)16)) :: (16, (sloc (*Line*)6 (*Col*)9 (*EndLine*)6 (*EndCol*)10)) :: (43, (sloc (*Line*)11 (*Col*)12 (*EndLine*)11 (*EndCol*)17)) :: (25, (sloc (*Line*)8 (*Col*)9 (*EndLine*)8 (*EndCol*)10)) :: (37, (sloc (*Line*)10 (*Col*)15 (*EndLine*)10 (*EndCol*)16)) :: (54, (sloc (*Line*)15 (*Col*)23 (*EndLine*)15 (*EndCol*)23)) :: (45, (sloc (*Line*)11 (*Col*)12 (*EndLine*)11 (*EndCol*)13)) :: (36, (sloc (*Line*)10 (*Col*)15 (*EndLine*)10 (*EndCol*)21)) :: (27, (sloc (*Line*)8 (*Col*)15 (*EndLine*)8 (*EndCol*)16)) :: (57, (sloc (*Line*)19 (*Col*)15 (*EndLine*)19 (*EndCol*)16)) :: (21, (sloc (*Line*)7 (*Col*)15 (*EndLine*)7 (*EndCol*)16)) :: (48, (sloc (*Line*)13 (*Col*)16 (*EndLine*)13 (*EndCol*)21)) :: (30, (sloc (*Line*)9 (*Col*)9 (*EndLine*)9 (*EndCol*)10)) :: (39, (sloc (*Line*)10 (*Col*)20 (*EndLine*)10 (*EndCol*)21)) :: (51, (sloc (*Line*)13 (*Col*)21 (*EndLine*)13 (*EndCol*)21)) :: nil)
).

