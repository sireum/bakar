(* Compilation Unit *)
Library_Unit 1
  (* Compilation Unit - Unit Declaration *) (
    Library_Subprogram 2 (
      (* Procedure Body Declaration *)
      Procedure 3 (
        mkprocedure_body 4
          (* Procedure Body - Name *)
          (*Test_Case_10*) 1
          (* Procedure Body - Specification *)
          (nil)
          (* Procedure Body - Parameters *)
          (
          mkparameter_specification 5 (*I1*) 1 (1) (In) None :: 
          mkparameter_specification 6 (*O1*) 4 (1) (Out) None :: nil) 
          (* Procedure Body - Variable Declarations *)
          (
          mkobject_declaration 7 (*L1*) 6 1 None :: nil)
          (* Procedure Body - Statements *) (
            S_Sequence 8 (
              S_Assignment 9 ((*L2*) 7) (E_Literal 10 (Integer_Literal 5)) ) ( 
              S_Sequence 11 (
                S_Assignment 12 ((*L1*) 6) (E_Identifier 13 (*I3*) 3) ) ( 
                S_Sequence 14 (
                  S_Assignment 15 ((*O2*) 5) (E_Identifier 16 (*L1*) 6) ) ( 
                  S_Sequence 17 (
                    S_Assignment 18 ((*L1*) 6) (E_Identifier 19 (*I2*) 2) ) ( 
                    S_Sequence 20 (
                      S_Assignment 21 ((*L1*) 6) (E_Binary_Operation 22 Plus (E_Identifier 23 (*I1*) 1) (E_Identifier 24 (*I2*) 2)) ) ( 
                      S_Sequence 25 (
                        S_If 26 (E_Binary_Operation 27 Greater_Than (E_Identifier 28 (*L1*) 6) (E_Literal 29 (Integer_Literal 5))) (
                            S_If 30 (E_Binary_Operation 31 Less_Than (E_Identifier 32 (*I1*) 1) (E_Literal 33 (Integer_Literal 0))) (
                                S_Assignment 34 ((*L2*) 7) (E_Literal 35 (Integer_Literal 8))
                              )
                          ) ) ( 
                        S_Assignment 36 ((*O1*) 4) (E_Identifier 37 (*L2*) 7) ) ) ) ) ) )
          )
      )
    )
  )
  (* Compilation Unit - Type Table *) (
    mktype_table (
      (* Expression Type Table: Expression AstNum --> TypeNum *)
      (10, 2) ::
      (13, 1) ::
      (16, 1) ::
      (19, 1) ::
      (22, 1) ::
      (23, 1) ::
      (24, 1) ::
      (27, 3) ::
      (28, 1) ::
      (29, 2) ::
      (31, 3) ::
      (32, 1) ::
      (33, 2) ::
      (35, 2) ::
      (37, 1) :: nil
    ) (
      (* Type Name Table: TypeNum --> (Type URI * Option(Type Declaration AST Num)) *)
      (1, ("ada://ordinary_type/Standard-1:1/Integer-1:1"%string, None)) ::
      (2, ("universal_integer"%string, None)) ::
      (3, ("ada://ordinary_type/Standard-1:1/Boolean-1:1"%string, None)) :: nil
    )
  )