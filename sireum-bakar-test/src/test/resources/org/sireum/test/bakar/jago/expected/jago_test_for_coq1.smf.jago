Definition Coq_AST_Tree_XX := 
(D_Procedure_Body_XX 1 
  (mkprocedure_body_xx 2
    (* = = = Procedure Name = = = *)
    ((*Test_for_Coq1*) 1)
    (* = = = Formal Parameters = = = *)
    (nil)
    (* = = = Object Declarations = = = *)
    ((D_Seq_Declaration_XX 3
  (D_Object_Declaration_XX 5 (mkobject_declaration_xx 6 ((*N*) 1) Integer (Some ((E_Literal_XX 4 (Integer_Literal 25) (**(nil)**)))))) 
  (D_Seq_Declaration_XX 7
  (D_Object_Declaration_XX 8 (mkobject_declaration_xx 9 ((*Result*) 2) Boolean None)) 
  (D_Seq_Declaration_XX 10
  (D_Object_Declaration_XX 11 (mkobject_declaration_xx 12 ((*I*) 3) Integer None)) 
  (D_Object_Declaration_XX 13 (mkobject_declaration_xx 14 ((*X*) 4) Integer None))))))
    (* = = = Procedure Body = = = *)
      (S_Sequence_XX 15
      (S_Assignment_XX 16 (E_Identifier_XX 17 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 18 (Boolean_Literal true) (**(nil)**))) 
      (S_Sequence_XX 19
      (S_If_XX 20 (E_Binary_Operation_XX 21 Less_Than_Or_Equal (E_Name_XX 22 (E_Identifier_XX 23 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 24 (Integer_Literal 1) (**(nil)**)) (**(nil)**))
        (S_Assignment_XX 25 (E_Identifier_XX 26 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 27 (Boolean_Literal false) (**(nil)**)))
        S_Null_XX
      ) 
      (S_Sequence_XX 28
      (S_Assignment_XX 29 (E_Identifier_XX 30 ((*I*) 3) (**(nil)**)) (E_Literal_XX 31 (Integer_Literal 0) (**(nil)**))) 
      (S_While_Loop_XX 32 (E_Binary_Operation_XX 33 Less_Than_Or_Equal (E_Binary_Operation_XX 34 Multiply (E_Name_XX 35 (E_Identifier_XX 36 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Name_XX 37 (E_Identifier_XX 38 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (E_Name_XX 39 (E_Identifier_XX 40 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(nil)**))
        (S_Sequence_XX 41
        (S_Assignment_XX 42 (E_Identifier_XX 43 ((*X*) 4) (**(nil)**)) (E_Binary_Operation_XX 44 Divide (E_Name_XX 45 (E_Identifier_XX 46 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 47 (E_Identifier_XX 48 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
        (S_Sequence_XX 49
        (S_If_XX 50 (E_Binary_Operation_XX 51 Equal (E_Name_XX 52 (E_Identifier_XX 53 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 54 Multiply (E_Name_XX 55 (E_Identifier_XX 56 ((*X*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 57 (E_Identifier_XX 58 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
          (S_Assignment_XX 59 (E_Identifier_XX 60 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 61 (Boolean_Literal false) (**(nil)**)))
          S_Null_XX
        ) 
        (S_Assignment_XX 62 (E_Identifier_XX 63 ((*I*) 3) (**(nil)**)) (E_Binary_Operation_XX 64 Plus (E_Name_XX 65 (E_Identifier_XX 66 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Literal_XX 67 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))))
      ))))
  )
).

Definition Symbol_Table_XX := 
(mkSymbolTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  (nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ((((*Test_for_Coq1*) 1), (0, (mkprocedure_body_xx 2
  (* = = = Procedure Name = = = *)
  ((*Test_for_Coq1*) 1)
  (* = = = Formal Parameters = = = *)
  (nil)
  (* = = = Object Declarations = = = *)
  ((D_Seq_Declaration_XX 3
(D_Object_Declaration_XX 5 (mkobject_declaration_xx 6 ((*N*) 1) Integer (Some ((E_Literal_XX 4 (Integer_Literal 25) (**(nil)**)))))) 
(D_Seq_Declaration_XX 7
(D_Object_Declaration_XX 8 (mkobject_declaration_xx 9 ((*Result*) 2) Boolean None)) 
(D_Seq_Declaration_XX 10
(D_Object_Declaration_XX 11 (mkobject_declaration_xx 12 ((*I*) 3) Integer None)) 
(D_Object_Declaration_XX 13 (mkobject_declaration_xx 14 ((*X*) 4) Integer None))))))
  (* = = = Procedure Body = = = *)
    (S_Sequence_XX 15
    (S_Assignment_XX 16 (E_Identifier_XX 17 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 18 (Boolean_Literal true) (**(nil)**))) 
    (S_Sequence_XX 19
    (S_If_XX 20 (E_Binary_Operation_XX 21 Less_Than_Or_Equal (E_Name_XX 22 (E_Identifier_XX 23 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 24 (Integer_Literal 1) (**(nil)**)) (**(nil)**))
      (S_Assignment_XX 25 (E_Identifier_XX 26 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 27 (Boolean_Literal false) (**(nil)**)))
      S_Null_XX
    ) 
    (S_Sequence_XX 28
    (S_Assignment_XX 29 (E_Identifier_XX 30 ((*I*) 3) (**(nil)**)) (E_Literal_XX 31 (Integer_Literal 0) (**(nil)**))) 
    (S_While_Loop_XX 32 (E_Binary_Operation_XX 33 Less_Than_Or_Equal (E_Binary_Operation_XX 34 Multiply (E_Name_XX 35 (E_Identifier_XX 36 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Name_XX 37 (E_Identifier_XX 38 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (E_Name_XX 39 (E_Identifier_XX 40 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(nil)**))
      (S_Sequence_XX 41
      (S_Assignment_XX 42 (E_Identifier_XX 43 ((*X*) 4) (**(nil)**)) (E_Binary_Operation_XX 44 Divide (E_Name_XX 45 (E_Identifier_XX 46 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 47 (E_Identifier_XX 48 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
      (S_Sequence_XX 49
      (S_If_XX 50 (E_Binary_Operation_XX 51 Equal (E_Name_XX 52 (E_Identifier_XX 53 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 54 Multiply (E_Name_XX 55 (E_Identifier_XX 56 ((*X*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 57 (E_Identifier_XX 58 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
        (S_Assignment_XX 59 (E_Identifier_XX 60 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 61 (Boolean_Literal false) (**(nil)**)))
        S_Null_XX
      ) 
      (S_Assignment_XX 62 (E_Identifier_XX 63 ((*I*) 3) (**(nil)**)) (E_Binary_Operation_XX 64 Plus (E_Name_XX 65 (E_Identifier_XX 66 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Literal_XX 67 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))))
    ))))
))) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ((23, Integer) :: (53, Integer) :: (17, Boolean) :: (35, Integer) :: (44, Integer) :: (26, Boolean) :: (56, Integer) :: (38, Integer) :: (47, Integer) :: (65, Integer) :: (46, Integer) :: (64, Integer) :: (55, Integer) :: (67, Integer) :: (58, Integer) :: (40, Integer) :: (4, Integer) :: (31, Integer) :: (22, Integer) :: (52, Integer) :: (43, Integer) :: (34, Integer) :: (61, Boolean) :: (37, Integer) :: (60, Boolean) :: (63, Integer) :: (54, Integer) :: (45, Integer) :: (27, Boolean) :: (18, Boolean) :: (36, Integer) :: (57, Integer) :: (21, Boolean) :: (48, Integer) :: (30, Integer) :: (39, Integer) :: (66, Integer) :: (51, Boolean) :: (33, Boolean) :: (24, Integer) :: nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ((23, (sloc (*Line*)15 (*Col*)7 (*EndLine*)15 (*EndCol*)7)) :: (53, (sloc (*Line*)21 (*Col*)10 (*EndLine*)21 (*EndCol*)10)) :: (17, (sloc (*Line*)12 (*Col*)4 (*EndLine*)12 (*EndCol*)9)) :: (35, (sloc (*Line*)19 (*Col*)10 (*EndLine*)19 (*EndCol*)10)) :: (44, (sloc (*Line*)20 (*Col*)12 (*EndLine*)20 (*EndCol*)16)) :: (26, (sloc (*Line*)16 (*Col*)7 (*EndLine*)16 (*EndCol*)12)) :: (56, (sloc (*Line*)21 (*Col*)14 (*EndLine*)21 (*EndCol*)14)) :: (38, (sloc (*Line*)19 (*Col*)12 (*EndLine*)19 (*EndCol*)12)) :: (47, (sloc (*Line*)20 (*Col*)16 (*EndLine*)20 (*EndCol*)16)) :: (65, (sloc (*Line*)24 (*Col*)12 (*EndLine*)24 (*EndCol*)12)) :: (46, (sloc (*Line*)20 (*Col*)12 (*EndLine*)20 (*EndCol*)12)) :: (64, (sloc (*Line*)24 (*Col*)12 (*EndLine*)24 (*EndCol*)16)) :: (55, (sloc (*Line*)21 (*Col*)14 (*EndLine*)21 (*EndCol*)14)) :: (67, (sloc (*Line*)24 (*Col*)16 (*EndLine*)24 (*EndCol*)16)) :: (58, (sloc (*Line*)21 (*Col*)18 (*EndLine*)21 (*EndCol*)18)) :: (40, (sloc (*Line*)19 (*Col*)17 (*EndLine*)19 (*EndCol*)17)) :: (4, (sloc (*Line*)6 (*Col*)18 (*EndLine*)6 (*EndCol*)19)) :: (31, (sloc (*Line*)18 (*Col*)9 (*EndLine*)18 (*EndCol*)9)) :: (22, (sloc (*Line*)15 (*Col*)7 (*EndLine*)15 (*EndCol*)7)) :: (52, (sloc (*Line*)21 (*Col*)10 (*EndLine*)21 (*EndCol*)10)) :: (43, (sloc (*Line*)20 (*Col*)7 (*EndLine*)20 (*EndCol*)7)) :: (34, (sloc (*Line*)19 (*Col*)10 (*EndLine*)19 (*EndCol*)12)) :: (61, (sloc (*Line*)22 (*Col*)20 (*EndLine*)22 (*EndCol*)24)) :: (37, (sloc (*Line*)19 (*Col*)12 (*EndLine*)19 (*EndCol*)12)) :: (60, (sloc (*Line*)22 (*Col*)10 (*EndLine*)22 (*EndCol*)15)) :: (63, (sloc (*Line*)24 (*Col*)7 (*EndLine*)24 (*EndCol*)7)) :: (54, (sloc (*Line*)21 (*Col*)14 (*EndLine*)21 (*EndCol*)18)) :: (45, (sloc (*Line*)20 (*Col*)12 (*EndLine*)20 (*EndCol*)12)) :: (27, (sloc (*Line*)16 (*Col*)17 (*EndLine*)16 (*EndCol*)21)) :: (18, (sloc (*Line*)12 (*Col*)14 (*EndLine*)12 (*EndCol*)17)) :: (36, (sloc (*Line*)19 (*Col*)10 (*EndLine*)19 (*EndCol*)10)) :: (57, (sloc (*Line*)21 (*Col*)18 (*EndLine*)21 (*EndCol*)18)) :: (21, (sloc (*Line*)15 (*Col*)7 (*EndLine*)15 (*EndCol*)12)) :: (48, (sloc (*Line*)20 (*Col*)16 (*EndLine*)20 (*EndCol*)16)) :: (30, (sloc (*Line*)18 (*Col*)4 (*EndLine*)18 (*EndCol*)4)) :: (39, (sloc (*Line*)19 (*Col*)17 (*EndLine*)19 (*EndCol*)17)) :: (66, (sloc (*Line*)24 (*Col*)12 (*EndLine*)24 (*EndCol*)12)) :: (51, (sloc (*Line*)21 (*Col*)10 (*EndLine*)21 (*EndCol*)18)) :: (33, (sloc (*Line*)19 (*Col*)10 (*EndLine*)19 (*EndCol*)17)) :: (24, (sloc (*Line*)15 (*Col*)12 (*EndLine*)15 (*EndCol*)12)) :: nil)
  (* = = = (6) name id to a pair of (name string, unique name string) map = = = *)
  (*/////////////////////////////////////////////////*)
  ((mkNameTable_xx
  (*///////////////////////////////////*)
  (* = = = (1) variable names map = = = *)
  (*///////////////////////////////////*)
  ((2, ("Result", "ada://variable/Test_for_Coq1+4:11/Result+7:4")) :: (4, ("X", "ada://variable/Test_for_Coq1+4:11/X+9:4")) :: (1, ("N", "ada://variable/Test_for_Coq1+4:11/N+6:4")) :: (3, ("I", "ada://variable/Test_for_Coq1+4:11/I+8:4")) :: nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram names map = = = *)
  (*////////////////////////////////////////////*)
  ((1, ("Test_for_Coq1", "ada://procedure_body/Test_for_Coq1+4:11")) :: nil)
  (*//////////////////////////////////////*)
  (* = = = (3) package names map = = = *)
  (*//////////////////////////////////////*)
  (nil)
  (*/////////////////////////////////////*)
  (* = = = (4) type names map = = = *)
  (*/////////////////////////////////////*)
  (nil)
))
).

