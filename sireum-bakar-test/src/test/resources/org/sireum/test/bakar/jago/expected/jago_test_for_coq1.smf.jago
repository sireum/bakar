(* Compilation Unit *)
Library_Unit_XX 1
  (* Compilation Unit - Unit Declaration *)
  (Library_Subprogram_XX 2
    (* Procedure Body Declaration *)
    (Global_Procedure_XX 3
      (mkprocedure_declaration_xx 4
        (* Procedure Name *)
        ((*Test_for_Coq1*) 1)
        (* Formal Parameters *)
        (nil) 
        (* Procedure Contract *)
        (nil)  
        (* Object Declarations *)
        ((D_Seq_Declaration_XX 5 
      (D_Object_Declaration_XX 6 (mkobject_declaration_xx 7 ((*N*) 1) Integer (Some ((E_Literal_XX 8 (Integer_Literal 25) (**(nil)**)))))) 
      (D_Seq_Declaration_XX 9 
      (D_Object_Declaration_XX 10 (mkobject_declaration_xx 11 ((*Result*) 2) Boolean None)) 
      (D_Seq_Declaration_XX 12 
      (D_Object_Declaration_XX 13 (mkobject_declaration_xx 14 ((*I*) 3) Integer None)) 
      (D_Object_Declaration_XX 15 (mkobject_declaration_xx 16 ((*X*) 4) Integer None))))))
        (* Procedure Body *)
          (S_Sequence_XX 17
          (S_Assignment_XX 18 (E_Identifier_XX 19 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 20 (Boolean_Literal true) (**(nil)**))) 
          (S_Sequence_XX 21
          (S_If_XX 22 (E_Binary_Operation_XX 23 Less_Than_Or_Equal (E_Name_XX 24 (E_Identifier_XX 25 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 26 (Integer_Literal 1) (**(nil)**)) (**(nil)**))
            (S_Assignment_XX 27 (E_Identifier_XX 28 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 29 (Boolean_Literal false) (**(nil)**)))
            S_Null_XX
          ) 
          (S_Sequence_XX 30
          (S_Assignment_XX 31 (E_Identifier_XX 32 ((*I*) 3) (**(nil)**)) (E_Literal_XX 33 (Integer_Literal 0) (**(nil)**))) 
          (S_While_Loop_XX 34 (E_Binary_Operation_XX 35 Less_Than_Or_Equal (E_Binary_Operation_XX 36 Multiply (E_Name_XX 37 (E_Identifier_XX 38 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Name_XX 39 (E_Identifier_XX 40 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (E_Name_XX 41 (E_Identifier_XX 42 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(nil)**))
            (S_Sequence_XX 43
            (S_Assignment_XX 44 (E_Identifier_XX 45 ((*X*) 4) (**(nil)**)) (E_Binary_Operation_XX 46 Divide (E_Name_XX 47 (E_Identifier_XX 48 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 49 (E_Identifier_XX 50 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
            (S_Sequence_XX 51
            (S_If_XX 52 (E_Binary_Operation_XX 53 Equal (E_Name_XX 54 (E_Identifier_XX 55 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 56 Multiply (E_Name_XX 57 (E_Identifier_XX 58 ((*X*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 59 (E_Identifier_XX 60 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
              (S_Assignment_XX 61 (E_Identifier_XX 62 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 63 (Boolean_Literal false) (**(nil)**)))
              S_Null_XX
            ) 
            (S_Assignment_XX 64 (E_Identifier_XX 65 ((*I*) 3) (**(nil)**)) (E_Binary_Operation_XX 66 Plus (E_Name_XX 67 (E_Identifier_XX 68 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Literal_XX 69 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))))
          ))))
      )
    )
  )