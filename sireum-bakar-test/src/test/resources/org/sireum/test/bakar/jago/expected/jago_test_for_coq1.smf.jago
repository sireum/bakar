(* Compilation Unit *)
Library_Unit_XX 1
  (* Compilation Unit - Unit Declaration *)
  (Library_Subprogram_XX 2
    (* Procedure Body Declaration *)
    (Global_Procedure_XX 3
      (mkprocedure_declaration_xx 4
        (* Procedure Name *)
        ((*Test_for_Coq1*) 1)
        (* Formal Parameters *)
        (nil) 
        (* Procedure Contract *)
        (nil)  
        (* Object Declarations *)
        (
        (D_Object_Declaration_XX 5 (mkobject_declaration_xx 6 ((*N*) 1) Integer (Some ((E_Literal_XX 7 (Integer_Literal 25) (**(nil)**)))))) :: 
        (D_Object_Declaration_XX 8 (mkobject_declaration_xx 9 ((*Result*) 2) Boolean None)) :: 
        (D_Object_Declaration_XX 10 (mkobject_declaration_xx 11 ((*I*) 3) Integer None)) :: 
        (D_Object_Declaration_XX 12 (mkobject_declaration_xx 13 ((*X*) 4) Integer None)) :: nil)
        (* Procedure Body *)
          (S_Sequence_XX 14
          (S_Assignment_XX 15 (E_Identifier_XX 16 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 17 (Boolean_Literal true) (**(nil)**))) 
          (S_Sequence_XX 18
          (S_If_XX 19 (E_Binary_Operation_XX 20 Less_Than_Or_Equal (E_Name_XX 21 (E_Identifier_XX 22 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Literal_XX 23 (Integer_Literal 1) (**(nil)**)) (**(nil)**))
            (S_Assignment_XX 24 (E_Identifier_XX 25 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 26 (Boolean_Literal false) (**(nil)**)))
            S_Null_XX
          ) 
          (S_Sequence_XX 27
          (S_Assignment_XX 28 (E_Identifier_XX 29 ((*I*) 3) (**(nil)**)) (E_Literal_XX 30 (Integer_Literal 0) (**(nil)**))) 
          (S_While_Loop_XX 31 (E_Binary_Operation_XX 32 Less_Than_Or_Equal (E_Binary_Operation_XX 33 Multiply (E_Name_XX 34 (E_Identifier_XX 35 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Name_XX 36 (E_Identifier_XX 37 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (E_Name_XX 38 (E_Identifier_XX 39 ((*N*) 1) (**(nil)**)) (**(nil)**)) (**(nil)**))
            (S_Sequence_XX 40
            (S_Assignment_XX 41 (E_Identifier_XX 42 ((*X*) 4) (**(nil)**)) (E_Binary_Operation_XX 43 Divide (E_Name_XX 44 (E_Identifier_XX 45 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Name_XX 46 (E_Identifier_XX 47 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Division_Check :: Do_Overflow_Check :: nil)**))) 
            (S_Sequence_XX 48
            (S_If_XX 49 (E_Binary_Operation_XX 50 Equal (E_Name_XX 51 (E_Identifier_XX 52 ((*N*) 1) (**(nil)**)) (**(nil)**)) (E_Binary_Operation_XX 53 Multiply (E_Name_XX 54 (E_Identifier_XX 55 ((*X*) 4) (**(nil)**)) (**(nil)**)) (E_Name_XX 56 (E_Identifier_XX 57 ((*I*) 3) (**(nil)**)) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)) (**(nil)**))
              (S_Assignment_XX 58 (E_Identifier_XX 59 ((*Result*) 2) (**(nil)**)) (E_Literal_XX 60 (Boolean_Literal false) (**(nil)**)))
              S_Null_XX
            ) 
            (S_Assignment_XX 61 (E_Identifier_XX 62 ((*I*) 3) (**(nil)**)) (E_Binary_Operation_XX 63 Plus (E_Name_XX 64 (E_Identifier_XX 65 ((*I*) 3) (**(nil)**)) (**(nil)**)) (E_Literal_XX 66 (Integer_Literal 1) (**(nil)**)) (**(Do_Overflow_Check :: nil)**)))))
          ))))
      )
    )
  )