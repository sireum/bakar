// Do not edit this file. It is auto-generated from org.sireum.bakar.symbol.BakarCallTree
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.bakar.symbol

import org.sireum.util._
import org.sireum.pipeline._
import org.sireum.bakar.symbol.BakarSymbolTable
import org.sireum.bakar.symbol.CallTree
import org.sireum.pilar.ast.Model
import scala.collection.immutable.Seq

object BakarCallTreeModule extends PipelineModule {
  def title = "Bakar Kiasan Call Tree"
  def origin = classOf[BakarCallTree]

  val globalCallTreeKey = "Global.callTree"
  val globalModelsKey = "Global.models"
  val globalSymbolTableKey = "Global.symbolTable"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.bakar.symbol.BakarCallTreeModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _models : scala.Option[AnyRef] = None
    var _modelsKey : scala.Option[String] = None

    val keylistmodels = List(BakarCallTreeModule.globalModelsKey)
    keylistmodels.foreach(key => 
      if(job ? key) { 
        if(_models.isEmpty) {
          _models = Some(job(key))
          _modelsKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _models.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'models' keys '" + _modelsKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _models match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'models'.  Expecting 'scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'models'")       
    }
    var _symbolTable : scala.Option[AnyRef] = None
    var _symbolTableKey : scala.Option[String] = None

    val keylistsymbolTable = List(BakarCallTreeModule.globalSymbolTableKey)
    keylistsymbolTable.foreach(key => 
      if(job ? key) { 
        if(_symbolTable.isEmpty) {
          _symbolTable = Some(job(key))
          _symbolTableKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _symbolTable.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'symbolTable' keys '" + _symbolTableKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _symbolTable match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.bakar.symbol.BakarSymbolTable]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'symbolTable'.  Expecting 'org.sireum.bakar.symbol.BakarSymbolTable' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'symbolTable'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? BakarCallTreeModule.globalCallTreeKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'callTree'. Expecting (BakarCallTreeModule.globalCallTreeKey)") 
    }

    if(job ? BakarCallTreeModule.globalCallTreeKey && !job(BakarCallTreeModule.globalCallTreeKey).isInstanceOf[org.sireum.bakar.symbol.CallTree]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for BakarCallTreeModule.globalCallTreeKey.  Expecting 'org.sireum.bakar.symbol.CallTree' but found '" + 
        job(BakarCallTreeModule.globalCallTreeKey).getClass.toString + "'")
    } 
    return tags
  }

  def getModels (options : scala.collection.Map[Property.Key, Any]) : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = {
    if (options.contains(BakarCallTreeModule.globalModelsKey)) {
       return options(BakarCallTreeModule.globalModelsKey).asInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setModels (options : MMap[Property.Key, Any], models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]) : MMap[Property.Key, Any] = {

    options(BakarCallTreeModule.globalModelsKey) = models

    return options
  }

  def getSymbolTable (options : scala.collection.Map[Property.Key, Any]) : org.sireum.bakar.symbol.BakarSymbolTable = {
    if (options.contains(BakarCallTreeModule.globalSymbolTableKey)) {
       return options(BakarCallTreeModule.globalSymbolTableKey).asInstanceOf[org.sireum.bakar.symbol.BakarSymbolTable]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSymbolTable (options : MMap[Property.Key, Any], symbolTable : org.sireum.bakar.symbol.BakarSymbolTable) : MMap[Property.Key, Any] = {

    options(BakarCallTreeModule.globalSymbolTableKey) = symbolTable

    return options
  }

  def getCallTree (options : scala.collection.Map[Property.Key, Any]) : org.sireum.bakar.symbol.CallTree = {
    if (options.contains(BakarCallTreeModule.globalCallTreeKey)) {
       return options(BakarCallTreeModule.globalCallTreeKey).asInstanceOf[org.sireum.bakar.symbol.CallTree]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setCallTree (options : MMap[Property.Key, Any], callTree : org.sireum.bakar.symbol.CallTree) : MMap[Property.Key, Any] = {

    options(BakarCallTreeModule.globalCallTreeKey) = callTree

    return options
  }

  object ConsumerView {
    implicit class BakarCallTreeModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = BakarCallTreeModule.getModels(job.propertyMap)
      def symbolTable : org.sireum.bakar.symbol.BakarSymbolTable = BakarCallTreeModule.getSymbolTable(job.propertyMap)
      def callTree : org.sireum.bakar.symbol.CallTree = BakarCallTreeModule.getCallTree(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class BakarCallTreeModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def models_=(models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]) { BakarCallTreeModule.setModels(job.propertyMap, models) }
      def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = BakarCallTreeModule.getModels(job.propertyMap)

      def symbolTable_=(symbolTable : org.sireum.bakar.symbol.BakarSymbolTable) { BakarCallTreeModule.setSymbolTable(job.propertyMap, symbolTable) }
      def symbolTable : org.sireum.bakar.symbol.BakarSymbolTable = BakarCallTreeModule.getSymbolTable(job.propertyMap)

      def callTree_=(callTree : org.sireum.bakar.symbol.CallTree) { BakarCallTreeModule.setCallTree(job.propertyMap, callTree) }
      def callTree : org.sireum.bakar.symbol.CallTree = BakarCallTreeModule.getCallTree(job.propertyMap)
    }
  }
}

trait BakarCallTreeModule {
  def job : PipelineJob

  def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = BakarCallTreeModule.getModels(job.propertyMap)

  def symbolTable : org.sireum.bakar.symbol.BakarSymbolTable = BakarCallTreeModule.getSymbolTable(job.propertyMap)


  def callTree_=(callTree : org.sireum.bakar.symbol.CallTree) { BakarCallTreeModule.setCallTree(job.propertyMap, callTree) }
  def callTree : org.sireum.bakar.symbol.CallTree = BakarCallTreeModule.getCallTree(job.propertyMap)
}