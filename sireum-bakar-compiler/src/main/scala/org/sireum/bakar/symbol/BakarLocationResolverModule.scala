// Do not edit this file. It is auto-generated from org.sireum.bakar.symbol.BakarLocationResolver
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.bakar.symbol

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.Integer
import java.lang.String
import org.sireum.bakar.symbol.BakarSymbolTable
import org.sireum.pilar.ast.Model
import org.sireum.pilar.ast.ProcedureDecl
import scala.collection.immutable.Seq

object BakarLocationResolverModule extends PipelineModule {
  def title = "Bakar Location Resolver"
  def origin = classOf[BakarLocationResolver]

  val globalUnitsKey = "Global.units"
  val globalFileUriKey = "Global.fileUri"
  val globalModelsKey = "Global.models"
  val globalLineKey = "Global.line"
  val globalSymbolTableKey = "Global.symbolTable"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.bakar.symbol.BakarLocationResolverModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _fileUri : scala.Option[AnyRef] = None
    var _fileUriKey : scala.Option[String] = None

    val keylistfileUri = List(BakarLocationResolverModule.globalFileUriKey)
    keylistfileUri.foreach(key => 
      if(job ? key) { 
        if(_fileUri.isEmpty) {
          _fileUri = Some(job(key))
          _fileUriKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _fileUri.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'fileUri' keys '" + _fileUriKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _fileUri match{
      case Some(x) =>
        if(!x.isInstanceOf[java.lang.String]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'fileUri'.  Expecting 'java.lang.String' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'fileUri'")       
    }
    var _models : scala.Option[AnyRef] = None
    var _modelsKey : scala.Option[String] = None

    val keylistmodels = List(BakarLocationResolverModule.globalModelsKey)
    keylistmodels.foreach(key => 
      if(job ? key) { 
        if(_models.isEmpty) {
          _models = Some(job(key))
          _modelsKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _models.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'models' keys '" + _modelsKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _models match{
      case Some(x) =>
        if(!x.isInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'models'.  Expecting 'scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'models'")       
    }
    var _symbolTable : scala.Option[AnyRef] = None
    var _symbolTableKey : scala.Option[String] = None

    val keylistsymbolTable = List(BakarLocationResolverModule.globalSymbolTableKey)
    keylistsymbolTable.foreach(key => 
      if(job ? key) { 
        if(_symbolTable.isEmpty) {
          _symbolTable = Some(job(key))
          _symbolTableKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _symbolTable.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'symbolTable' keys '" + _symbolTableKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _symbolTable match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.bakar.symbol.BakarSymbolTable]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'symbolTable'.  Expecting 'org.sireum.bakar.symbol.BakarSymbolTable' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'symbolTable'")       
    }
    var _line : scala.Option[AnyRef] = None
    var _lineKey : scala.Option[String] = None

    val keylistline = List(BakarLocationResolverModule.globalLineKey)
    keylistline.foreach(key => 
      if(job ? key) { 
        if(_line.isEmpty) {
          _line = Some(job(key))
          _lineKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _line.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'line' keys '" + _lineKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _line match{
      case Some(x) =>
        if(!x.isInstanceOf[java.lang.Integer]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'line'.  Expecting 'java.lang.Integer' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'line'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? BakarLocationResolverModule.globalUnitsKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'units'. Expecting (BakarLocationResolverModule.globalUnitsKey)") 
    }

    if(job ? BakarLocationResolverModule.globalUnitsKey && !job(BakarLocationResolverModule.globalUnitsKey).isInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.ProcedureDecl]]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for BakarLocationResolverModule.globalUnitsKey.  Expecting 'scala.collection.immutable.Seq[org.sireum.pilar.ast.ProcedureDecl]' but found '" + 
        job(BakarLocationResolverModule.globalUnitsKey).getClass.toString + "'")
    } 

    if(!(job ? BakarLocationResolverModule.globalSymbolTableKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'symbolTable'. Expecting (BakarLocationResolverModule.globalSymbolTableKey)") 
    }

    if(job ? BakarLocationResolverModule.globalSymbolTableKey && !job(BakarLocationResolverModule.globalSymbolTableKey).isInstanceOf[org.sireum.bakar.symbol.BakarSymbolTable]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for BakarLocationResolverModule.globalSymbolTableKey.  Expecting 'org.sireum.bakar.symbol.BakarSymbolTable' but found '" + 
        job(BakarLocationResolverModule.globalSymbolTableKey).getClass.toString + "'")
    } 
    return tags
  }

  def getFileUri (options : scala.collection.Map[Property.Key, Any]) : java.lang.String = {
    if (options.contains(BakarLocationResolverModule.globalFileUriKey)) {
       return options(BakarLocationResolverModule.globalFileUriKey).asInstanceOf[java.lang.String]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setFileUri (options : MMap[Property.Key, Any], fileUri : java.lang.String) : MMap[Property.Key, Any] = {

    options(BakarLocationResolverModule.globalFileUriKey) = fileUri

    return options
  }

  def getUnits (options : scala.collection.Map[Property.Key, Any]) : scala.collection.immutable.Seq[org.sireum.pilar.ast.ProcedureDecl] = {
    if (options.contains(BakarLocationResolverModule.globalUnitsKey)) {
       return options(BakarLocationResolverModule.globalUnitsKey).asInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.ProcedureDecl]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setUnits (options : MMap[Property.Key, Any], units : scala.collection.immutable.Seq[org.sireum.pilar.ast.ProcedureDecl]) : MMap[Property.Key, Any] = {

    options(BakarLocationResolverModule.globalUnitsKey) = units

    return options
  }

  def getModels (options : scala.collection.Map[Property.Key, Any]) : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = {
    if (options.contains(BakarLocationResolverModule.globalModelsKey)) {
       return options(BakarLocationResolverModule.globalModelsKey).asInstanceOf[scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setModels (options : MMap[Property.Key, Any], models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]) : MMap[Property.Key, Any] = {

    options(BakarLocationResolverModule.globalModelsKey) = models

    return options
  }

  def getSymbolTable (options : scala.collection.Map[Property.Key, Any]) : org.sireum.bakar.symbol.BakarSymbolTable = {
    if (options.contains(BakarLocationResolverModule.globalSymbolTableKey)) {
       return options(BakarLocationResolverModule.globalSymbolTableKey).asInstanceOf[org.sireum.bakar.symbol.BakarSymbolTable]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setSymbolTable (options : MMap[Property.Key, Any], symbolTable : org.sireum.bakar.symbol.BakarSymbolTable) : MMap[Property.Key, Any] = {

    options(BakarLocationResolverModule.globalSymbolTableKey) = symbolTable

    return options
  }

  def getLine (options : scala.collection.Map[Property.Key, Any]) : java.lang.Integer = {
    if (options.contains(BakarLocationResolverModule.globalLineKey)) {
       return options(BakarLocationResolverModule.globalLineKey).asInstanceOf[java.lang.Integer]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setLine (options : MMap[Property.Key, Any], line : java.lang.Integer) : MMap[Property.Key, Any] = {

    options(BakarLocationResolverModule.globalLineKey) = line

    return options
  }

  object ConsumerView {
    implicit class BakarLocationResolverModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def fileUri : java.lang.String = BakarLocationResolverModule.getFileUri(job.propertyMap)
      def units : scala.collection.immutable.Seq[org.sireum.pilar.ast.ProcedureDecl] = BakarLocationResolverModule.getUnits(job.propertyMap)
      def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = BakarLocationResolverModule.getModels(job.propertyMap)
      def symbolTable : org.sireum.bakar.symbol.BakarSymbolTable = BakarLocationResolverModule.getSymbolTable(job.propertyMap)
      def line : java.lang.Integer = BakarLocationResolverModule.getLine(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class BakarLocationResolverModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def fileUri_=(fileUri : java.lang.String) { BakarLocationResolverModule.setFileUri(job.propertyMap, fileUri) }
      def fileUri : java.lang.String = BakarLocationResolverModule.getFileUri(job.propertyMap)

      def units_=(units : scala.collection.immutable.Seq[org.sireum.pilar.ast.ProcedureDecl]) { BakarLocationResolverModule.setUnits(job.propertyMap, units) }
      def units : scala.collection.immutable.Seq[org.sireum.pilar.ast.ProcedureDecl] = BakarLocationResolverModule.getUnits(job.propertyMap)

      def models_=(models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model]) { BakarLocationResolverModule.setModels(job.propertyMap, models) }
      def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = BakarLocationResolverModule.getModels(job.propertyMap)

      def symbolTable_=(symbolTable : org.sireum.bakar.symbol.BakarSymbolTable) { BakarLocationResolverModule.setSymbolTable(job.propertyMap, symbolTable) }
      def symbolTable : org.sireum.bakar.symbol.BakarSymbolTable = BakarLocationResolverModule.getSymbolTable(job.propertyMap)

      def line_=(line : java.lang.Integer) { BakarLocationResolverModule.setLine(job.propertyMap, line) }
      def line : java.lang.Integer = BakarLocationResolverModule.getLine(job.propertyMap)
    }
  }
}

trait BakarLocationResolverModule {
  def job : PipelineJob

  def fileUri : java.lang.String = BakarLocationResolverModule.getFileUri(job.propertyMap)


  def units_=(units : scala.collection.immutable.Seq[org.sireum.pilar.ast.ProcedureDecl]) { BakarLocationResolverModule.setUnits(job.propertyMap, units) }
  def units : scala.collection.immutable.Seq[org.sireum.pilar.ast.ProcedureDecl] = BakarLocationResolverModule.getUnits(job.propertyMap)

  def models : scala.collection.immutable.Seq[org.sireum.pilar.ast.Model] = BakarLocationResolverModule.getModels(job.propertyMap)


  def symbolTable_=(symbolTable : org.sireum.bakar.symbol.BakarSymbolTable) { BakarLocationResolverModule.setSymbolTable(job.propertyMap, symbolTable) }
  def symbolTable : org.sireum.bakar.symbol.BakarSymbolTable = BakarLocationResolverModule.getSymbolTable(job.propertyMap)

  def line : java.lang.Integer = BakarLocationResolverModule.getLine(job.propertyMap)
}