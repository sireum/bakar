// group SPARKTRANS_OCaml_MODEL;

importRequiredLibsForAst() ::= <<

>>

optionVal(value) ::= <<
$if(value)$Some($value$)$else$None$endif$ 
>>

refType(typeMark, typeId) ::= <<
($typeMark$ $typeId$)
>>

list(elements) ::= <<
[$elements; separator="; "$]
>>

literal(theType, theLiteral) ::= <<
($theType$ $theLiteral$)
>>

literalExpr(astnum, litval, checks) ::= <<
(Literal_XX ($astnum$, $litval$ (**, $checks$, []**)))
>>

binaryExpr(astnum, op, loperand, roperand, checks) ::= <<
(BinOp_XX ($astnum$, $op$, $loperand$, $roperand$ (**, $checks$, []**)))
>>

unaryExpr(astnum, op, operand, checks) ::= <<
(UnOp_XX ($astnum$, $op$, $operand$ (**, $checks$, []**)))
>>

nameExpr(astnum, x) ::= <<
(Name_XX ($astnum$, $x$))
>>

varId(id, annotation) ::= <<
($if(annotation)$(*$annotation$*) $endif$$id$)
>>

identifierExpr(astnum, id, checks) ::= <<
(Identifier_XX ($astnum$, $id$ (**, $checks$**)))
>>

// x[e]
indexedComponent(astnum, x, e, checks) ::= <<
(IndexedComponent_XX ($astnum$, $x$, $e$ (**, $checks$**)))
>>

// x.f
selectedComponent(astnum, x, f, checks) ::= <<
(SelectedComponent_XX ($astnum$, $x$, $f$ (**, $checks$**)))
>>

nullStmt() ::= <<
Null_XX
>>

assignStmt(astnum, lhs, rhs) ::= <<
(Assign_XX ($astnum$, $lhs$, $rhs$))
>>

ifStmt(astnum, cond, trueBranch, falseBranch) ::= <<
(If_XX ($astnum$, $cond$,
  $trueBranch$,
  $if(falseBranch)$$falseBranch$$else$$nullStmt()$$endif$)
)
>>

whileStmt(astnum, cond, loopBody) ::= <<
(While_XX ($astnum$, $cond$,
  $loopBody$)
)
>>

procedureCall(astnum, p_astnum, p, args) ::= <<
(Call_XX ($astnum$, $p_astnum$, $p$, 
  $args$)
)
>>

seqStmt(astnum, stmt1, stmt2) ::= <<
(Seq_XX ($astnum$,
$stmt1$,
$stmt2$))
>>

range(l, u) ::= <<
(Range_XX ($l$, $u$))
>>

subtypeDecl(astnum, tid, parentSubtypeMark, range) ::= <<
(SubtypeDecl_XX ($astnum$, $tid$, $parentSubtypeMark$, $range$))
>>

derivedtypeDecl(astnum, tid, parentSubtypeMark, range) ::= <<
(DerivedTypeDecl_XX ($astnum$, $tid$, $parentSubtypeMark$, $range$))
>>

integertypeDecl(astnum, tid, range) ::= <<
(IntegerTypeDecl_XX ($astnum$, $tid$, $range$))
>>

fieldDeclaration(fieldName, fieldType) ::= <<
($fieldName$, $fieldType$)
>>

arrayTypeDecl(astnum, tid, indexSubtypeMark, componentType) ::= <<
(ArrayTypeDecl_XX ($astnum$, $tid$, ((*index subtype mark*) $indexSubtypeMark$), ((*component type*) $componentType$)))
>>

recordTypeDecl(astnum, tid, fields) ::= <<
(RecordTypeDecl_XX ($astnum$, $tid$, $fields$))
>>

objectDeclaration(astnum, id, theType, init) ::= <<
{ declaration_astnum_XX = $astnum$; object_name_XX = $id$; object_nominal_subtype_XX = $theType$; initialization_exp_XX = $if(init)$(Some ($init$))$else$None$endif$ }
>>

paramSpecification(astnum, id, mode, theType) ::= <<
{ parameter_astnum_XX = $astnum$; parameter_name_XX = $id$; parameter_subtype_mark_XX = $theType$; parameter_mode_XX = $if(mode)$$mode$$else$In$endif$ }
>>

aspectSpecification(astnum, aspectMark, aspectDef) ::= <<
{ 
  aspect_astnum = 
    $astnum$;
  aspect_mark = 
    $aspectMark$; 
  aspect_definition = 
    $aspectDef$
}
>>

objectDeclarationWrapper(astnum, objectDecl) ::= <<
(ObjDecl_XX ($astnum$, $objectDecl$))
>>

procedureBodyDeclWrapper(astnum, procedureBodyDecl) ::= <<
(ProcBodyDecl_XX ($astnum$, 
  $procedureBodyDecl$)
)
>>

typeDeclarationWrapper(astnum, typeDecl) ::= <<
(TypeDecl_XX ($astnum$, $typeDecl$))
>>

seqDeclaration(astnum, d1, d2) ::= <<
(SeqDecl_XX ($astnum$,
$d1$,
$d2$))
>>

procedureBodyDeclaration(astnum, procName, params, identDecls, procBody) ::= <<
mkprocBodyDecl_XX (
 $astnum$,
  (* = = = Procedure Name = = = *)
  $procName$,
  (* = = = Formal Parameters = = = *)
  [$params; separator="; \n"$],
  (* = = = Object Declarations = = = *)
  $identDecls$,
  (* = = = Procedure Body = = = *)
  $procBody$
)
>>

programDeclaration(decls, main) ::= << 
{
(* = = = declarations = = = *)
decls_XX = $decls$;
(* = = = main procedure = = = *)
main_XX = $main$
}
>>

// it's used as a placehold for unrecognized or undeclared subprograms
emptySubProgram() ::= <<
mkprocBodyDecl_XX (0, 0, [], NullDecl_XX, Null_XX)
>>

stringFormat(value) ::= <<
"$value$"
>>

nameTable(varNames, procNames, pkgNames, typeNames) ::= <<
{
  (*///////////////////////////////////*)
  (* = = = (1) variable names map = = = *)
  (*///////////////////////////////////*)
  varNames = [$varNames; separator = "; "$];
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram names map = = = *)
  (*////////////////////////////////////////////*)
  procNames = [$procNames; separator = "; "$];
  (*//////////////////////////////////////*)
  (* = = = (3) package names map = = = *)
  (*//////////////////////////////////////*)
  pkgNames = [$pkgNames; separator = "; "$];
  (*/////////////////////////////////////*)
  (* = = = (4) type names map = = = *)
  (*/////////////////////////////////////*)
  typeNames = [$typeNames; separator = "; "$]
}
>>

symbolTable(vars, procs, types, exps, slocs, nameTable) ::= <<
{
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  vars = [$vars; separator = "; "$];
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  procs = [$procs; separator = "; "$];
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  types = [$types; separator = "; "$];
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  exps = [$exps; separator = "; "$];
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  sloc = [$slocs; separator = "; "$];
  (* = = = (6) name id to a pair of (name string, unique name string) map = = = *)
  (*/////////////////////////////////////////////////*)
  names = ($nameTable$)
}
>>

sourceLocation(line, col, endline, endcol) ::= <<
{ line = (*Line*)$line$; col = (*Col*)$col$; endline = (*EndLine*)$endline$; endcol = (*EndCol*)$endcol$ }
>>

product(x, y) ::= <<
($x$, $y$)
>>

definition(x, v) ::= <<
let $x$ = $v$

>>