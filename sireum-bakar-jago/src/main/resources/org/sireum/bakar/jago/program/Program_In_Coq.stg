// group SPARKTRANS_Coq_MODEL;

importRequiredLibsForAst() ::= <<
Require Import String.
Require Import symboltable.
Open Scope string_scope.
>>

optionVal(value) ::= <<
$if(value)$Some($value$)$else$None$endif$ 
>>

refType(typeMark, typeId) ::= <<
($typeMark$ $typeId$)
>>

list(elements) ::= <<
($elements; separator=" :: "$$if(elements)$ :: $endif$nil)
>>

literal(theType, theLiteral) ::= <<
($theType$ $theLiteral$)
>>

literalExpr(astnum, litval, checks) ::= <<
(Literal_XX $astnum$ $litval$ (**$checks$ nil**))
>>

binaryExpr(astnum, op, loperand, roperand, checks) ::= <<
(BinOp_XX $astnum$ $op$ $loperand$ $roperand$ (**$checks$ nil**))
>>

unaryExpr(astnum, op, operand, checks) ::= <<
(UnOp_XX $astnum$ $op$ $operand$ (**$checks$ nil**))
>>

nameExpr(astnum, x) ::= <<
(Name_XX $astnum$ $x$)
>>

varId(id, annotation) ::= <<
($if(annotation)$(*$annotation$*) $endif$$id$)
>>

identifierExpr(astnum, id, checks) ::= <<
(Identifier_XX $astnum$ $id$ (**$checks$**))
>>

// x[e]
indexedComponent(astnum, x, e, checks) ::= <<
(IndexedComponent_XX $astnum$ $x$ $e$ (**$checks$**))
>>

// x.f
selectedComponent(astnum, x, f, checks) ::= <<
(SelectedComponent_XX $astnum$ $x$ $f$ (**$checks$**))
>>

nullStmt() ::= <<
Null_XX
>>

assignStmt(astnum, lhs, rhs) ::= <<
(Assign_XX $astnum$ $lhs$ $rhs$)
>>

ifStmt(astnum, cond, trueBranch, falseBranch) ::= <<
(If_XX $astnum$ $cond$
  $trueBranch$
  $if(falseBranch)$$falseBranch$$else$$nullStmt()$$endif$
)
>>

whileStmt(astnum, cond, loopBody) ::= <<
(While_XX $astnum$ $cond$
  $loopBody$
)
>>

procedureCall(astnum, p_astnum, p, args) ::= <<
(Call_XX $astnum$ $p_astnum$ $p$ 
  $args$
)
>>

seqStmt(astnum, stmt1, stmt2) ::= <<
(Seq_XX $astnum$
$stmt1$ 
$stmt2$)
>>

returnStmt(astnum, returnExp) ::= <<
(Return_XX $astnum$ $if(returnExp)$(Some ($returnExp$))$else$None$endif$)
>>

assertStmt(astnum, assertExp) ::= <<
(Assert_XX $astnum$ $assertExp$)
>>	

loopInvariantStmt(astnum, invariantExp) ::= <<
(LoopInvariant_XX $astnum$ $invariantExp$)
>>

range(l, u) ::= <<
(Range_XX $l$ $u$)
>>

subtypeDecl(astnum, tid, parentSubtypeMark, range) ::= <<
(SubtypeDecl_XX $astnum$ $tid$ $parentSubtypeMark$ $range$)
>>

derivedtypeDecl(astnum, tid, parentSubtypeMark, range) ::= <<
(DerivedTypeDecl_XX $astnum$ $tid$ $parentSubtypeMark$ $range$)
>>

integertypeDecl(astnum, tid, range) ::= <<
(IntegerTypeDecl_XX $astnum$ $tid$ $range$)
>>

fieldDeclaration(fieldName, fieldType) ::= <<
($fieldName$, $fieldType$)
>>

arrayTypeDecl(astnum, tid, indexSubtypeMark, componentType) ::= <<
(ArrayTypeDecl_XX $astnum$ $tid$ ((*index subtype mark*) $indexSubtypeMark$) ((*component type*) $componentType$))
>>

recordTypeDecl(astnum, tid, fields) ::= <<
(RecordTypeDecl_XX $astnum$ $tid$ $fields$)
>>

objectDeclaration(astnum, id, theType, init) ::= <<
(mkobjDecl_XX $astnum$ $id$ $theType$ $if(init)$(Some ($init$))$else$None$endif$)
>>

paramSpecification(astnum, id, mode, theType) ::= <<
(mkparamSpec_XX $astnum$ $id$ $theType$ $if(mode)$$mode$$else$In$endif$)
>>

aspectSpecification(astnum, aspectMark, aspectDef) ::= <<
(mkaspectSpec_XX $astnum$
  (* Aspect Mark *)
  $aspectMark$
  (* Aspect Definition *)
  $aspectDef$
)
>>

objectDeclarationWrapper(astnum, objectDecl) ::= <<
(ObjDecl_XX $astnum$ $objectDecl$)
>>

procedureBodyDeclWrapper(astnum, procedureBodyDecl) ::= <<
(ProcBodyDecl_XX $astnum$ 
  $procedureBodyDecl$
)
>>

typeDeclarationWrapper(astnum, typeDecl) ::= <<
(TypeDecl_XX $astnum$ $typeDecl$)
>>

seqDeclaration(astnum, d1, d2) ::= <<
(SeqDecl_XX $astnum$
$d1$ 
$d2$)
>>

procedureBodyDeclaration(astnum, procName, params, identDecls, procBody) ::= <<
(mkprocBodyDecl_XX $astnum$
  (* = = = Procedure Name = = = *)
  $procName$
  (* = = = Formal Parameters = = = *)
  ($if(params)$
  $params; separator=" :: \n"$ :: $endif$nil)
  (* = = = Object Declarations = = = *)
  ($identDecls; separator=" :: \n"$)
  (* = = = Procedure Body = = = *)
    $procBody$
)
>>

functionBodyDeclaration(astnum, funcName, returnT, params, identDecls, funcBody) ::= <<
(mkfuncBodyDecl_XX $astnum$
  (* = = = Function Name = = = *)
  $funcName$
  (* = = = Return Type = = = *) 
  $returnT$
  (* = = = Formal Parameters = = = *)
  ($if(params)$
  $params; separator=" :: \n"$ :: $endif$nil)
  (* = = = Object Declarations = = = *)
  ($identDecls; separator=" :: \n"$)
  (* = = = Function Body = = = *)
    $funcBody$
)
>>

programDeclaration(decls, main) ::= << 
(mkprogram_XX
(* = = = declarations = = = *)
$decls$
(* = = = main procedure = = = *)
$main$
)
>>

// <Procedure procedure_body> or <Function function_body>
// <annotation> can be either "Procedure" or "Function"
subProgram(astnum, kind, prog, annotation) ::= <<
(* $annotation$ Body Declaration *)
($kind$ $astnum$
  $prog$
)
>>

// it's used as a placehold for unrecognized or undeclared subprograms
emptySubProgram() ::= <<
(mkprocedure_body_XX 0 0 nil D_Null_Declaration_XX S_Null_XX)
>>

packageBody(astnum, pkgBodyName, pkgBodyAspectSpecs, pkgBodyDeclItems) ::= <<
(* Package Body Declaration *)
(PackageBody_XX $astnum$
  (* = = = Package Body - Name = = = *)
  $pkgBodyName$
  (* = = = Package Body - Specification = = = *)
  ($if(pkgBodyAspectSpecs)$
  $pkgBodyAspectSpecs; separator = " ::\n"$ :: nil$else$None$endif$)    
  (* = = = Package Body - Declared Items = = = *) (
    $pkgBodyDeclItems; separator=" ::\n\n"$ :: nil
  )
)
>>

unitDeclaration(astnum, kind, packageUnit) ::= <<
($kind$ $astnum$
  $packageUnit$
)
>>

compilationUnit(astnum, unitDecl) ::= <<
(* Compilation Unit *)
Library_Unit_XX $astnum$
  (* = = = Compilation Unit - Unit Declaration = = = *)
  $unitDecl$
>>

// in Coq, it is something like "hello"%string
stringFormat(value) ::= <<
"$value$"%string
>>

nameTable(varNames, procNames, pkgNames, typeNames) ::= <<
(mkNameTable
  (*///////////////////////////////////*)
  (* = = = (1) variable names map = = = *)
  (*///////////////////////////////////*)
  ($varNames; separator = " :: "$$if(varNames)$ :: $endif$nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram names map = = = *)
  (*////////////////////////////////////////////*)
  ($procNames; separator = " :: "$$if(procNames)$ :: $endif$nil)
  (*//////////////////////////////////////*)
  (* = = = (3) package names map = = = *)
  (*//////////////////////////////////////*)
  ($pkgNames; separator = " :: "$$if(pkgNames)$ :: $endif$nil)
  (*/////////////////////////////////////*)
  (* = = = (4) type names map = = = *)
  (*/////////////////////////////////////*)
  ($typeNames; separator = " :: "$$if(typeNames)$ :: $endif$nil)
)
>>

symbolTable(vars, procs, types, exps, slocs, nameTable) ::= <<
(Symbol_Table_Module_xx.mkSymbolTable
  (*///////////////////////////////////*)
  (* = = = (1) variable type map = = = *)
  (*///////////////////////////////////*)
  ($vars; separator = " :: "$$if(vars)$ :: $endif$nil)
  (*////////////////////////////////////////////*)
  (* = = = (2) subprogram declaration map = = = *)
  (*////////////////////////////////////////////*)
  ($procs; separator = " :: "$$if(procs)$ :: $endif$nil)
  (*//////////////////////////////////////*)
  (* = = = (3) type declaration map = = = *)
  (*//////////////////////////////////////*)
  ($types; separator = " :: "$$if(types)$ :: $endif$nil)
  (*/////////////////////////////////////*)
  (* = = = (4) expression type map = = = *)
  (*/////////////////////////////////////*)
  ($exps; separator = " :: "$$if(exps)$ :: $endif$nil)
  (*/////////////////////////////////////////////////*)
  (* = = = (5) ast node to source location map = = = *)
  (*/////////////////////////////////////////////////*)
  ($slocs; separator = " :: "$$if(slocs)$ :: $endif$nil)
  (* = = = (6) name id to a pair of (name string, unique name string) map = = = *)
  (*/////////////////////////////////////////////////*)
  ($nameTable$)
)
>>

sourceLocation(line, col, endline, endcol) ::= <<
(sloc (*Line*)$line$ (*Col*)$col$ (*EndLine*)$endline$ (*EndCol*)$endcol$)
>>

product(x, y) ::= <<
($x$, $y$)
>>

definition(x, v) ::= <<
Definition $x$ := 
$v$.
>>