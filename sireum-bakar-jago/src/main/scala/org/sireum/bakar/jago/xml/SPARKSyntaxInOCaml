type mode = 
      | In
      | Out

type ident = int

type value = 
    | Aval of int
    | Bval of bool

type constant = 
	int

type unary_operation = 
	| Onegint 
	| Oposint 

type binary_operation = 
	| Ceq 
	| Cge 
	| Cgt 
	| Cle 
	| Clt 
	| Cne 
	| Oadd 
	| Oand 
	| Odiv 
	| Omul 
	| Oor 
	| Osub 
	| Oxor 

type expr = 
	| Econst of constant
	| Evar of ident
	| Ebinop of binary_operation * expr * expr
	| Eunop of unary_operation * expr

type predicate = expr

type loopInvariant = (predicate) option

type stmt = 
	| Sassign of ident * expr
	| Sifthen of expr * stmt
	| Swhile of expr * loopInvariant * stmt
	| Sseq of stmt * stmt

type param = {
	param_ident: ident;
	param_mode: mode;
	param_init: (expr) option 
}

type subprog_aspect_specs = {
	pre: (predicate) option;
	post: (predicate) option 
}

(* Local variables declarations used in the procedure/function body *)
type defining_ident = {
	local_idents: ident list;
	local_init: (value) option 
}

type procedure_body = {
	proc_name: ident;
	proc_specs: (subprog_aspect_specs) option;
	proc_params: (param list) option;
	proc_defidents: (defining_ident list) option;
	proc_body: stmt 
}

type retT = value

type function_body = {
	fn_name: ident;
	fn_specs: (subprog_aspect_specs) option;
	fn_retT: retT;
	fn_params: (param list) option;
	fn_defidents: (defining_ident list) option;
	fn_body: stmt 
}

type subprogram = 
	| Sproc of procedure_body
	| Sfunc of function_body

type pkgbody_aspect_specs = subprog_aspect_specs

type package_body = 
	| Packagebody of ident * (pkgbody_aspect_specs) option * subprogram list