// Do not edit this file. It is auto-generated from org.sireum.bakar.jago.typ.BakarTypTranslator
// by org.sireum.pipeline.gen.ModuleGenerator

package org.sireum.bakar.jago.typ

import org.sireum.util._
import org.sireum.pipeline._
import java.lang.String
import org.sireum.option.TypeTarget.Type

object BakarTypTranslatorModule extends PipelineModule {
  def title = ""
  def origin = classOf[BakarTypTranslator]

  val jagoTypeResultsKey = "BakarTypTranslator.jagoTypeResults"
  val globalJagoTypeTargetKey = "Global.jagoTypeTarget"

  def compute(job : PipelineJob, info : PipelineJobModuleInfo) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    try {
      val module = Class.forName("org.sireum.bakar.jago.typ.BakarTypTranslatorModuleDef")
      val cons = module.getConstructors()(0)
      val params = Array[AnyRef](job, info)
      val inst = cons.newInstance(params : _*)
    } catch {
      case e : Throwable =>
        e.printStackTrace
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, e.getMessage);
    }
    return tags
  }

  override def initialize(job : PipelineJob) {
  }

  override def validPipeline(stage : PipelineStage, job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    val deps = ilist[PipelineModule]()
    deps.foreach(d =>
      if(stage.modules.contains(d)){
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "'" + this.title + "' depends on '" + d.title + "' yet both were found in stage '" + stage.title + "'"
        )
      }
    )
    return tags
  }

  def inputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    var _jagoTypeTarget : scala.Option[AnyRef] = None
    var _jagoTypeTargetKey : scala.Option[String] = None

    val keylistjagoTypeTarget = List(BakarTypTranslatorModule.globalJagoTypeTargetKey)
    keylistjagoTypeTarget.foreach(key => 
      if(job ? key) { 
        if(_jagoTypeTarget.isEmpty) {
          _jagoTypeTarget = Some(job(key))
          _jagoTypeTargetKey = Some(key)
        }
        if(!(job(key).asInstanceOf[AnyRef] eq _jagoTypeTarget.get)) {
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': 'jagoTypeTarget' keys '" + _jagoTypeTargetKey.get + " and '" + key + "' point to different objects.")
        }
      }
    )

    _jagoTypeTarget match{
      case Some(x) =>
        if(!x.isInstanceOf[org.sireum.option.TypeTarget.Type]){
          tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
            "Input error for '" + this.title + "': Wrong type found for 'jagoTypeTarget'.  Expecting 'org.sireum.option.TypeTarget.Type' but found '" + x.getClass.toString + "'")
        }
      case None =>
        tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
          "Input error for '" + this.title + "': No value found for 'jagoTypeTarget'")       
    }
    return tags
  }

  def outputDefined (job : PipelineJob) : MBuffer[Tag] = {
    val tags = marrayEmpty[Tag]
    if(!(job ? BakarTypTranslatorModule.jagoTypeResultsKey)) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker,
        "Output error for '" + this.title + "': No entry found for 'jagoTypeResults'. Expecting (BakarTypTranslatorModule.jagoTypeResultsKey)") 
    }

    if(job ? BakarTypTranslatorModule.jagoTypeResultsKey && !job(BakarTypTranslatorModule.jagoTypeResultsKey).isInstanceOf[java.lang.String]) {
      tags += PipelineUtil.genTag(PipelineUtil.ErrorMarker, 
        "Output error for '" + this.title + "': Wrong type found for BakarTypTranslatorModule.jagoTypeResultsKey.  Expecting 'java.lang.String' but found '" + 
        job(BakarTypTranslatorModule.jagoTypeResultsKey).getClass.toString + "'")
    } 
    return tags
  }

  def getJagoTypeTarget (options : scala.collection.Map[Property.Key, Any]) : org.sireum.option.TypeTarget.Type = {
    if (options.contains(BakarTypTranslatorModule.globalJagoTypeTargetKey)) {
       return options(BakarTypTranslatorModule.globalJagoTypeTargetKey).asInstanceOf[org.sireum.option.TypeTarget.Type]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setJagoTypeTarget (options : MMap[Property.Key, Any], jagoTypeTarget : org.sireum.option.TypeTarget.Type) : MMap[Property.Key, Any] = {

    options(BakarTypTranslatorModule.globalJagoTypeTargetKey) = jagoTypeTarget

    return options
  }

  def getJagoTypeResults (options : scala.collection.Map[Property.Key, Any]) : java.lang.String = {
    if (options.contains(BakarTypTranslatorModule.jagoTypeResultsKey)) {
       return options(BakarTypTranslatorModule.jagoTypeResultsKey).asInstanceOf[java.lang.String]
    }

    throw new Exception("Pipeline checker should guarantee we never reach here")
  }

  def setJagoTypeResults (options : MMap[Property.Key, Any], jagoTypeResults : java.lang.String) : MMap[Property.Key, Any] = {

    options(jagoTypeResultsKey) = jagoTypeResults

    return options
  }

  object ConsumerView {
    implicit class BakarTypTranslatorModuleConsumerView (val job : PropertyProvider) extends AnyVal {
      def jagoTypeTarget : org.sireum.option.TypeTarget.Type = BakarTypTranslatorModule.getJagoTypeTarget(job.propertyMap)
      def jagoTypeResults : java.lang.String = BakarTypTranslatorModule.getJagoTypeResults(job.propertyMap)
    }
  }

  object ProducerView {
    implicit class BakarTypTranslatorModuleProducerView (val job : PropertyProvider) extends AnyVal {

      def jagoTypeTarget_=(jagoTypeTarget : org.sireum.option.TypeTarget.Type) { BakarTypTranslatorModule.setJagoTypeTarget(job.propertyMap, jagoTypeTarget) }
      def jagoTypeTarget : org.sireum.option.TypeTarget.Type = BakarTypTranslatorModule.getJagoTypeTarget(job.propertyMap)

      def jagoTypeResults_=(jagoTypeResults : java.lang.String) { BakarTypTranslatorModule.setJagoTypeResults(job.propertyMap, jagoTypeResults) }
      def jagoTypeResults : java.lang.String = BakarTypTranslatorModule.getJagoTypeResults(job.propertyMap)
    }
  }
}

trait BakarTypTranslatorModule {
  def job : PipelineJob

  def jagoTypeTarget : org.sireum.option.TypeTarget.Type = BakarTypTranslatorModule.getJagoTypeTarget(job.propertyMap)


  def jagoTypeResults_=(jagoTypeResults : java.lang.String) { BakarTypTranslatorModule.setJagoTypeResults(job.propertyMap, jagoTypeResults) }
  def jagoTypeResults : java.lang.String = BakarTypTranslatorModule.getJagoTypeResults(job.propertyMap)
}