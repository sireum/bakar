
typeDefinitions(typeDeclarations) ::= <<
$basicTypes()$

$typeDeclarations; separator="\n\n"$
>>

//type ident =
//	| Aid of int
//	| Bid of int

basicTypes() ::= <<
type mode = 
    | In
    | Out

type typ = 
    | Tint
    | Tbool

type ident = int

type uri = int

type location = 
    | Loc of (int * int) * (int * int)

type value = 
    | Aval of int
    | Bval of bool
>>

typeDeclaration(typeName, constructorDecls, annotation) ::= <<
$if(annotation)$(* $annotation$ *)$endif$
type $typeName$ = 
	$constructorDecls; separator="\n"$
>>

fieldDeclaration(fieldName, fieldType) ::= <<
$fieldName$: $fieldType$
>>

// to make it consistent with Coq StringTemplate, we keep the property "constructorName"
recordDeclaration(recordName, constructorName, fields, annotation) ::= <<
$if(annotation)$(* $annotation$ *)$endif$
type $recordName$ = $if(constructorName)$$endif${
	$fields; separator=";\n"$ 
}
>>

// constructorArgs is a typeExpression in form like: int * int 
constructor(constructorName, constructorArgs) ::= <<
| $constructorName$ $if(constructorArgs)$of $constructorArgs$$endif$
>>

// construct type expression with form like: int * string 
constructorArguments(arguments) ::= <<
$arguments; separator=" * "$
>>

typeRename(newName, oldName) ::= <<
type $newName$ = $oldName$
>>

// In Coq, "option bool" should be written with "bool option" in OCaml
optionType(theType) ::= <<
($theType$) option
>>

listType(elemType) ::= <<
$elemType$ list
>>





