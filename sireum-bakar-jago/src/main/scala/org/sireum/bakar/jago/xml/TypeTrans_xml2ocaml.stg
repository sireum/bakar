
typeDefinitions(typeDeclarations) ::= <<
$basicTypes()$

$typeDeclarations; separator="\n\n"$
>>

basicTypes() ::= <<
type mode = 
    | In
    | Out

type typ = 
    | Tint

type astnum = int

type idnum = int

type procnum = int

type pkgnum = int

type typenum = int

type typedeclnum = astnum

type aspectnum = int

type typeuri = string

type type_table = {
    tt_exptype_table: (astnum * typenum) list;
    tt_typename_table: (typenum * (typeuri * typedeclnum option)) list
}
>>

typeDeclaration(typeName, constructorDecls, annotation) ::= <<
$if(annotation)$(* $annotation$ *)$endif$
type $typeName$ = 
	$constructorDecls; separator="\n"$
>>

fieldDeclaration(fieldName, fieldType) ::= <<
$fieldName$: $fieldType$
>>

// to make it consistent with Coq StringTemplate, we keep the property "constructorName"
recordDeclaration(recordName, constructorName, fields, annotation) ::= <<
$if(annotation)$(* $annotation$ *)$endif$
type $recordName$ = $if(constructorName)$$endif${
	$fields; separator=";\n"$ 
}
>>

// constructorArgs is a typeExpression in form like: int * int 
constructor(constructorName, constructorArgs) ::= <<
| $constructorName$ $if(constructorArgs)$of $constructorArgs; separator=" * "$$endif$
>>

typeRename(newName, oldName) ::= <<
type $newName$ = $oldName$
>>

// the Coq type "option bool" should be written with "bool option" in OCaml
optionType(theType) ::= <<
($theType$) option
>>

listType(elemType) ::= <<
$elemType$ list
>>





