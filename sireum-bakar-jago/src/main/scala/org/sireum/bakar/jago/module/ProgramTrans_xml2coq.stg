// group SPARKTRANS_Coq_MODEL;

optionVal(value) ::= <<
$if(value)$Some($value$)$else$None$endif$ 
>>

binaryExpr(op, loperand, roperand) ::= <<
Ebinop $op$ ($loperand$) ($roperand$)
>>

unaryExpr(op, operand) ::= <<
Eunop $op$ ($operand$)
>>

// identifier is either (1) Bid nat; or (2) Aid nat 
varId(theType, id, annotation) ::= <<
$theType$ $id$ $if(annotation)$(*$annotation$*)$endif$
>>

identifierExpr(id) ::= <<
Evar ($id$)
>>

// Inductive constant: Type := 
//     | Ointconst: nat -> constant
// the type is "Ointconst", the value is of type nat
constant(theType, constVal) ::= <<
$theType$ $constVal$
>>

constantExpr(constVal) ::= <<
Econst ($constVal$)
>>

procedureCall(procName, args) ::= <<
$procName$($args; separator=", "$)
>>

seqStmt(stmt1, stmt2) ::= <<
Sseq (
  $stmt1$) ( 
  $stmt2$)
>>

whileStmt(cond, loopInv, loopBody) ::= <<
Swhile ($cond$) 
  $if(loopInv)$($loopInv$)$else$None$endif$(
  $loopBody$)
>>

ifStmt(cond, ifBody) ::= <<
Sifthen ($cond$)(
  $ifBody$
)
>>

assignStmt(lhs, rhs) ::= <<
Sassign ($lhs$) ($rhs$)
>>

param(id, mode, initExp) ::= <<
mkparam ($id$) $if(mode)$($mode$)$else$In$endif$ $if(initExp)$($initExp$)$else$None$endif$
>>

subprogAspectSpecs(pre, post) ::= <<
mksubprog_aspect_specs 
  (* Precondition *)
  ($if(pre)$
  $pre$$else$None$endif$) 
  (* Postcondition *)
  ($if(post)$
  $post$$else$None$endif$)
>>

identiferDecl(ids, init) ::= <<
mkdefining_ident ($ids; separator=" :: "$) $if(init)$$init$$else$None$endif$
>>

procedureBody(aspectSpecs, params, identDecls, procBody) ::= <<
mkprocedure_body 
  (* Procedure Body - Specification *)
  ($if(aspectSpecs)$
  $aspectSpecs$$else$None$endif$)
  (* Procedure Body - Parameters *)
  ($if(params)$Some(
    $params; separator=" :: \n"$
  )$else$None$endif$) 
  (* Procedure Body - Locally Defined Variables *)
  ($if(identDecls)$Some(
    $identDecls; separator=" :: \n"$
  )$else$None$endif$)
  (* Procedure Body - Body *) (
    $procBody$
  )
>>

functionBody(aspectSpecs, returnT, params, identDecls, funcBody) ::= <<
mkfunction_body 
  (* Function Body - Specification *)
  ($if(aspectSpecs)$
  $aspectSpecs$$else$None$endif$)
  (* Function Body - Return Type *) 
  ($returnT$) 
  (* Function Body - Parameters *)
  ($if(params)$Some(
    $params; separator=" :: \n"$
  )$else$None$endif$)
  (* Function Body - Locally Defined Variables *)
  ($if(identDecls)$Some(
    $identDecls; separator=" :: \n"$
  )$else$None$endif$)
  (* Function Body - Body *) (
    $funcBody$
  )
>>

// <Sproc procedure_body> or <Sfunc function_body>
// <annotation> can be either "Procedure" or "Function"
subProgram(kind, prog, annotation) ::= <<
(* $annotation$ Body Definition *)
$kind$(
  $prog$
)
>>

packageBody(pkgBodyName, pkgBodyAspectSpecs, pkgBodyDeclItems) ::= <<
Definition $pkgBodyName$ := 
  (* Package Body Definition *)
  Packagebody 
    (* Package Body - Specification *)
    ($if(pkgBodyAspectSpecs)$
    $pkgBodyAspectSpecs$$else$None$endif$)    
    (* Package Body - Declared Items *) (
    $pkgBodyDeclItems; separator=" ::\n\n"$)
>>






