// group SPARKTRANS_Coq_MODEL;

optionVal(value) ::= <<
$if(value)$Some($value$)$else$None$endif$ 
>>

binaryExpr(uri, op, loperand, roperand) ::= <<
Ebinop $uri$ $op$ ($loperand$) ($roperand$)
>>

unaryExpr(uri, op, operand) ::= <<
Eunop $uri$ $op$ ($operand$)
>>

varId(id, annotation) ::= <<
$if(annotation)$(*$annotation$*) $endif$$id$
>>

identifierExpr(uri, id) ::= <<
Evar $uri$ $id$
>>

// Inductive constant: Type := 
//     | Ointconst: nat -> constant
// the type is "Ointconst", the value is of type nat
constant(theType, constVal) ::= <<
$theType$ $constVal$
>>

constantExpr(uri, constVal) ::= <<
Econst $uri$ ($constVal$)
>>

procedureCall(procName, args) ::= <<
$procName$($args; separator=", "$)
>>

seqStmt(uri, stmt1, stmt2) ::= <<
Sseq ( $uri$
  $stmt1$ ) ( 
  $stmt2$ )
>>

whileStmt(uri, cond, loopInv, loopBody) ::= <<
Swhile ($uri$ $cond$) ($if(loopInv)$
    $loopInv$$else$
    None$endif$ ) (
    $loopBody$
  )
>>

ifStmt(uri, cond, ifBody) ::= <<
Sifthen $uri$ ($cond$) (
    $ifBody$
  )
>>

assignStmt(uri, lhs, rhs) ::= <<
Sassign $uri$ ($lhs$) ($rhs$)
>>

param(uri, id, mode, initExp) ::= <<
mkparam $uri$ ($id$) $if(mode)$($mode$)$else$In$endif$ $if(initExp)$($initExp$)$else$None$endif$
>>

subprogAspectSpecs(uri, pre, post) ::= <<
mksubprog_aspect_specs 
  (* URI *)
  $uri$
  (* Precondition *)
  ($if(pre)$
  $pre$$else$None$endif$) 
  (* Postcondition *)
  ($if(post)$
  $post$$else$None$endif$)
>>

identiferDecl(uri, ids, init) ::= <<
mklocal_ident $uri$ ($ids; separator=" :: "$) $if(init)$$init$$else$None$endif$
>>

procedureBody(uri, procName, aspectSpecs, params, identDecls, procBody) ::= <<
mkprocedure_body 
  (* Procedure Body - URI *)
  $uri$
  (* Procedure Body - Name *)
  $procName$
  (* Procedure Body - Specification *)
  ($if(aspectSpecs)$
  $aspectSpecs$$else$None$endif$)
  (* Procedure Body - Parameters *)
  ($if(params)$Some(
    $params; separator=" :: \n"$
  )$else$None$endif$) 
  (* Procedure Body - Locally Defined Variables *)
  ($if(identDecls)$Some(
    $identDecls; separator=" :: \n"$
  )$else$None$endif$)
  (* Procedure Body - Body *) (
    $procBody$
  )
>>

functionBody(uri, funcName, aspectSpecs, returnT, params, identDecls, funcBody) ::= <<
mkfunction_body 
  (* Function Body - URI *)
  $uri$
  (* Function Body - Name *)
  $funcName$
  (* Function Body - Specification *)
  ($if(aspectSpecs)$
  $aspectSpecs$$else$None$endif$)
  (* Function Body - Return Type *) 
  ($returnT$) 
  (* Function Body - Parameters *)
  ($if(params)$Some(
    $params; separator=" :: \n"$
  )$else$None$endif$)
  (* Function Body - Locally Defined Variables *)
  ($if(identDecls)$Some(
    $identDecls; separator=" :: \n"$
  )$else$None$endif$)
  (* Function Body - Body *) (
    $funcBody$
  )
>>

// <Sproc procedure_body> or <Sfunc function_body>
// <annotation> can be either "Procedure" or "Function"
subProgram(uri, kind, prog, annotation) ::= <<
(* $annotation$ Body Declaration *)
$kind$
  $uri$
  ($prog$)
>>

packageBody(pkgBodyUri, pkgBodyName, pkgBodyAspectSpecs, pkgBodyDeclItems) ::= <<
(* Package Body Declaration *)
Packagebody 
  (* Package Body - URI *)
  ($pkgBodyUri$)
  (* Package Body - Name *)
  ($pkgBodyName$)
  (* Package Body - Specification *)
  ($if(pkgBodyAspectSpecs)$
  $pkgBodyAspectSpecs$$else$None$endif$)    
  (* Package Body - Declared Items *) (
    $pkgBodyDeclItems; separator=" ::\n\n"$
  )
>>

compilationUnit(unitUri, unitName, unitDecl,
  unitExpTypeTable, unitTypeUriTable) ::= <<
(* Compilation Unit Declaration *)
PkgBodyDecl
  (* Compilation Unit - URI *)
  $unitUri$
  (* Compilation Unit - Name *)
  ($unitName$)
  (* Compilation Unit - Unit Declaration *) (
    $unitDecl$
  )
  (* Compilation Unit - Type Table *) (
    mktype_table (
      (* Expression --> TypeNum *)
      $unitExpTypeTable; separator=" ::\n"$
    ) (
      (* TypeNum --> Type Name *)
      $unitTypeUriTable; separator=" ::\n"$
    )
    
  )
>>

mappingPair(key, value) ::= <<
($key$, $value$)
>>

location(line, col, endline, endcol) ::= <<
Loc ($line$, $col$) ($endline$, $endcol$)
>>


