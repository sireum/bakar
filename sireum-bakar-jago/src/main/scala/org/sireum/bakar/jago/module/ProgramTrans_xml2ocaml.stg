// group SPARKTRANS_OCaml_MODEL;

optionVal(value) ::= <<
$if(value)$Some($value$)$else$None$endif$ 
>>

binaryExpr(op, loperand, roperand) ::= <<
Ebinop ($op$, $loperand$, $roperand$)
>>

unaryExpr(op, operand) ::= <<
Eunop ($op$, $operand$)
>>

// identifier is either (1) Bid nat; or (2) Aid nat 
varId(theType, id) ::= <<
$theType$ $id$
>>

identifierExpr(id) ::= <<
Evar ($id$)
>>

// Inductive constant: Type := 
//     | Ointconst: nat -> constant
// the type is "Ointconst", the value is of type nat
// $if(theType)$$theType$ $endif$$constVal$
constant(theType, constVal) ::= <<
$constVal$
>>

constantExpr(constVal) ::= <<
Econst $constVal$
>>

// procedureCall(procName, args) ::= <<
// $procName$($args; separator=", "$)
// >>

seqStmt(stmt1, stmt2) ::= <<
Sseq (
  $stmt1$,
  $stmt2$)
>>

whileStmt(cond, loopInv, loopBody) ::= <<
Swhile (($cond$), 
  $if(loopInv)$($loopInv$)$else$None$endif$, (
  $loopBody$))
>>

ifStmt(cond, ifBody) ::= <<
Sifthen (($cond$), (
  $ifBody$))
>>

assignStmt(lhs, rhs) ::= <<
Sassign (($lhs$), ($rhs$))
>>

param(id, mode, initExp) ::= <<
{ p_ident = $id$; p_mode = $mode$; p_init = $if(initExp)$$initExp$$else$None$endif$ }
>>

subprogAspectSpecs(pre, post) ::= <<
{ pre = $if(pre)$
    $pre$
  $else$None$endif$; 
  post = $if(post)$
    $post$
  $else$None$endif$ 
}
>>

// +++++++++
identiferDecl(ids, init) ::= <<
{ def_idents = [$ids; separator="; "$]; def_init = $if(init)$$init$$else$None$endif$ }
>>

// ++++++
procedureBody(aspectSpecs, params, identDecls, procBody) ::= <<
{ proc_specs = $if(aspectSpecs)$(
    $aspectSpecs$
  )$else$None$endif$;
  proc_params = $if(params)$
    Some([
      $params; separator="; \n"$
    ])$else$None$endif$;
  proc_defidents = $if(identDecls)$
    Some([
      $identDecls; separator="; \n"$
    ])$else$None$endif$;
  proc_body = (
    $procBody$
  )
}
>>

// ++++
functionBody(aspectSpecs, returnT, params, identDecls, funcBody) ::= <<
{
  fn_specs = $if(aspectSpecs)$(
    $aspectSpecs$
  )$else$None$endif$;
  fn_retT = (
    $returnT$
  );
  fn_params = $if(params)$
    Some([
      $params; separator="; \n"$
    ])$else$None$endif$;
  fn_defidents = $if(identDecls)$
    Some([
      $identDecls; separator="; \n"$
    ])$else$None$endif$;
  fn_body = (
    $funcBody$
  )
}
>>

// <Sproc procedure_body> or <Sfunc function_body>
subProgram(kind, prog) ::= <<
$kind$(
  $prog$
)
>>

// ++++++
packageBody(pkgBodyName, pkgBodyAspectSpecs, pkgBodyDeclItems) ::= <<
(* let $pkgBodyName$ = *)
  Packagebody (
    $if(pkgBodyAspectSpecs)$ ($pkgBodyAspectSpecs$)$else$None$endif$, 
    [
      $pkgBodyDeclItems; separator="; \n"$
    ] 
  ) ;;
>>



