// group SPARKTRANS_OCaml_MODEL;

optionVal(value) ::= <<
$if(value)$Some($value$)$else$None$endif$ 
>>

binaryExpr(op, loperand, roperand) ::= <<
Ebinop ($op$, $loperand$, $roperand$)
>>

unaryExpr(op, operand) ::= <<
Eunop ($op$, $operand$)
>>

// identifier is either (1) Bid nat; or (2) Aid nat 
varId(theType, id, annotation) ::= <<
$theType$ $id$ $if(annotation)$(*$annotation$*)$endif$
>>

identifierExpr(id) ::= <<
Evar ($id$)
>>

// Inductive constant: Type := 
//     | Ointconst: nat -> constant
// the type is "Ointconst", the value is of type nat
// $if(theType)$$theType$ $endif$$constVal$
constant(theType, constVal) ::= <<
$constVal$
>>

constantExpr(constVal) ::= <<
Econst $constVal$
>>

// procedureCall(procName, args) ::= <<
// $procName$($args; separator=", "$)
// >>

seqStmt(stmt1, stmt2) ::= <<
Sseq (
  $stmt1$,
  $stmt2$ )
>>

whileStmt(cond, loopInv, loopBody) ::= <<
Swhile ($cond$, 
  $if(loopInv)$
  $loopInv$$else$
  None$endif$,
  $loopBody$
)
>>

ifStmt(cond, ifBody) ::= <<
Sifthen ($cond$,
  $ifBody$
)
>>

assignStmt(lhs, rhs) ::= <<
Sassign ($lhs$, $rhs$)
>>

param(id, mode, initExp) ::= <<
{ p_ident = $id$; p_mode = $mode$; p_init = $if(initExp)$$initExp$$else$None$endif$ }
>>

subprogAspectSpecs(pre, post) ::= <<
{ pre = 
    (* Precondition *)
    $if(pre)$
    $pre$$else$None$endif$; 
  post = 
    (* Postcondition *)
    $if(post)$
    $post$$else$None$endif$ 
}
>>

// +++++++++
identiferDecl(ids, init) ::= <<
{ def_idents = [$ids; separator="; "$]; def_init = $if(init)$$init$$else$None$endif$ }
>>

// ++++++
procedureBody(procName, aspectSpecs, params, identDecls, procBody) ::= <<
{ proc_name = 
    (* Procedure Body - Name *)
    $procName$;
  proc_specs =
    (* Procedure Body - Specification *)
    $if(aspectSpecs)$
    $aspectSpecs$$else$
    None$endif$;
  proc_params = 
    (* Procedure Body - Parameters *)
    $if(params)$Some([
      $params; separator="; \n"$
    ])$else$
    None$endif$;
  proc_defidents = 
    (* Procedure Body - Locally Defined Variables *)
    $if(identDecls)$Some([
      $identDecls; separator="; \n"$
    ])$else$
    None$endif$;
  proc_body =
    (* Procedure Body - Body *)
    $procBody$
}
>>

// ++++
functionBody(funcName, aspectSpecs, returnT, params, identDecls, funcBody) ::= <<
{ fn_name =
    (* Function Body - Name *)
    $funcName$;
  fn_specs = 
    (* Function Body - Specification *)
    $if(aspectSpecs)$
    $aspectSpecs$$else$
    None$endif$;
  fn_retT = 
    (* Function Body - Return Type *)
    $returnT$;
  fn_params = 
    (* Function Body - Parameters *)
    $if(params)$Some([
      $params; separator="; \n"$
    ])$else$
    None$endif$;
  fn_defidents = 
    (* Function Body - Locally Defined Variables *)
    $if(identDecls)$Some([
      $identDecls; separator="; \n"$
    ])$else$
    None$endif$;
  fn_body = 
    (* Function Body - Body *)
    $funcBody$
}
>>

// <Sproc procedure_body> or <Sfunc function_body>
subProgram(kind, prog, annotation) ::= <<
(* $annotation$ Body Declaration *)
$kind$(
  $prog$
)
>>

// ++++++
packageBody(pkgBodyName, pkgBodyAspectSpecs, pkgBodyDeclItems) ::= <<
(* Package Body Declaration *)
Packagebody (
  (* Package Body - Name *)
  $pkgBodyName$,
  (* Package Body - Specification *)
  $if(pkgBodyAspectSpecs)$
  $pkgBodyAspectSpecs$$else$
  None$endif$, 
  (* Package Body - Declared Items *)
  [
    $pkgBodyDeclItems; separator="; \n"$
  ] 
)
>>



